// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/core/port/repository.go
//
// Generated by this command:
//
//	mockgen -source ./internal/core/port/repository.go -package mockrepository
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	domain "github.com/pi-financial/onboard-srv-v2/internal/core/domain"
	port "github.com/pi-financial/onboard-srv-v2/internal/core/port"
	gomock "go.uber.org/mock/gomock"
)

// MockMT4Repository is a mock of MT4Repository interface.
type MockMT4Repository struct {
	ctrl     *gomock.Controller
	recorder *MockMT4RepositoryMockRecorder
	isgomock struct{}
}

// MockMT4RepositoryMockRecorder is the mock recorder for MockMT4Repository.
type MockMT4RepositoryMockRecorder struct {
	mock *MockMT4Repository
}

// NewMockMT4Repository creates a new mock instance.
func NewMockMT4Repository(ctrl *gomock.Controller) *MockMT4Repository {
	mock := &MockMT4Repository{ctrl: ctrl}
	mock.recorder = &MockMT4RepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMT4Repository) EXPECT() *MockMT4RepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMT4Repository) Create(ctx context.Context, data *domain.MT4) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMT4RepositoryMockRecorder) Create(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMT4Repository)(nil).Create), ctx, data)
}

// Get mocks base method.
func (m *MockMT4Repository) Get(ctx context.Context, startDate, endDate string, isExported *bool) ([]domain.MT4, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, startDate, endDate, isExported)
	ret0, _ := ret[0].([]domain.MT4)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMT4RepositoryMockRecorder) Get(ctx, startDate, endDate, isExported any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMT4Repository)(nil).Get), ctx, startDate, endDate, isExported)
}

// UpdateExported mocks base method.
func (m *MockMT4Repository) UpdateExported(ctx context.Context, tradingAccounts []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExported", ctx, tradingAccounts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExported indicates an expected call of UpdateExported.
func (mr *MockMT4RepositoryMockRecorder) UpdateExported(ctx, tradingAccounts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExported", reflect.TypeOf((*MockMT4Repository)(nil).UpdateExported), ctx, tradingAccounts)
}

// MockMT5Repository is a mock of MT5Repository interface.
type MockMT5Repository struct {
	ctrl     *gomock.Controller
	recorder *MockMT5RepositoryMockRecorder
	isgomock struct{}
}

// MockMT5RepositoryMockRecorder is the mock recorder for MockMT5Repository.
type MockMT5RepositoryMockRecorder struct {
	mock *MockMT5Repository
}

// NewMockMT5Repository creates a new mock instance.
func NewMockMT5Repository(ctrl *gomock.Controller) *MockMT5Repository {
	mock := &MockMT5Repository{ctrl: ctrl}
	mock.recorder = &MockMT5RepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMT5Repository) EXPECT() *MockMT5RepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMT5Repository) Create(ctx context.Context, data *domain.MT5) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMT5RepositoryMockRecorder) Create(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMT5Repository)(nil).Create), ctx, data)
}

// Get mocks base method.
func (m *MockMT5Repository) Get(ctx context.Context, startDate, endDate string, isExported *bool) ([]domain.MT5, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, startDate, endDate, isExported)
	ret0, _ := ret[0].([]domain.MT5)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMT5RepositoryMockRecorder) Get(ctx, startDate, endDate, isExported any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMT5Repository)(nil).Get), ctx, startDate, endDate, isExported)
}

// UpdateExported mocks base method.
func (m *MockMT5Repository) UpdateExported(ctx context.Context, tradingAccounts []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExported", ctx, tradingAccounts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExported indicates an expected call of UpdateExported.
func (mr *MockMT5RepositoryMockRecorder) UpdateExported(ctx, tradingAccounts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExported", reflect.TypeOf((*MockMT5Repository)(nil).UpdateExported), ctx, tradingAccounts)
}

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
	isgomock struct{}
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// Transaction mocks base method.
func (m *MockTransactionRepository) Transaction(ctx context.Context, fn func(port.MT4Repository, port.MT5Repository) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockTransactionRepositoryMockRecorder) Transaction(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockTransactionRepository)(nil).Transaction), ctx, fn)
}
