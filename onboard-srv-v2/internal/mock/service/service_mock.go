// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/core/port/service.go
//
// Generated by this command:
//
//	mockgen -source ./internal/core/port/service.go -package mockservice
//

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"

	dto "github.com/pi-financial/onboard-srv-v2/internal/client/dto"
	domain "github.com/pi-financial/onboard-srv-v2/internal/core/domain"
	dto0 "github.com/pi-financial/onboard-srv-v2/internal/handler/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockMetaTraderService is a mock of MetaTraderService interface.
type MockMetaTraderService struct {
	ctrl     *gomock.Controller
	recorder *MockMetaTraderServiceMockRecorder
	isgomock struct{}
}

// MockMetaTraderServiceMockRecorder is the mock recorder for MockMetaTraderService.
type MockMetaTraderServiceMockRecorder struct {
	mock *MockMetaTraderService
}

// NewMockMetaTraderService creates a new mock instance.
func NewMockMetaTraderService(ctrl *gomock.Controller) *MockMetaTraderService {
	mock := &MockMetaTraderService{ctrl: ctrl}
	mock.recorder = &MockMetaTraderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetaTraderService) EXPECT() *MockMetaTraderServiceMockRecorder {
	return m.recorder
}

// CreateMetaTrader mocks base method.
func (m *MockMetaTraderService) CreateMetaTrader(arg0 context.Context, arg1 []domain.CreateMetaTraderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetaTrader", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMetaTrader indicates an expected call of CreateMetaTrader.
func (mr *MockMetaTraderServiceMockRecorder) CreateMetaTrader(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetaTrader", reflect.TypeOf((*MockMetaTraderService)(nil).CreateMetaTrader), arg0, arg1)
}

// GetMetaTrader mocks base method.
func (m *MockMetaTraderService) GetMetaTrader(arg0 context.Context, arg1 *domain.GetMetaTraderFilter) ([]domain.MT4, []domain.MT5, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetaTrader", arg0, arg1)
	ret0, _ := ret[0].([]domain.MT4)
	ret1, _ := ret[1].([]domain.MT5)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMetaTrader indicates an expected call of GetMetaTrader.
func (mr *MockMetaTraderServiceMockRecorder) GetMetaTrader(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetaTrader", reflect.TypeOf((*MockMetaTraderService)(nil).GetMetaTrader), arg0, arg1)
}

// SendMetaTraderCreatedNotificationEmail mocks base method.
func (m *MockMetaTraderService) SendMetaTraderCreatedNotificationEmail(arg0 context.Context, arg1 []domain.CreateMetaTraderRequest, arg2 dto0.Locale) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMetaTraderCreatedNotificationEmail", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMetaTraderCreatedNotificationEmail indicates an expected call of SendMetaTraderCreatedNotificationEmail.
func (mr *MockMetaTraderServiceMockRecorder) SendMetaTraderCreatedNotificationEmail(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMetaTraderCreatedNotificationEmail", reflect.TypeOf((*MockMetaTraderService)(nil).SendMetaTraderCreatedNotificationEmail), arg0, arg1, arg2)
}

// UpdateMetaTrader mocks base method.
func (m *MockMetaTraderService) UpdateMetaTrader(arg0 context.Context, arg1 *domain.UpdateMetaTraderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetaTrader", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetaTrader indicates an expected call of UpdateMetaTrader.
func (mr *MockMetaTraderServiceMockRecorder) UpdateMetaTrader(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetaTrader", reflect.TypeOf((*MockMetaTraderService)(nil).UpdateMetaTrader), arg0, arg1)
}

// MockUserSrvV2Service is a mock of UserSrvV2Service interface.
type MockUserSrvV2Service struct {
	ctrl     *gomock.Controller
	recorder *MockUserSrvV2ServiceMockRecorder
	isgomock struct{}
}

// MockUserSrvV2ServiceMockRecorder is the mock recorder for MockUserSrvV2Service.
type MockUserSrvV2ServiceMockRecorder struct {
	mock *MockUserSrvV2Service
}

// NewMockUserSrvV2Service creates a new mock instance.
func NewMockUserSrvV2Service(ctrl *gomock.Controller) *MockUserSrvV2Service {
	mock := &MockUserSrvV2Service{ctrl: ctrl}
	mock.recorder = &MockUserSrvV2ServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSrvV2Service) EXPECT() *MockUserSrvV2ServiceMockRecorder {
	return m.recorder
}

// GetTradingAccountWithMarketingInfoByCustomerCodes mocks base method.
func (m *MockUserSrvV2Service) GetTradingAccountWithMarketingInfoByCustomerCodes(ctx context.Context, customerCodes []string) ([]dto.TradingAccountsMarketingInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradingAccountWithMarketingInfoByCustomerCodes", ctx, customerCodes)
	ret0, _ := ret[0].([]dto.TradingAccountsMarketingInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradingAccountWithMarketingInfoByCustomerCodes indicates an expected call of GetTradingAccountWithMarketingInfoByCustomerCodes.
func (mr *MockUserSrvV2ServiceMockRecorder) GetTradingAccountWithMarketingInfoByCustomerCodes(ctx, customerCodes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradingAccountWithMarketingInfoByCustomerCodes", reflect.TypeOf((*MockUserSrvV2Service)(nil).GetTradingAccountWithMarketingInfoByCustomerCodes), ctx, customerCodes)
}

// GetUserInfoByCustomerCode mocks base method.
func (m *MockUserSrvV2Service) GetUserInfoByCustomerCode(ctx context.Context, customerCode string) ([]dto.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoByCustomerCode", ctx, customerCode)
	ret0, _ := ret[0].([]dto.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoByCustomerCode indicates an expected call of GetUserInfoByCustomerCode.
func (mr *MockUserSrvV2ServiceMockRecorder) GetUserInfoByCustomerCode(ctx, customerCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoByCustomerCode", reflect.TypeOf((*MockUserSrvV2Service)(nil).GetUserInfoByCustomerCode), ctx, customerCode)
}

// MockEmployeeService is a mock of EmployeeService interface.
type MockEmployeeService struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeServiceMockRecorder
	isgomock struct{}
}

// MockEmployeeServiceMockRecorder is the mock recorder for MockEmployeeService.
type MockEmployeeServiceMockRecorder struct {
	mock *MockEmployeeService
}

// NewMockEmployeeService creates a new mock instance.
func NewMockEmployeeService(ctrl *gomock.Controller) *MockEmployeeService {
	mock := &MockEmployeeService{ctrl: ctrl}
	mock.recorder = &MockEmployeeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeService) EXPECT() *MockEmployeeServiceMockRecorder {
	return m.recorder
}

// GetEmployeeInfoById mocks base method.
func (m *MockEmployeeService) GetEmployeeInfoById(ctx context.Context, employeeId string) (*dto.EmployeeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeInfoById", ctx, employeeId)
	ret0, _ := ret[0].(*dto.EmployeeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeInfoById indicates an expected call of GetEmployeeInfoById.
func (mr *MockEmployeeServiceMockRecorder) GetEmployeeInfoById(ctx, employeeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeInfoById", reflect.TypeOf((*MockEmployeeService)(nil).GetEmployeeInfoById), ctx, employeeId)
}

// MockNotificationService is a mock of NotificationService interface.
type MockNotificationService struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationServiceMockRecorder
	isgomock struct{}
}

// MockNotificationServiceMockRecorder is the mock recorder for MockNotificationService.
type MockNotificationServiceMockRecorder struct {
	mock *MockNotificationService
}

// NewMockNotificationService creates a new mock instance.
func NewMockNotificationService(ctrl *gomock.Controller) *MockNotificationService {
	mock := &MockNotificationService{ctrl: ctrl}
	mock.recorder = &MockNotificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationService) EXPECT() *MockNotificationServiceMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockNotificationService) SendEmail(ctx context.Context, emailData dto.SendEmailRequestData) (*dto.NotificationTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, emailData)
	ret0, _ := ret[0].(*dto.NotificationTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockNotificationServiceMockRecorder) SendEmail(ctx, emailData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockNotificationService)(nil).SendEmail), ctx, emailData)
}
