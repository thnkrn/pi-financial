// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/core/port/client.go
//
// Generated by this command:
//
//	mockgen -source ./internal/core/port/client.go -package mockclient
//

// Package mockclient is a generated GoMock package.
package mockclient

import (
	context "context"
	reflect "reflect"

	go_client "github.com/pi-financial/employee-srv/go-client"
	go_client0 "github.com/pi-financial/notification-srv/go-client"
	client "github.com/pi-financial/user-srv-v2/client"
	gomock "go.uber.org/mock/gomock"
)

// MockUserSrvV2Client is a mock of UserSrvV2Client interface.
type MockUserSrvV2Client struct {
	ctrl     *gomock.Controller
	recorder *MockUserSrvV2ClientMockRecorder
	isgomock struct{}
}

// MockUserSrvV2ClientMockRecorder is the mock recorder for MockUserSrvV2Client.
type MockUserSrvV2ClientMockRecorder struct {
	mock *MockUserSrvV2Client
}

// NewMockUserSrvV2Client creates a new mock instance.
func NewMockUserSrvV2Client(ctrl *gomock.Controller) *MockUserSrvV2Client {
	mock := &MockUserSrvV2Client{ctrl: ctrl}
	mock.recorder = &MockUserSrvV2ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSrvV2Client) EXPECT() *MockUserSrvV2ClientMockRecorder {
	return m.recorder
}

// GetTradingAccountWithMarketingInfoByCustomerCodes mocks base method.
func (m *MockUserSrvV2Client) GetTradingAccountWithMarketingInfoByCustomerCodes(ctx context.Context, customerCodes []string) ([]client.DtoTradingAccountsMarketingInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradingAccountWithMarketingInfoByCustomerCodes", ctx, customerCodes)
	ret0, _ := ret[0].([]client.DtoTradingAccountsMarketingInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradingAccountWithMarketingInfoByCustomerCodes indicates an expected call of GetTradingAccountWithMarketingInfoByCustomerCodes.
func (mr *MockUserSrvV2ClientMockRecorder) GetTradingAccountWithMarketingInfoByCustomerCodes(ctx, customerCodes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradingAccountWithMarketingInfoByCustomerCodes", reflect.TypeOf((*MockUserSrvV2Client)(nil).GetTradingAccountWithMarketingInfoByCustomerCodes), ctx, customerCodes)
}

// GetUserInfoByCustomerCode mocks base method.
func (m *MockUserSrvV2Client) GetUserInfoByCustomerCode(ctx context.Context, customerCode string) ([]client.DtoUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoByCustomerCode", ctx, customerCode)
	ret0, _ := ret[0].([]client.DtoUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoByCustomerCode indicates an expected call of GetUserInfoByCustomerCode.
func (mr *MockUserSrvV2ClientMockRecorder) GetUserInfoByCustomerCode(ctx, customerCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoByCustomerCode", reflect.TypeOf((*MockUserSrvV2Client)(nil).GetUserInfoByCustomerCode), ctx, customerCode)
}

// MockEmployeeClient is a mock of EmployeeClient interface.
type MockEmployeeClient struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeClientMockRecorder
	isgomock struct{}
}

// MockEmployeeClientMockRecorder is the mock recorder for MockEmployeeClient.
type MockEmployeeClientMockRecorder struct {
	mock *MockEmployeeClient
}

// NewMockEmployeeClient creates a new mock instance.
func NewMockEmployeeClient(ctrl *gomock.Controller) *MockEmployeeClient {
	mock := &MockEmployeeClient{ctrl: ctrl}
	mock.recorder = &MockEmployeeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeClient) EXPECT() *MockEmployeeClientMockRecorder {
	return m.recorder
}

// GetEmployeeInfoById mocks base method.
func (m *MockEmployeeClient) GetEmployeeInfoById(ctx context.Context, employeeId string) (*go_client.PiEmployeeServiceDomainAggregatesModelEmployeeInfoAggregateEmployeeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeInfoById", ctx, employeeId)
	ret0, _ := ret[0].(*go_client.PiEmployeeServiceDomainAggregatesModelEmployeeInfoAggregateEmployeeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeInfoById indicates an expected call of GetEmployeeInfoById.
func (mr *MockEmployeeClientMockRecorder) GetEmployeeInfoById(ctx, employeeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeInfoById", reflect.TypeOf((*MockEmployeeClient)(nil).GetEmployeeInfoById), ctx, employeeId)
}

// MockNotificationClient is a mock of NotificationClient interface.
type MockNotificationClient struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationClientMockRecorder
	isgomock struct{}
}

// MockNotificationClientMockRecorder is the mock recorder for MockNotificationClient.
type MockNotificationClientMockRecorder struct {
	mock *MockNotificationClient
}

// NewMockNotificationClient creates a new mock instance.
func NewMockNotificationClient(ctrl *gomock.Controller) *MockNotificationClient {
	mock := &MockNotificationClient{ctrl: ctrl}
	mock.recorder = &MockNotificationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationClient) EXPECT() *MockNotificationClientMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockNotificationClient) SendEmail(ctx context.Context, request go_client0.EmailRequestDto) (*go_client0.NotificationTicket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, request)
	ret0, _ := ret[0].(*go_client0.NotificationTicket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockNotificationClientMockRecorder) SendEmail(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockNotificationClient)(nil).SendEmail), ctx, request)
}
