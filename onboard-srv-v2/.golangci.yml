# From config file spec: https://golangci-lint.run/usage/configuration/#config-file
# See the dedicated "version" documentation section.
version: "2"

linters:
  # Default set of linters.
  # The value can be:
  # - `standard`: https://golangci-lint.run/usage/linters/#enabled-by-default
  # - `all`: enables all linters by default.
  # - `none`: disables all linters by default.
  # - `fast`: enables only linters considered as "fast" (`golangci-lint help linters --json | jq '[ .[] | select(.fast==true) ] | map(.name)'`).
  # Default: standard
  default: none
  # Enable specific linter.
  enable:
    - errcheck
    - govet
    - ineffassign
    - staticcheck
    - unused
  # All available settings of specific linters.
  # See the dedicated "linters.settings" documentation section: https://golangci-lint.run/usage/linters/
  settings:
    dupl:
      threshold: 100
    errcheck:
      check-type-assertions: true
    goconst:
      min-len: 2
      min-occurrences: 3
    # Provides diagnostics that check for bugs, performance and style issues.
    gocritic:
      enabled-tags:
        - diagnostic
        - experimental
        - opinionated
        - performance
        - style
    nolintlint:
      require-explanation: true
      require-specific: true
    # Vet examines Go source code and reports suspicious constructs. It is roughly the same as 'go vet' and uses its passes
    govet:
      # Disable all analyzers.
      disable-all: true
      # Enable analyzers by name.
      # (In addition to default:
      #   appends, asmdecl, assign, atomic, bools, buildtag, cgocall, composites, copylocks, defers, directive, errorsas,
      #   framepointer, httpresponse, ifaceassert, loopclosure, lostcancel, nilfunc, printf, shift, sigchanyzer, slog,
      #   stdmethods, stringintconv, structtag, testinggoroutine, tests, timeformat, unmarshal, unreachable, unsafeptr,
      #   unusedresult
      # ).
      # Run `GL_DEBUG=govet golangci-lint run --enable=govet` to see default, all available analyzers, and enabled analyzers.
      # Default: []
      enable:
        # Check for possible unintended shadowing of variables.
        - shadow
      # Settings per analyzer.
      settings:
        shadow:
            # Whether to be strict about shadowing; can be noisy.
            strict: false
  # Defines a set of rules to ignore issues.
  # It does not skip the analysis, and so does not ignore "typecheck" errors.
  exclusions:
    # Mode of the generated files analysis.
    #
    # - `strict`: sources are excluded by strictly following the Go generated file convention.
    #    Source files that have lines matching only the following regular expression will be excluded: `^// Code generated .* DO NOT EDIT\.$`
    #    This line must appear before the first non-comment, non-blank text in the file.
    #    https://go.dev/s/generatedcode
    # - `lax`: sources are excluded if they contain lines like `autogenerated file`, `code generated`, `do not edit`, etc.
    # - `disable`: disable the generated files exclusion.
    generated: strict
    # Which file paths to exclude: they will be analyzed, but issues from them won't be reported.
    # "/" will be replaced by the current OS file path separator to properly work on Windows.
    # Default: []
    paths:
      - ".*_test\\.go$"
    # Excluding configuration per-path, per-linter, per-text and per-source
    rules:
      # Don't report on shadowing `err`. Strictly avoiding shadowing `err` often
      # results in code that is not idomatic for little gain in clarity or correctness.
      - text: 'shadow: declaration of "err" shadows declaration at'
        linters:
          - govet


issues:
  # Maximum issues count per one linter.
  # Set to 0 to disable.
  max-issues-per-linter: 0
  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  max-same-issues: 0
  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing large codebase.
  # It's not practical to fix all existing issues at the moment of integration:
  # much better don't allow issues in new code.
  new: true

# Output configuration options.
output:
  # The formats used to render issues.
  formats:
    # Prints issues in a text format with colors, line number, and linter name.
    # This format is the default format.
    text:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      path: stdout
      # Print linter name in the end of issue text.
      print-linter-name: true
      # Print lines of code with issue.
      print-issued-lines: true
      # Use colors.
      colors: true

run:
  timeout: 5m
  issues-exit-code: 1
  tests: true
  go: "1.23"
  modules-download-mode: vendor
