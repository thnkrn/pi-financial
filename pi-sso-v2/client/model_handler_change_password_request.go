/*
Pi SSO V2

Contain Generic Information.

API version: 2.0
Contact: pongtorn.po@pi.financial
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the HandlerChangePasswordRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandlerChangePasswordRequest{}

// HandlerChangePasswordRequest struct for HandlerChangePasswordRequest
type HandlerChangePasswordRequest struct {
	EncryptNewPassword string `json:"encrypt_new_password"`
	EncryptOldPassword string `json:"encrypt_old_password"`
	Username           string `json:"username"`
}

type _HandlerChangePasswordRequest HandlerChangePasswordRequest

// NewHandlerChangePasswordRequest instantiates a new HandlerChangePasswordRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandlerChangePasswordRequest(encryptNewPassword string, encryptOldPassword string, username string) *HandlerChangePasswordRequest {
	this := HandlerChangePasswordRequest{}
	this.EncryptNewPassword = encryptNewPassword
	this.EncryptOldPassword = encryptOldPassword
	this.Username = username
	return &this
}

// NewHandlerChangePasswordRequestWithDefaults instantiates a new HandlerChangePasswordRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandlerChangePasswordRequestWithDefaults() *HandlerChangePasswordRequest {
	this := HandlerChangePasswordRequest{}
	return &this
}

// GetEncryptNewPassword returns the EncryptNewPassword field value
func (o *HandlerChangePasswordRequest) GetEncryptNewPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EncryptNewPassword
}

// GetEncryptNewPasswordOk returns a tuple with the EncryptNewPassword field value
// and a boolean to check if the value has been set.
func (o *HandlerChangePasswordRequest) GetEncryptNewPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EncryptNewPassword, true
}

// SetEncryptNewPassword sets field value
func (o *HandlerChangePasswordRequest) SetEncryptNewPassword(v string) {
	o.EncryptNewPassword = v
}

// GetEncryptOldPassword returns the EncryptOldPassword field value
func (o *HandlerChangePasswordRequest) GetEncryptOldPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EncryptOldPassword
}

// GetEncryptOldPasswordOk returns a tuple with the EncryptOldPassword field value
// and a boolean to check if the value has been set.
func (o *HandlerChangePasswordRequest) GetEncryptOldPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EncryptOldPassword, true
}

// SetEncryptOldPassword sets field value
func (o *HandlerChangePasswordRequest) SetEncryptOldPassword(v string) {
	o.EncryptOldPassword = v
}

// GetUsername returns the Username field value
func (o *HandlerChangePasswordRequest) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *HandlerChangePasswordRequest) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *HandlerChangePasswordRequest) SetUsername(v string) {
	o.Username = v
}

func (o HandlerChangePasswordRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HandlerChangePasswordRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["encrypt_new_password"] = o.EncryptNewPassword
	toSerialize["encrypt_old_password"] = o.EncryptOldPassword
	toSerialize["username"] = o.Username
	return toSerialize, nil
}

func (o *HandlerChangePasswordRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"encrypt_new_password",
		"encrypt_old_password",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHandlerChangePasswordRequest := _HandlerChangePasswordRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHandlerChangePasswordRequest)

	if err != nil {
		return err
	}

	*o = HandlerChangePasswordRequest(varHandlerChangePasswordRequest)

	return err
}

type NullableHandlerChangePasswordRequest struct {
	value *HandlerChangePasswordRequest
	isSet bool
}

func (v NullableHandlerChangePasswordRequest) Get() *HandlerChangePasswordRequest {
	return v.value
}

func (v *NullableHandlerChangePasswordRequest) Set(val *HandlerChangePasswordRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHandlerChangePasswordRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHandlerChangePasswordRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandlerChangePasswordRequest(val *HandlerChangePasswordRequest) *NullableHandlerChangePasswordRequest {
	return &NullableHandlerChangePasswordRequest{value: val, isSet: true}
}

func (v NullableHandlerChangePasswordRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandlerChangePasswordRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
