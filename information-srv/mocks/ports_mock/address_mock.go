// Code generated by MockGen. DO NOT EDIT.
// Source: address.go
//
// Generated by this command:
//
//	mockgen -package mocks -source=address.go -destination=../../../mocks/ports_mock/address_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	address "github.com/pi-financial/information-srv/internal/core/domain/address"
	gomock "go.uber.org/mock/gomock"
)

// MockAddressRepository is a mock of AddressRepository interface.
type MockAddressRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAddressRepositoryMockRecorder
	isgomock struct{}
}

// MockAddressRepositoryMockRecorder is the mock recorder for MockAddressRepository.
type MockAddressRepositoryMockRecorder struct {
	mock *MockAddressRepository
}

// NewMockAddressRepository creates a new mock instance.
func NewMockAddressRepository(ctrl *gomock.Controller) *MockAddressRepository {
	mock := &MockAddressRepository{ctrl: ctrl}
	mock.recorder = &MockAddressRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressRepository) EXPECT() *MockAddressRepositoryMockRecorder {
	return m.recorder
}

// GetAddresses mocks base method.
func (m *MockAddressRepository) GetAddresses(ctx context.Context) ([]address.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddresses", ctx)
	ret0, _ := ret[0].([]address.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddresses indicates an expected call of GetAddresses.
func (mr *MockAddressRepositoryMockRecorder) GetAddresses(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddresses", reflect.TypeOf((*MockAddressRepository)(nil).GetAddresses), ctx)
}

// GetAddressesByProvince mocks base method.
func (m *MockAddressRepository) GetAddressesByProvince(ctx context.Context, province, lang string) ([]address.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressesByProvince", ctx, province, lang)
	ret0, _ := ret[0].([]address.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressesByProvince indicates an expected call of GetAddressesByProvince.
func (mr *MockAddressRepositoryMockRecorder) GetAddressesByProvince(ctx, province, lang any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressesByProvince", reflect.TypeOf((*MockAddressRepository)(nil).GetAddressesByProvince), ctx, province, lang)
}

// GetAddressesByZipCode mocks base method.
func (m *MockAddressRepository) GetAddressesByZipCode(ctx context.Context, zipCode int) ([]address.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressesByZipCode", ctx, zipCode)
	ret0, _ := ret[0].([]address.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressesByZipCode indicates an expected call of GetAddressesByZipCode.
func (mr *MockAddressRepositoryMockRecorder) GetAddressesByZipCode(ctx, zipCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressesByZipCode", reflect.TypeOf((*MockAddressRepository)(nil).GetAddressesByZipCode), ctx, zipCode)
}

// GetProvinces mocks base method.
func (m *MockAddressRepository) GetProvinces(ctx context.Context) ([]address.Province, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvinces", ctx)
	ret0, _ := ret[0].([]address.Province)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProvinces indicates an expected call of GetProvinces.
func (mr *MockAddressRepositoryMockRecorder) GetProvinces(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvinces", reflect.TypeOf((*MockAddressRepository)(nil).GetProvinces), ctx)
}

// MockAddressService is a mock of AddressService interface.
type MockAddressService struct {
	ctrl     *gomock.Controller
	recorder *MockAddressServiceMockRecorder
	isgomock struct{}
}

// MockAddressServiceMockRecorder is the mock recorder for MockAddressService.
type MockAddressServiceMockRecorder struct {
	mock *MockAddressService
}

// NewMockAddressService creates a new mock instance.
func NewMockAddressService(ctrl *gomock.Controller) *MockAddressService {
	mock := &MockAddressService{ctrl: ctrl}
	mock.recorder = &MockAddressServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressService) EXPECT() *MockAddressServiceMockRecorder {
	return m.recorder
}

// GetAddresses mocks base method.
func (m *MockAddressService) GetAddresses(ctx context.Context) ([]address.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddresses", ctx)
	ret0, _ := ret[0].([]address.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddresses indicates an expected call of GetAddresses.
func (mr *MockAddressServiceMockRecorder) GetAddresses(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddresses", reflect.TypeOf((*MockAddressService)(nil).GetAddresses), ctx)
}

// GetAddressesByProvince mocks base method.
func (m *MockAddressService) GetAddressesByProvince(ctx context.Context, province, lang string) ([]address.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressesByProvince", ctx, province, lang)
	ret0, _ := ret[0].([]address.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressesByProvince indicates an expected call of GetAddressesByProvince.
func (mr *MockAddressServiceMockRecorder) GetAddressesByProvince(ctx, province, lang any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressesByProvince", reflect.TypeOf((*MockAddressService)(nil).GetAddressesByProvince), ctx, province, lang)
}

// GetAddressesByZipCode mocks base method.
func (m *MockAddressService) GetAddressesByZipCode(ctx context.Context, zipCode int) ([]address.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressesByZipCode", ctx, zipCode)
	ret0, _ := ret[0].([]address.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressesByZipCode indicates an expected call of GetAddressesByZipCode.
func (mr *MockAddressServiceMockRecorder) GetAddressesByZipCode(ctx, zipCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressesByZipCode", reflect.TypeOf((*MockAddressService)(nil).GetAddressesByZipCode), ctx, zipCode)
}

// GetProvinces mocks base method.
func (m *MockAddressService) GetProvinces(ctx context.Context) ([]address.Province, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvinces", ctx)
	ret0, _ := ret[0].([]address.Province)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProvinces indicates an expected call of GetProvinces.
func (mr *MockAddressServiceMockRecorder) GetProvinces(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvinces", reflect.TypeOf((*MockAddressService)(nil).GetProvinces), ctx)
}
