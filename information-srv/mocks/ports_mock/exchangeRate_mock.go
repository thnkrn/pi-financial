// Code generated by MockGen. DO NOT EDIT.
// Source: exchangeRate.go
//
// Generated by this command:
//
//	mockgen -package mocks -source=exchangeRate.go -destination=../../../mocks/ports_mock/exchangeRate_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	exchangeRate "github.com/pi-financial/information-srv/internal/core/domain/exchangeRate"
	gomock "go.uber.org/mock/gomock"
)

// MockExchangeRateRepository is a mock of ExchangeRateRepository interface.
type MockExchangeRateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeRateRepositoryMockRecorder
	isgomock struct{}
}

// MockExchangeRateRepositoryMockRecorder is the mock recorder for MockExchangeRateRepository.
type MockExchangeRateRepositoryMockRecorder struct {
	mock *MockExchangeRateRepository
}

// NewMockExchangeRateRepository creates a new mock instance.
func NewMockExchangeRateRepository(ctrl *gomock.Controller) *MockExchangeRateRepository {
	mock := &MockExchangeRateRepository{ctrl: ctrl}
	mock.recorder = &MockExchangeRateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeRateRepository) EXPECT() *MockExchangeRateRepositoryMockRecorder {
	return m.recorder
}

// GetExchangeRate mocks base method.
func (m *MockExchangeRateRepository) GetExchangeRate(ctx context.Context, currency string, from, to time.Time) ([]exchangeRate.ExchangeRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRate", ctx, currency, from, to)
	ret0, _ := ret[0].([]exchangeRate.ExchangeRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRate indicates an expected call of GetExchangeRate.
func (mr *MockExchangeRateRepositoryMockRecorder) GetExchangeRate(ctx, currency, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRate", reflect.TypeOf((*MockExchangeRateRepository)(nil).GetExchangeRate), ctx, currency, from, to)
}

// GetReferenceRate mocks base method.
func (m *MockExchangeRateRepository) GetReferenceRate(ctx context.Context, from, to time.Time) ([]exchangeRate.ReferenceRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferenceRate", ctx, from, to)
	ret0, _ := ret[0].([]exchangeRate.ReferenceRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferenceRate indicates an expected call of GetReferenceRate.
func (mr *MockExchangeRateRepositoryMockRecorder) GetReferenceRate(ctx, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferenceRate", reflect.TypeOf((*MockExchangeRateRepository)(nil).GetReferenceRate), ctx, from, to)
}

// MockExchangeRateService is a mock of ExchangeRateService interface.
type MockExchangeRateService struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeRateServiceMockRecorder
	isgomock struct{}
}

// MockExchangeRateServiceMockRecorder is the mock recorder for MockExchangeRateService.
type MockExchangeRateServiceMockRecorder struct {
	mock *MockExchangeRateService
}

// NewMockExchangeRateService creates a new mock instance.
func NewMockExchangeRateService(ctrl *gomock.Controller) *MockExchangeRateService {
	mock := &MockExchangeRateService{ctrl: ctrl}
	mock.recorder = &MockExchangeRateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeRateService) EXPECT() *MockExchangeRateServiceMockRecorder {
	return m.recorder
}

// GetExchangeRate mocks base method.
func (m *MockExchangeRateService) GetExchangeRate(ctx context.Context, currency string, from, to time.Time) ([]exchangeRate.ExchangeRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeRate", ctx, currency, from, to)
	ret0, _ := ret[0].([]exchangeRate.ExchangeRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeRate indicates an expected call of GetExchangeRate.
func (mr *MockExchangeRateServiceMockRecorder) GetExchangeRate(ctx, currency, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeRate", reflect.TypeOf((*MockExchangeRateService)(nil).GetExchangeRate), ctx, currency, from, to)
}
