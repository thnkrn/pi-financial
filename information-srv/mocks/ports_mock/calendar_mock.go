// Code generated by MockGen. DO NOT EDIT.
// Source: calendar.go
//
// Generated by this command:
//
//	mockgen -package mocks -source=calendar.go -destination=../../../mocks/ports_mock/calendar_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	calendar "github.com/pi-financial/information-srv/internal/core/domain/calendar"
	gomock "go.uber.org/mock/gomock"
)

// MockCalendarRepository is a mock of CalendarRepository interface.
type MockCalendarRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCalendarRepositoryMockRecorder
	isgomock struct{}
}

// MockCalendarRepositoryMockRecorder is the mock recorder for MockCalendarRepository.
type MockCalendarRepositoryMockRecorder struct {
	mock *MockCalendarRepository
}

// NewMockCalendarRepository creates a new mock instance.
func NewMockCalendarRepository(ctrl *gomock.Controller) *MockCalendarRepository {
	mock := &MockCalendarRepository{ctrl: ctrl}
	mock.recorder = &MockCalendarRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalendarRepository) EXPECT() *MockCalendarRepositoryMockRecorder {
	return m.recorder
}

// GetHolidays mocks base method.
func (m *MockCalendarRepository) GetHolidays(ctx context.Context, year int) ([]calendar.Holiday, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHolidays", ctx, year)
	ret0, _ := ret[0].([]calendar.Holiday)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHolidays indicates an expected call of GetHolidays.
func (mr *MockCalendarRepositoryMockRecorder) GetHolidays(ctx, year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHolidays", reflect.TypeOf((*MockCalendarRepository)(nil).GetHolidays), ctx, year)
}

// MockCalendarService is a mock of CalendarService interface.
type MockCalendarService struct {
	ctrl     *gomock.Controller
	recorder *MockCalendarServiceMockRecorder
	isgomock struct{}
}

// MockCalendarServiceMockRecorder is the mock recorder for MockCalendarService.
type MockCalendarServiceMockRecorder struct {
	mock *MockCalendarService
}

// NewMockCalendarService creates a new mock instance.
func NewMockCalendarService(ctrl *gomock.Controller) *MockCalendarService {
	mock := &MockCalendarService{ctrl: ctrl}
	mock.recorder = &MockCalendarServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalendarService) EXPECT() *MockCalendarServiceMockRecorder {
	return m.recorder
}

// GetHolidays mocks base method.
func (m *MockCalendarService) GetHolidays(ctx context.Context, year int) ([]calendar.Holiday, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHolidays", ctx, year)
	ret0, _ := ret[0].([]calendar.Holiday)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHolidays indicates an expected call of GetHolidays.
func (mr *MockCalendarServiceMockRecorder) GetHolidays(ctx, year any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHolidays", reflect.TypeOf((*MockCalendarService)(nil).GetHolidays), ctx, year)
}

// GetNextBusinessDay mocks base method.
func (m *MockCalendarService) GetNextBusinessDay(ctx context.Context, date time.Time) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextBusinessDay", ctx, date)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextBusinessDay indicates an expected call of GetNextBusinessDay.
func (mr *MockCalendarServiceMockRecorder) GetNextBusinessDay(ctx, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextBusinessDay", reflect.TypeOf((*MockCalendarService)(nil).GetNextBusinessDay), ctx, date)
}

// IsHoliday mocks base method.
func (m *MockCalendarService) IsHoliday(ctx context.Context, date time.Time) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsHoliday", ctx, date)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsHoliday indicates an expected call of IsHoliday.
func (mr *MockCalendarServiceMockRecorder) IsHoliday(ctx, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsHoliday", reflect.TypeOf((*MockCalendarService)(nil).IsHoliday), ctx, date)
}
