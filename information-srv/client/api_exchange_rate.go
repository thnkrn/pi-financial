/*
Information API

Contain Generic Information.

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// ExchangeRateAPIService ExchangeRateAPI service
type ExchangeRateAPIService service

type ApiInternalExchangeRateGetRequest struct {
	ctx        context.Context
	ApiService *ExchangeRateAPIService
	from       *string
	to         *string
	fromCur    *string
	toCur      *string
}

// Start date to retrieve the exchange rate (format: YYYY-MM-DD).
func (r ApiInternalExchangeRateGetRequest) From(from string) ApiInternalExchangeRateGetRequest {
	r.from = &from
	return r
}

// End date to retrieve the exchange rate (format: YYYY-MM-DD).
func (r ApiInternalExchangeRateGetRequest) To(to string) ApiInternalExchangeRateGetRequest {
	r.to = &to
	return r
}

// Source currency code
func (r ApiInternalExchangeRateGetRequest) FromCur(fromCur string) ApiInternalExchangeRateGetRequest {
	r.fromCur = &fromCur
	return r
}

// Destination currency code
func (r ApiInternalExchangeRateGetRequest) ToCur(toCur string) ApiInternalExchangeRateGetRequest {
	r.toCur = &toCur
	return r
}

func (r ApiInternalExchangeRateGetRequest) Execute() (*InternalExchangeRateGet200Response, *http.Response, error) {
	return r.ApiService.InternalExchangeRateGetExecute(r)
}

/*
InternalExchangeRateGet Get Exchange Rates

Retrieve the exchange rate for a specified date.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalExchangeRateGetRequest
*/
func (a *ExchangeRateAPIService) InternalExchangeRateGet(ctx context.Context) ApiInternalExchangeRateGetRequest {
	return ApiInternalExchangeRateGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return InternalExchangeRateGet200Response
func (a *ExchangeRateAPIService) InternalExchangeRateGetExecute(r ApiInternalExchangeRateGetRequest) (*InternalExchangeRateGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InternalExchangeRateGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExchangeRateAPIService.InternalExchangeRateGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/exchange-rate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.from == nil {
		return localVarReturnValue, nil, reportError("from is required and must be specified")
	}
	if r.to == nil {
		return localVarReturnValue, nil, reportError("to is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "to", r.to, "")
	if r.fromCur != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromCur", r.fromCur, "")
	}
	if r.toCur != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toCur", r.toCur, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v PkgResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v PkgResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSecureExchangeRateGetRequest struct {
	ctx        context.Context
	ApiService *ExchangeRateAPIService
	from       *string
	to         *string
	fromCur    *string
	toCur      *string
}

// Start date to retrieve the exchange rate (format: YYYY-MM-DD).
func (r ApiSecureExchangeRateGetRequest) From(from string) ApiSecureExchangeRateGetRequest {
	r.from = &from
	return r
}

// End date to retrieve the exchange rate (format: YYYY-MM-DD).
func (r ApiSecureExchangeRateGetRequest) To(to string) ApiSecureExchangeRateGetRequest {
	r.to = &to
	return r
}

// Source currency code
func (r ApiSecureExchangeRateGetRequest) FromCur(fromCur string) ApiSecureExchangeRateGetRequest {
	r.fromCur = &fromCur
	return r
}

// Destination currency code
func (r ApiSecureExchangeRateGetRequest) ToCur(toCur string) ApiSecureExchangeRateGetRequest {
	r.toCur = &toCur
	return r
}

func (r ApiSecureExchangeRateGetRequest) Execute() (*InternalExchangeRateGet200Response, *http.Response, error) {
	return r.ApiService.SecureExchangeRateGetExecute(r)
}

/*
SecureExchangeRateGet Get Exchange Rates

Retrieve the exchange rate for a specified date.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSecureExchangeRateGetRequest
*/
func (a *ExchangeRateAPIService) SecureExchangeRateGet(ctx context.Context) ApiSecureExchangeRateGetRequest {
	return ApiSecureExchangeRateGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return InternalExchangeRateGet200Response
func (a *ExchangeRateAPIService) SecureExchangeRateGetExecute(r ApiSecureExchangeRateGetRequest) (*InternalExchangeRateGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InternalExchangeRateGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExchangeRateAPIService.SecureExchangeRateGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/secure/exchange-rate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.from == nil {
		return localVarReturnValue, nil, reportError("from is required and must be specified")
	}
	if r.to == nil {
		return localVarReturnValue, nil, reportError("to is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "to", r.to, "")
	if r.fromCur != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromCur", r.fromCur, "")
	}
	if r.toCur != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toCur", r.toCur, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v PkgResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v PkgResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
