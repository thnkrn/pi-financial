/*
Information API

Testing CalendarAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	"testing"

	openapiclient "github.com/pi-financial/information-srv/client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_client_CalendarAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CalendarAPIService InternalCalendarHolidaysGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CalendarAPI.InternalCalendarHolidaysGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CalendarAPIService InternalCalendarHolidaysYearGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var year int32

		resp, httpRes, err := apiClient.CalendarAPI.InternalCalendarHolidaysYearGet(context.Background(), year).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CalendarAPIService InternalCalendarIsHolidayDateGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var date string

		resp, httpRes, err := apiClient.CalendarAPI.InternalCalendarIsHolidayDateGet(context.Background(), date).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CalendarAPIService InternalCalendarNextBusinessDayDateGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var date string

		resp, httpRes, err := apiClient.CalendarAPI.InternalCalendarNextBusinessDayDateGet(context.Background(), date).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CalendarAPIService SecureCalendarHolidaysGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CalendarAPI.SecureCalendarHolidaysGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CalendarAPIService SecureCalendarHolidaysYearGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var year int32

		resp, httpRes, err := apiClient.CalendarAPI.SecureCalendarHolidaysYearGet(context.Background(), year).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CalendarAPIService SecureCalendarIsHolidayDateGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var date string

		resp, httpRes, err := apiClient.CalendarAPI.SecureCalendarIsHolidayDateGet(context.Background(), date).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CalendarAPIService SecureCalendarNextBusinessDayDateGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var date string

		resp, httpRes, err := apiClient.CalendarAPI.SecureCalendarNextBusinessDayDateGet(context.Background(), date).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
