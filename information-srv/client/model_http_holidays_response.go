/*
Information API

Contain Generic Information.

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the HttpHolidaysResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HttpHolidaysResponse{}

// HttpHolidaysResponse struct for HttpHolidaysResponse
type HttpHolidaysResponse struct {
	Date *string `json:"date,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewHttpHolidaysResponse instantiates a new HttpHolidaysResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpHolidaysResponse() *HttpHolidaysResponse {
	this := HttpHolidaysResponse{}
	return &this
}

// NewHttpHolidaysResponseWithDefaults instantiates a new HttpHolidaysResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpHolidaysResponseWithDefaults() *HttpHolidaysResponse {
	this := HttpHolidaysResponse{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *HttpHolidaysResponse) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpHolidaysResponse) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *HttpHolidaysResponse) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *HttpHolidaysResponse) SetDate(v string) {
	o.Date = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HttpHolidaysResponse) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpHolidaysResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HttpHolidaysResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HttpHolidaysResponse) SetName(v string) {
	o.Name = &v
}

func (o HttpHolidaysResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpHolidaysResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableHttpHolidaysResponse struct {
	value *HttpHolidaysResponse
	isSet bool
}

func (v NullableHttpHolidaysResponse) Get() *HttpHolidaysResponse {
	return v.value
}

func (v *NullableHttpHolidaysResponse) Set(val *HttpHolidaysResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpHolidaysResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpHolidaysResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpHolidaysResponse(val *HttpHolidaysResponse) *NullableHttpHolidaysResponse {
	return &NullableHttpHolidaysResponse{value: val, isSet: true}
}

func (v NullableHttpHolidaysResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpHolidaysResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
