/*
Information API

Contain Generic Information.

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// ProductAPIService ProductAPI service
type ProductAPIService service

type ApiInternalProductGetRequest struct {
	ctx              context.Context
	ApiService       *ProductAPIService
	id               *string
	name             *string
	accountTypeCode  *string
	accountType      *string
	exchangeMarketId *string
	suffix           *string
	transactionType  *string
}

// Id
func (r ApiInternalProductGetRequest) Id(id string) ApiInternalProductGetRequest {
	r.id = &id
	return r
}

// Name
func (r ApiInternalProductGetRequest) Name(name string) ApiInternalProductGetRequest {
	r.name = &name
	return r
}

// AccountTypeCode
func (r ApiInternalProductGetRequest) AccountTypeCode(accountTypeCode string) ApiInternalProductGetRequest {
	r.accountTypeCode = &accountTypeCode
	return r
}

// AccountType
func (r ApiInternalProductGetRequest) AccountType(accountType string) ApiInternalProductGetRequest {
	r.accountType = &accountType
	return r
}

// ExchangeMarketId
func (r ApiInternalProductGetRequest) ExchangeMarketId(exchangeMarketId string) ApiInternalProductGetRequest {
	r.exchangeMarketId = &exchangeMarketId
	return r
}

// Suffix
func (r ApiInternalProductGetRequest) Suffix(suffix string) ApiInternalProductGetRequest {
	r.suffix = &suffix
	return r
}

// TransactionType
func (r ApiInternalProductGetRequest) TransactionType(transactionType string) ApiInternalProductGetRequest {
	r.transactionType = &transactionType
	return r
}

func (r ApiInternalProductGetRequest) Execute() (*InternalProductGet200Response, *http.Response, error) {
	return r.ApiService.InternalProductGetExecute(r)
}

/*
InternalProductGet Get All Products

Retrieve a complete list of all products.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalProductGetRequest
*/
func (a *ProductAPIService) InternalProductGet(ctx context.Context) ApiInternalProductGetRequest {
	return ApiInternalProductGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return InternalProductGet200Response
func (a *ProductAPIService) InternalProductGetExecute(r ApiInternalProductGetRequest) (*InternalProductGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InternalProductGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductAPIService.InternalProductGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/product"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.accountTypeCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountTypeCode", r.accountTypeCode, "")
	}
	if r.accountType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountType", r.accountType, "")
	}
	if r.exchangeMarketId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exchangeMarketId", r.exchangeMarketId, "")
	}
	if r.suffix != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "suffix", r.suffix, "")
	}
	if r.transactionType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transactionType", r.transactionType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v PkgResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v PkgResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSecureProductGetRequest struct {
	ctx              context.Context
	ApiService       *ProductAPIService
	id               *string
	name             *string
	accountTypeCode  *string
	accountType      *string
	exchangeMarketId *string
	suffix           *string
	transactionType  *string
}

// Id
func (r ApiSecureProductGetRequest) Id(id string) ApiSecureProductGetRequest {
	r.id = &id
	return r
}

// Name
func (r ApiSecureProductGetRequest) Name(name string) ApiSecureProductGetRequest {
	r.name = &name
	return r
}

// AccountTypeCode
func (r ApiSecureProductGetRequest) AccountTypeCode(accountTypeCode string) ApiSecureProductGetRequest {
	r.accountTypeCode = &accountTypeCode
	return r
}

// AccountType
func (r ApiSecureProductGetRequest) AccountType(accountType string) ApiSecureProductGetRequest {
	r.accountType = &accountType
	return r
}

// ExchangeMarketId
func (r ApiSecureProductGetRequest) ExchangeMarketId(exchangeMarketId string) ApiSecureProductGetRequest {
	r.exchangeMarketId = &exchangeMarketId
	return r
}

// Suffix
func (r ApiSecureProductGetRequest) Suffix(suffix string) ApiSecureProductGetRequest {
	r.suffix = &suffix
	return r
}

// TransactionType
func (r ApiSecureProductGetRequest) TransactionType(transactionType string) ApiSecureProductGetRequest {
	r.transactionType = &transactionType
	return r
}

func (r ApiSecureProductGetRequest) Execute() (*InternalProductGet200Response, *http.Response, error) {
	return r.ApiService.SecureProductGetExecute(r)
}

/*
SecureProductGet Get All Products

Retrieve a complete list of all products.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSecureProductGetRequest
*/
func (a *ProductAPIService) SecureProductGet(ctx context.Context) ApiSecureProductGetRequest {
	return ApiSecureProductGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return InternalProductGet200Response
func (a *ProductAPIService) SecureProductGetExecute(r ApiSecureProductGetRequest) (*InternalProductGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InternalProductGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductAPIService.SecureProductGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/secure/product"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.accountTypeCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountTypeCode", r.accountTypeCode, "")
	}
	if r.accountType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "accountType", r.accountType, "")
	}
	if r.exchangeMarketId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exchangeMarketId", r.exchangeMarketId, "")
	}
	if r.suffix != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "suffix", r.suffix, "")
	}
	if r.transactionType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "transactionType", r.transactionType, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v PkgResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v PkgResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
