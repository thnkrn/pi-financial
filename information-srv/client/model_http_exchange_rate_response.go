/*
Information API

Contain Generic Information.

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the HttpExchangeRateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HttpExchangeRateResponse{}

// HttpExchangeRateResponse struct for HttpExchangeRateResponse
type HttpExchangeRateResponse struct {
	BuyingSight    *float32 `json:"buying_sight,omitempty"`
	BuyingTransfer *float32 `json:"buying_transfer,omitempty"`
	Date           *string  `json:"date,omitempty"`
	MidRate        *float32 `json:"mid_rate,omitempty"`
	Selling        *float32 `json:"selling,omitempty"`
}

// NewHttpExchangeRateResponse instantiates a new HttpExchangeRateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpExchangeRateResponse() *HttpExchangeRateResponse {
	this := HttpExchangeRateResponse{}
	return &this
}

// NewHttpExchangeRateResponseWithDefaults instantiates a new HttpExchangeRateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpExchangeRateResponseWithDefaults() *HttpExchangeRateResponse {
	this := HttpExchangeRateResponse{}
	return &this
}

// GetBuyingSight returns the BuyingSight field value if set, zero value otherwise.
func (o *HttpExchangeRateResponse) GetBuyingSight() float32 {
	if o == nil || IsNil(o.BuyingSight) {
		var ret float32
		return ret
	}
	return *o.BuyingSight
}

// GetBuyingSightOk returns a tuple with the BuyingSight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpExchangeRateResponse) GetBuyingSightOk() (*float32, bool) {
	if o == nil || IsNil(o.BuyingSight) {
		return nil, false
	}
	return o.BuyingSight, true
}

// HasBuyingSight returns a boolean if a field has been set.
func (o *HttpExchangeRateResponse) HasBuyingSight() bool {
	if o != nil && !IsNil(o.BuyingSight) {
		return true
	}

	return false
}

// SetBuyingSight gets a reference to the given float32 and assigns it to the BuyingSight field.
func (o *HttpExchangeRateResponse) SetBuyingSight(v float32) {
	o.BuyingSight = &v
}

// GetBuyingTransfer returns the BuyingTransfer field value if set, zero value otherwise.
func (o *HttpExchangeRateResponse) GetBuyingTransfer() float32 {
	if o == nil || IsNil(o.BuyingTransfer) {
		var ret float32
		return ret
	}
	return *o.BuyingTransfer
}

// GetBuyingTransferOk returns a tuple with the BuyingTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpExchangeRateResponse) GetBuyingTransferOk() (*float32, bool) {
	if o == nil || IsNil(o.BuyingTransfer) {
		return nil, false
	}
	return o.BuyingTransfer, true
}

// HasBuyingTransfer returns a boolean if a field has been set.
func (o *HttpExchangeRateResponse) HasBuyingTransfer() bool {
	if o != nil && !IsNil(o.BuyingTransfer) {
		return true
	}

	return false
}

// SetBuyingTransfer gets a reference to the given float32 and assigns it to the BuyingTransfer field.
func (o *HttpExchangeRateResponse) SetBuyingTransfer(v float32) {
	o.BuyingTransfer = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *HttpExchangeRateResponse) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpExchangeRateResponse) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *HttpExchangeRateResponse) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *HttpExchangeRateResponse) SetDate(v string) {
	o.Date = &v
}

// GetMidRate returns the MidRate field value if set, zero value otherwise.
func (o *HttpExchangeRateResponse) GetMidRate() float32 {
	if o == nil || IsNil(o.MidRate) {
		var ret float32
		return ret
	}
	return *o.MidRate
}

// GetMidRateOk returns a tuple with the MidRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpExchangeRateResponse) GetMidRateOk() (*float32, bool) {
	if o == nil || IsNil(o.MidRate) {
		return nil, false
	}
	return o.MidRate, true
}

// HasMidRate returns a boolean if a field has been set.
func (o *HttpExchangeRateResponse) HasMidRate() bool {
	if o != nil && !IsNil(o.MidRate) {
		return true
	}

	return false
}

// SetMidRate gets a reference to the given float32 and assigns it to the MidRate field.
func (o *HttpExchangeRateResponse) SetMidRate(v float32) {
	o.MidRate = &v
}

// GetSelling returns the Selling field value if set, zero value otherwise.
func (o *HttpExchangeRateResponse) GetSelling() float32 {
	if o == nil || IsNil(o.Selling) {
		var ret float32
		return ret
	}
	return *o.Selling
}

// GetSellingOk returns a tuple with the Selling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpExchangeRateResponse) GetSellingOk() (*float32, bool) {
	if o == nil || IsNil(o.Selling) {
		return nil, false
	}
	return o.Selling, true
}

// HasSelling returns a boolean if a field has been set.
func (o *HttpExchangeRateResponse) HasSelling() bool {
	if o != nil && !IsNil(o.Selling) {
		return true
	}

	return false
}

// SetSelling gets a reference to the given float32 and assigns it to the Selling field.
func (o *HttpExchangeRateResponse) SetSelling(v float32) {
	o.Selling = &v
}

func (o HttpExchangeRateResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpExchangeRateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BuyingSight) {
		toSerialize["buying_sight"] = o.BuyingSight
	}
	if !IsNil(o.BuyingTransfer) {
		toSerialize["buying_transfer"] = o.BuyingTransfer
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.MidRate) {
		toSerialize["mid_rate"] = o.MidRate
	}
	if !IsNil(o.Selling) {
		toSerialize["selling"] = o.Selling
	}
	return toSerialize, nil
}

type NullableHttpExchangeRateResponse struct {
	value *HttpExchangeRateResponse
	isSet bool
}

func (v NullableHttpExchangeRateResponse) Get() *HttpExchangeRateResponse {
	return v.value
}

func (v *NullableHttpExchangeRateResponse) Set(val *HttpExchangeRateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpExchangeRateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpExchangeRateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpExchangeRateResponse(val *HttpExchangeRateResponse) *NullableHttpExchangeRateResponse {
	return &NullableHttpExchangeRateResponse{value: val, isSet: true}
}

func (v NullableHttpExchangeRateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpExchangeRateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
