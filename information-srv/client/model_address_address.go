/*
Information API

Contain Generic Information.

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the AddressAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddressAddress{}

// AddressAddress struct for AddressAddress
type AddressAddress struct {
	DistrictEn    *string `json:"district_en,omitempty"`
	DistrictTh    *string `json:"district_th,omitempty"`
	ProvinceEn    *string `json:"province_en,omitempty"`
	ProvinceTh    *string `json:"province_th,omitempty"`
	SubDistrictEn *string `json:"sub_district_en,omitempty"`
	SubDistrictTh *string `json:"sub_district_th,omitempty"`
	ZipCode       *string `json:"zip_code,omitempty"`
}

// NewAddressAddress instantiates a new AddressAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressAddress() *AddressAddress {
	this := AddressAddress{}
	return &this
}

// NewAddressAddressWithDefaults instantiates a new AddressAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressAddressWithDefaults() *AddressAddress {
	this := AddressAddress{}
	return &this
}

// GetDistrictEn returns the DistrictEn field value if set, zero value otherwise.
func (o *AddressAddress) GetDistrictEn() string {
	if o == nil || IsNil(o.DistrictEn) {
		var ret string
		return ret
	}
	return *o.DistrictEn
}

// GetDistrictEnOk returns a tuple with the DistrictEn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressAddress) GetDistrictEnOk() (*string, bool) {
	if o == nil || IsNil(o.DistrictEn) {
		return nil, false
	}
	return o.DistrictEn, true
}

// HasDistrictEn returns a boolean if a field has been set.
func (o *AddressAddress) HasDistrictEn() bool {
	if o != nil && !IsNil(o.DistrictEn) {
		return true
	}

	return false
}

// SetDistrictEn gets a reference to the given string and assigns it to the DistrictEn field.
func (o *AddressAddress) SetDistrictEn(v string) {
	o.DistrictEn = &v
}

// GetDistrictTh returns the DistrictTh field value if set, zero value otherwise.
func (o *AddressAddress) GetDistrictTh() string {
	if o == nil || IsNil(o.DistrictTh) {
		var ret string
		return ret
	}
	return *o.DistrictTh
}

// GetDistrictThOk returns a tuple with the DistrictTh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressAddress) GetDistrictThOk() (*string, bool) {
	if o == nil || IsNil(o.DistrictTh) {
		return nil, false
	}
	return o.DistrictTh, true
}

// HasDistrictTh returns a boolean if a field has been set.
func (o *AddressAddress) HasDistrictTh() bool {
	if o != nil && !IsNil(o.DistrictTh) {
		return true
	}

	return false
}

// SetDistrictTh gets a reference to the given string and assigns it to the DistrictTh field.
func (o *AddressAddress) SetDistrictTh(v string) {
	o.DistrictTh = &v
}

// GetProvinceEn returns the ProvinceEn field value if set, zero value otherwise.
func (o *AddressAddress) GetProvinceEn() string {
	if o == nil || IsNil(o.ProvinceEn) {
		var ret string
		return ret
	}
	return *o.ProvinceEn
}

// GetProvinceEnOk returns a tuple with the ProvinceEn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressAddress) GetProvinceEnOk() (*string, bool) {
	if o == nil || IsNil(o.ProvinceEn) {
		return nil, false
	}
	return o.ProvinceEn, true
}

// HasProvinceEn returns a boolean if a field has been set.
func (o *AddressAddress) HasProvinceEn() bool {
	if o != nil && !IsNil(o.ProvinceEn) {
		return true
	}

	return false
}

// SetProvinceEn gets a reference to the given string and assigns it to the ProvinceEn field.
func (o *AddressAddress) SetProvinceEn(v string) {
	o.ProvinceEn = &v
}

// GetProvinceTh returns the ProvinceTh field value if set, zero value otherwise.
func (o *AddressAddress) GetProvinceTh() string {
	if o == nil || IsNil(o.ProvinceTh) {
		var ret string
		return ret
	}
	return *o.ProvinceTh
}

// GetProvinceThOk returns a tuple with the ProvinceTh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressAddress) GetProvinceThOk() (*string, bool) {
	if o == nil || IsNil(o.ProvinceTh) {
		return nil, false
	}
	return o.ProvinceTh, true
}

// HasProvinceTh returns a boolean if a field has been set.
func (o *AddressAddress) HasProvinceTh() bool {
	if o != nil && !IsNil(o.ProvinceTh) {
		return true
	}

	return false
}

// SetProvinceTh gets a reference to the given string and assigns it to the ProvinceTh field.
func (o *AddressAddress) SetProvinceTh(v string) {
	o.ProvinceTh = &v
}

// GetSubDistrictEn returns the SubDistrictEn field value if set, zero value otherwise.
func (o *AddressAddress) GetSubDistrictEn() string {
	if o == nil || IsNil(o.SubDistrictEn) {
		var ret string
		return ret
	}
	return *o.SubDistrictEn
}

// GetSubDistrictEnOk returns a tuple with the SubDistrictEn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressAddress) GetSubDistrictEnOk() (*string, bool) {
	if o == nil || IsNil(o.SubDistrictEn) {
		return nil, false
	}
	return o.SubDistrictEn, true
}

// HasSubDistrictEn returns a boolean if a field has been set.
func (o *AddressAddress) HasSubDistrictEn() bool {
	if o != nil && !IsNil(o.SubDistrictEn) {
		return true
	}

	return false
}

// SetSubDistrictEn gets a reference to the given string and assigns it to the SubDistrictEn field.
func (o *AddressAddress) SetSubDistrictEn(v string) {
	o.SubDistrictEn = &v
}

// GetSubDistrictTh returns the SubDistrictTh field value if set, zero value otherwise.
func (o *AddressAddress) GetSubDistrictTh() string {
	if o == nil || IsNil(o.SubDistrictTh) {
		var ret string
		return ret
	}
	return *o.SubDistrictTh
}

// GetSubDistrictThOk returns a tuple with the SubDistrictTh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressAddress) GetSubDistrictThOk() (*string, bool) {
	if o == nil || IsNil(o.SubDistrictTh) {
		return nil, false
	}
	return o.SubDistrictTh, true
}

// HasSubDistrictTh returns a boolean if a field has been set.
func (o *AddressAddress) HasSubDistrictTh() bool {
	if o != nil && !IsNil(o.SubDistrictTh) {
		return true
	}

	return false
}

// SetSubDistrictTh gets a reference to the given string and assigns it to the SubDistrictTh field.
func (o *AddressAddress) SetSubDistrictTh(v string) {
	o.SubDistrictTh = &v
}

// GetZipCode returns the ZipCode field value if set, zero value otherwise.
func (o *AddressAddress) GetZipCode() string {
	if o == nil || IsNil(o.ZipCode) {
		var ret string
		return ret
	}
	return *o.ZipCode
}

// GetZipCodeOk returns a tuple with the ZipCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressAddress) GetZipCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ZipCode) {
		return nil, false
	}
	return o.ZipCode, true
}

// HasZipCode returns a boolean if a field has been set.
func (o *AddressAddress) HasZipCode() bool {
	if o != nil && !IsNil(o.ZipCode) {
		return true
	}

	return false
}

// SetZipCode gets a reference to the given string and assigns it to the ZipCode field.
func (o *AddressAddress) SetZipCode(v string) {
	o.ZipCode = &v
}

func (o AddressAddress) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddressAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DistrictEn) {
		toSerialize["district_en"] = o.DistrictEn
	}
	if !IsNil(o.DistrictTh) {
		toSerialize["district_th"] = o.DistrictTh
	}
	if !IsNil(o.ProvinceEn) {
		toSerialize["province_en"] = o.ProvinceEn
	}
	if !IsNil(o.ProvinceTh) {
		toSerialize["province_th"] = o.ProvinceTh
	}
	if !IsNil(o.SubDistrictEn) {
		toSerialize["sub_district_en"] = o.SubDistrictEn
	}
	if !IsNil(o.SubDistrictTh) {
		toSerialize["sub_district_th"] = o.SubDistrictTh
	}
	if !IsNil(o.ZipCode) {
		toSerialize["zip_code"] = o.ZipCode
	}
	return toSerialize, nil
}

type NullableAddressAddress struct {
	value *AddressAddress
	isSet bool
}

func (v NullableAddressAddress) Get() *AddressAddress {
	return v.value
}

func (v *NullableAddressAddress) Set(val *AddressAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressAddress(val *AddressAddress) *NullableAddressAddress {
	return &NullableAddressAddress{value: val, isSet: true}
}

func (v NullableAddressAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
