/*
Information API

Contain Generic Information.

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the BankBank type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BankBank{}

// BankBank struct for BankBank
type BankBank struct {
	Code      *string `json:"code,omitempty"`
	IconUrl   *string `json:"icon_url,omitempty"`
	Id        *string `json:"id,omitempty"`
	Name      *string `json:"name,omitempty"`
	NameTh    *string `json:"name_th,omitempty"`
	ShortName *string `json:"short_name,omitempty"`
}

// NewBankBank instantiates a new BankBank object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBankBank() *BankBank {
	this := BankBank{}
	return &this
}

// NewBankBankWithDefaults instantiates a new BankBank object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBankBankWithDefaults() *BankBank {
	this := BankBank{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *BankBank) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankBank) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *BankBank) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *BankBank) SetCode(v string) {
	o.Code = &v
}

// GetIconUrl returns the IconUrl field value if set, zero value otherwise.
func (o *BankBank) GetIconUrl() string {
	if o == nil || IsNil(o.IconUrl) {
		var ret string
		return ret
	}
	return *o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankBank) GetIconUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IconUrl) {
		return nil, false
	}
	return o.IconUrl, true
}

// HasIconUrl returns a boolean if a field has been set.
func (o *BankBank) HasIconUrl() bool {
	if o != nil && !IsNil(o.IconUrl) {
		return true
	}

	return false
}

// SetIconUrl gets a reference to the given string and assigns it to the IconUrl field.
func (o *BankBank) SetIconUrl(v string) {
	o.IconUrl = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BankBank) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankBank) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BankBank) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BankBank) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BankBank) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankBank) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BankBank) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BankBank) SetName(v string) {
	o.Name = &v
}

// GetNameTh returns the NameTh field value if set, zero value otherwise.
func (o *BankBank) GetNameTh() string {
	if o == nil || IsNil(o.NameTh) {
		var ret string
		return ret
	}
	return *o.NameTh
}

// GetNameThOk returns a tuple with the NameTh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankBank) GetNameThOk() (*string, bool) {
	if o == nil || IsNil(o.NameTh) {
		return nil, false
	}
	return o.NameTh, true
}

// HasNameTh returns a boolean if a field has been set.
func (o *BankBank) HasNameTh() bool {
	if o != nil && !IsNil(o.NameTh) {
		return true
	}

	return false
}

// SetNameTh gets a reference to the given string and assigns it to the NameTh field.
func (o *BankBank) SetNameTh(v string) {
	o.NameTh = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *BankBank) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BankBank) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *BankBank) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *BankBank) SetShortName(v string) {
	o.ShortName = &v
}

func (o BankBank) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BankBank) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.IconUrl) {
		toSerialize["icon_url"] = o.IconUrl
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NameTh) {
		toSerialize["name_th"] = o.NameTh
	}
	if !IsNil(o.ShortName) {
		toSerialize["short_name"] = o.ShortName
	}
	return toSerialize, nil
}

type NullableBankBank struct {
	value *BankBank
	isSet bool
}

func (v NullableBankBank) Get() *BankBank {
	return v.value
}

func (v *NullableBankBank) Set(val *BankBank) {
	v.value = val
	v.isSet = true
}

func (v NullableBankBank) IsSet() bool {
	return v.isSet
}

func (v *NullableBankBank) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBankBank(val *BankBank) *NullableBankBank {
	return &NullableBankBank{value: val, isSet: true}
}

func (v NullableBankBank) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBankBank) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
