// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/pi-financial/information-srv/internal/adapters/cache"
	"github.com/pi-financial/information-srv/internal/adapters/config"
	"github.com/pi-financial/information-srv/internal/adapters/handler/http"
	"github.com/pi-financial/information-srv/internal/adapters/repositories"
	"github.com/pi-financial/information-srv/internal/core/services"
	"github.com/pi-financial/information-srv/internal/driver/log/adapter"
	config2 "github.com/pi-financial/information-srv/internal/driver/log/config"
	"github.com/pi-financial/information-srv/internal/driver/mysql"
)

// Injectors from wire.go:

func InitializeAPI(cfg config.Config) (*http.ServerHTTP, error) {
	logger, err := config2.ProvidZapLogger()
	if err != nil {
		return nil, err
	}
	zapImplement := adapter.ProvideLogger(logger)
	errorHandler := ProvideErrorHandler()
	middlewares := ProvideMiddlewares(errorHandler)
	holidayRepository := repositories.NewHolidayepository(zapImplement)
	redisCacheRepository := cache.NewRedisCacheRepository(zapImplement)
	calendarService := services.NewCalendarService(holidayRepository, redisCacheRepository, zapImplement)
	calendarHandler := http.NewCalendarHandler(calendarService)
	mySqlAdapter := mysql.NewMySqlAdapter(zapImplement)
	commonDb := mySqlAdapter.CommonDb
	addressRepository := repositories.NewAddressRepository(commonDb, zapImplement)
	addressService := services.NewAddressService(addressRepository, redisCacheRepository, zapImplement)
	addressHandler := http.NewAddressHandler(addressService)
	exchangeRateRepository := repositories.NewExchangeRateRepository(zapImplement)
	exchangeRateService := services.NewExchangeRateService(exchangeRateRepository, redisCacheRepository, zapImplement)
	exchangeRateHandler := http.NewExchangeRateHandler(exchangeRateService)
	productRepository := repositories.NewProductRepository(commonDb, zapImplement)
	productService := services.NewProductService(productRepository, redisCacheRepository, zapImplement)
	productHandler := http.NewProductHandler(productService)
	bankRepository := repositories.NewBankRepository(commonDb, zapImplement)
	bankService := services.NewBankService(bankRepository, redisCacheRepository, zapImplement)
	bankHandler := http.NewBankHandler(bankService)
	bankBranchRepository := repositories.NewBankBranchRepository(commonDb, zapImplement)
	bankBranchService := services.NewBankBranchService(bankBranchRepository, redisCacheRepository, zapImplement)
	bankBranchHandler := http.NewBankBranchHandler(bankBranchService)
	handlers := &http.Handlers{
		CalendarHandler:     calendarHandler,
		AddressHandler:      addressHandler,
		ExchangeRateHandler: exchangeRateHandler,
		ProductHandler:      productHandler,
		BankHandler:         bankHandler,
		BankBranchHandler:   bankBranchHandler,
	}
	serverHTTP := http.NewServerHTTP(zapImplement, middlewares, handlers, redisCacheRepository)
	return serverHTTP, nil
}
