/*
Pi.SetService.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// SyncAPIService SyncAPI service
type SyncAPIService service

type ApiInternalSyncInitialMarginPostRequest struct {
	ctx                                                     context.Context
	ApiService                                              *SyncAPIService
	piSetServiceApplicationCommandsSyncInitialMarginRequest *PiSetServiceApplicationCommandsSyncInitialMarginRequest
}

func (r ApiInternalSyncInitialMarginPostRequest) PiSetServiceApplicationCommandsSyncInitialMarginRequest(piSetServiceApplicationCommandsSyncInitialMarginRequest PiSetServiceApplicationCommandsSyncInitialMarginRequest) ApiInternalSyncInitialMarginPostRequest {
	r.piSetServiceApplicationCommandsSyncInitialMarginRequest = &piSetServiceApplicationCommandsSyncInitialMarginRequest
	return r
}

func (r ApiInternalSyncInitialMarginPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.InternalSyncInitialMarginPostExecute(r)
}

/*
InternalSyncInitialMarginPost Method for InternalSyncInitialMarginPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalSyncInitialMarginPostRequest
*/
func (a *SyncAPIService) InternalSyncInitialMarginPost(ctx context.Context) ApiInternalSyncInitialMarginPostRequest {
	return ApiInternalSyncInitialMarginPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *SyncAPIService) InternalSyncInitialMarginPostExecute(r ApiInternalSyncInitialMarginPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyncAPIService.InternalSyncInitialMarginPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/sync/initial-margin"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.piSetServiceApplicationCommandsSyncInitialMarginRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInternalSyncSblInstrumentsPostRequest struct {
	ctx                                              context.Context
	ApiService                                       *SyncAPIService
	piSetServiceApplicationCommandsSyncSblInstrument *PiSetServiceApplicationCommandsSyncSblInstrument
}

func (r ApiInternalSyncSblInstrumentsPostRequest) PiSetServiceApplicationCommandsSyncSblInstrument(piSetServiceApplicationCommandsSyncSblInstrument PiSetServiceApplicationCommandsSyncSblInstrument) ApiInternalSyncSblInstrumentsPostRequest {
	r.piSetServiceApplicationCommandsSyncSblInstrument = &piSetServiceApplicationCommandsSyncSblInstrument
	return r
}

func (r ApiInternalSyncSblInstrumentsPostRequest) Execute() (*PiSetServiceApplicationModelsSyncProcessResultApiResponse, *http.Response, error) {
	return r.ApiService.InternalSyncSblInstrumentsPostExecute(r)
}

/*
InternalSyncSblInstrumentsPost Method for InternalSyncSblInstrumentsPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalSyncSblInstrumentsPostRequest
*/
func (a *SyncAPIService) InternalSyncSblInstrumentsPost(ctx context.Context) ApiInternalSyncSblInstrumentsPostRequest {
	return ApiInternalSyncSblInstrumentsPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiSetServiceApplicationModelsSyncProcessResultApiResponse
func (a *SyncAPIService) InternalSyncSblInstrumentsPostExecute(r ApiInternalSyncSblInstrumentsPostRequest) (*PiSetServiceApplicationModelsSyncProcessResultApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiSetServiceApplicationModelsSyncProcessResultApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyncAPIService.InternalSyncSblInstrumentsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/sync/sbl-instruments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.piSetServiceApplicationCommandsSyncSblInstrument
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
