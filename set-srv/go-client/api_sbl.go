/*
Pi.SetService.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// SblAPIService SblAPI service
type SblAPIService service

type ApiInternalSblInstrumentsGetRequest struct {
	ctx        context.Context
	ApiService *SblAPIService
	page       *string
	pageSize   *string
	orderBy    *string
	orderDir   *PiSetServiceDomainAggregatesModelCommonAggregateOrderDirection
	symbol     *string
}

func (r ApiInternalSblInstrumentsGetRequest) Page(page string) ApiInternalSblInstrumentsGetRequest {
	r.page = &page
	return r
}

func (r ApiInternalSblInstrumentsGetRequest) PageSize(pageSize string) ApiInternalSblInstrumentsGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiInternalSblInstrumentsGetRequest) OrderBy(orderBy string) ApiInternalSblInstrumentsGetRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiInternalSblInstrumentsGetRequest) OrderDir(orderDir PiSetServiceDomainAggregatesModelCommonAggregateOrderDirection) ApiInternalSblInstrumentsGetRequest {
	r.orderDir = &orderDir
	return r
}

func (r ApiInternalSblInstrumentsGetRequest) Symbol(symbol string) ApiInternalSblInstrumentsGetRequest {
	r.symbol = &symbol
	return r
}

func (r ApiInternalSblInstrumentsGetRequest) Execute() (*PiSetServiceDomainAggregatesModelInstrumentAggregateSblInstrumentIEnumerableApiPaginateResponse, *http.Response, error) {
	return r.ApiService.InternalSblInstrumentsGetExecute(r)
}

/*
InternalSblInstrumentsGet Method for InternalSblInstrumentsGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalSblInstrumentsGetRequest
*/
func (a *SblAPIService) InternalSblInstrumentsGet(ctx context.Context) ApiInternalSblInstrumentsGetRequest {
	return ApiInternalSblInstrumentsGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiSetServiceDomainAggregatesModelInstrumentAggregateSblInstrumentIEnumerableApiPaginateResponse
func (a *SblAPIService) InternalSblInstrumentsGetExecute(r ApiInternalSblInstrumentsGetRequest) (*PiSetServiceDomainAggregatesModelInstrumentAggregateSblInstrumentIEnumerableApiPaginateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiSetServiceDomainAggregatesModelInstrumentAggregateSblInstrumentIEnumerableApiPaginateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SblAPIService.InternalSblInstrumentsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/sbl/instruments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PageSize", r.pageSize, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "OrderBy", r.orderBy, "form", "")
	}
	if r.orderDir != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "OrderDir", r.orderDir, "form", "")
	}
	if r.symbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Symbol", r.symbol, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInternalSblOrdersGetRequest struct {
	ctx              context.Context
	ApiService       *SblAPIService
	page             *string
	pageSize         *string
	orderBy          *string
	orderDir         *PiSetServiceDomainAggregatesModelCommonAggregateOrderDirection
	tradingAccountNo *string
	open             *bool
	symbol           *string
	statues          *[]PiSetServiceDomainAggregatesModelFinancialAssetAggregateSblOrderStatus
	type_            *PiSetServiceDomainAggregatesModelFinancialAssetAggregateSblOrderType
	createdDateFrom  *string
	createdDateTo    *string
}

func (r ApiInternalSblOrdersGetRequest) Page(page string) ApiInternalSblOrdersGetRequest {
	r.page = &page
	return r
}

func (r ApiInternalSblOrdersGetRequest) PageSize(pageSize string) ApiInternalSblOrdersGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiInternalSblOrdersGetRequest) OrderBy(orderBy string) ApiInternalSblOrdersGetRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiInternalSblOrdersGetRequest) OrderDir(orderDir PiSetServiceDomainAggregatesModelCommonAggregateOrderDirection) ApiInternalSblOrdersGetRequest {
	r.orderDir = &orderDir
	return r
}

func (r ApiInternalSblOrdersGetRequest) TradingAccountNo(tradingAccountNo string) ApiInternalSblOrdersGetRequest {
	r.tradingAccountNo = &tradingAccountNo
	return r
}

func (r ApiInternalSblOrdersGetRequest) Open(open bool) ApiInternalSblOrdersGetRequest {
	r.open = &open
	return r
}

func (r ApiInternalSblOrdersGetRequest) Symbol(symbol string) ApiInternalSblOrdersGetRequest {
	r.symbol = &symbol
	return r
}

func (r ApiInternalSblOrdersGetRequest) Statues(statues []PiSetServiceDomainAggregatesModelFinancialAssetAggregateSblOrderStatus) ApiInternalSblOrdersGetRequest {
	r.statues = &statues
	return r
}

func (r ApiInternalSblOrdersGetRequest) Type_(type_ PiSetServiceDomainAggregatesModelFinancialAssetAggregateSblOrderType) ApiInternalSblOrdersGetRequest {
	r.type_ = &type_
	return r
}

func (r ApiInternalSblOrdersGetRequest) CreatedDateFrom(createdDateFrom string) ApiInternalSblOrdersGetRequest {
	r.createdDateFrom = &createdDateFrom
	return r
}

func (r ApiInternalSblOrdersGetRequest) CreatedDateTo(createdDateTo string) ApiInternalSblOrdersGetRequest {
	r.createdDateTo = &createdDateTo
	return r
}

func (r ApiInternalSblOrdersGetRequest) Execute() (*PiSetServiceDomainAggregatesModelTradingAggregateSblOrderIEnumerableApiPaginateResponse, *http.Response, error) {
	return r.ApiService.InternalSblOrdersGetExecute(r)
}

/*
InternalSblOrdersGet Method for InternalSblOrdersGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalSblOrdersGetRequest
*/
func (a *SblAPIService) InternalSblOrdersGet(ctx context.Context) ApiInternalSblOrdersGetRequest {
	return ApiInternalSblOrdersGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiSetServiceDomainAggregatesModelTradingAggregateSblOrderIEnumerableApiPaginateResponse
func (a *SblAPIService) InternalSblOrdersGetExecute(r ApiInternalSblOrdersGetRequest) (*PiSetServiceDomainAggregatesModelTradingAggregateSblOrderIEnumerableApiPaginateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiSetServiceDomainAggregatesModelTradingAggregateSblOrderIEnumerableApiPaginateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SblAPIService.InternalSblOrdersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/sbl/orders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "PageSize", r.pageSize, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "OrderBy", r.orderBy, "form", "")
	}
	if r.orderDir != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "OrderDir", r.orderDir, "form", "")
	}
	if r.tradingAccountNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "TradingAccountNo", r.tradingAccountNo, "form", "")
	}
	if r.open != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Open", r.open, "form", "")
	}
	if r.symbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Symbol", r.symbol, "form", "")
	}
	if r.statues != nil {
		t := *r.statues
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "Statues", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "Statues", t, "form", "multi")
		}
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "Type", r.type_, "form", "")
	}
	if r.createdDateFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CreatedDateFrom", r.createdDateFrom, "form", "")
	}
	if r.createdDateTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "CreatedDateTo", r.createdDateTo, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInternalSblOrdersOrderIdPatchRequest struct {
	ctx                                              context.Context
	ApiService                                       *SblAPIService
	orderId                                          string
	piSetServiceAPIModelsSblOrderSubmitReviewRequest *PiSetServiceAPIModelsSblOrderSubmitReviewRequest
}

func (r ApiInternalSblOrdersOrderIdPatchRequest) PiSetServiceAPIModelsSblOrderSubmitReviewRequest(piSetServiceAPIModelsSblOrderSubmitReviewRequest PiSetServiceAPIModelsSblOrderSubmitReviewRequest) ApiInternalSblOrdersOrderIdPatchRequest {
	r.piSetServiceAPIModelsSblOrderSubmitReviewRequest = &piSetServiceAPIModelsSblOrderSubmitReviewRequest
	return r
}

func (r ApiInternalSblOrdersOrderIdPatchRequest) Execute() (*PiSetServiceApplicationCommandsReviewSblOrderResponseApiResponse, *http.Response, error) {
	return r.ApiService.InternalSblOrdersOrderIdPatchExecute(r)
}

/*
InternalSblOrdersOrderIdPatch Method for InternalSblOrdersOrderIdPatch

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param orderId
	@return ApiInternalSblOrdersOrderIdPatchRequest
*/
func (a *SblAPIService) InternalSblOrdersOrderIdPatch(ctx context.Context, orderId string) ApiInternalSblOrdersOrderIdPatchRequest {
	return ApiInternalSblOrdersOrderIdPatchRequest{
		ApiService: a,
		ctx:        ctx,
		orderId:    orderId,
	}
}

// Execute executes the request
//
//	@return PiSetServiceApplicationCommandsReviewSblOrderResponseApiResponse
func (a *SblAPIService) InternalSblOrdersOrderIdPatchExecute(r ApiInternalSblOrdersOrderIdPatchRequest) (*PiSetServiceApplicationCommandsReviewSblOrderResponseApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiSetServiceApplicationCommandsReviewSblOrderResponseApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SblAPIService.InternalSblOrdersOrderIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/sbl/orders/{orderId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orderId"+"}", url.PathEscape(parameterValueToString(r.orderId, "orderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.piSetServiceAPIModelsSblOrderSubmitReviewRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
