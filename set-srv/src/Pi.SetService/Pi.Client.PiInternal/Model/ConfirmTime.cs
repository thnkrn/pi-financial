/*
 * pi-it-backoffice-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Pi.Client.PiInternal.Client.FileParameter;
using OpenAPIDateConverter = Pi.Client.PiInternal.Client.OpenAPIDateConverter;

namespace Pi.Client.PiInternal.Model
{
    /// <summary>
    /// ConfirmTime
    /// </summary>
    [DataContract(Name = "ConfirmTime")]
    public partial class ConfirmTime : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfirmTime" /> class.
        /// </summary>
        /// <param name="ticks">ticks.</param>
        /// <param name="days">days.</param>
        /// <param name="hours">hours.</param>
        /// <param name="milliseconds">milliseconds.</param>
        /// <param name="minutes">minutes.</param>
        /// <param name="seconds">seconds.</param>
        /// <param name="totalDays">totalDays.</param>
        /// <param name="totalHours">totalHours.</param>
        /// <param name="totalMilliseconds">totalMilliseconds.</param>
        /// <param name="totalMinutes">totalMinutes.</param>
        /// <param name="totalSeconds">totalSeconds.</param>
        public ConfirmTime(long ticks = default(long), long days = default(long), long hours = default(long), long milliseconds = default(long), long minutes = default(long), long seconds = default(long), double totalDays = default(double), double totalHours = default(double), int totalMilliseconds = default(int), double totalMinutes = default(double), long totalSeconds = default(long))
        {
            this.Ticks = ticks;
            this.Days = days;
            this.Hours = hours;
            this.Milliseconds = milliseconds;
            this.Minutes = minutes;
            this.Seconds = seconds;
            this.TotalDays = totalDays;
            this.TotalHours = totalHours;
            this.TotalMilliseconds = totalMilliseconds;
            this.TotalMinutes = totalMinutes;
            this.TotalSeconds = totalSeconds;
        }

        /// <summary>
        /// Gets or Sets Ticks
        /// </summary>
        [DataMember(Name = "ticks", EmitDefaultValue = false)]
        public long Ticks { get; set; }

        /// <summary>
        /// Gets or Sets Days
        /// </summary>
        [DataMember(Name = "days", EmitDefaultValue = false)]
        public long Days { get; set; }

        /// <summary>
        /// Gets or Sets Hours
        /// </summary>
        [DataMember(Name = "hours", EmitDefaultValue = false)]
        public long Hours { get; set; }

        /// <summary>
        /// Gets or Sets Milliseconds
        /// </summary>
        [DataMember(Name = "milliseconds", EmitDefaultValue = false)]
        public long Milliseconds { get; set; }

        /// <summary>
        /// Gets or Sets Minutes
        /// </summary>
        [DataMember(Name = "minutes", EmitDefaultValue = false)]
        public long Minutes { get; set; }

        /// <summary>
        /// Gets or Sets Seconds
        /// </summary>
        [DataMember(Name = "seconds", EmitDefaultValue = false)]
        public long Seconds { get; set; }

        /// <summary>
        /// Gets or Sets TotalDays
        /// </summary>
        [DataMember(Name = "totalDays", EmitDefaultValue = false)]
        public double TotalDays { get; set; }

        /// <summary>
        /// Gets or Sets TotalHours
        /// </summary>
        [DataMember(Name = "totalHours", EmitDefaultValue = false)]
        public double TotalHours { get; set; }

        /// <summary>
        /// Gets or Sets TotalMilliseconds
        /// </summary>
        [DataMember(Name = "totalMilliseconds", EmitDefaultValue = false)]
        public int TotalMilliseconds { get; set; }

        /// <summary>
        /// Gets or Sets TotalMinutes
        /// </summary>
        [DataMember(Name = "totalMinutes", EmitDefaultValue = false)]
        public double TotalMinutes { get; set; }

        /// <summary>
        /// Gets or Sets TotalSeconds
        /// </summary>
        [DataMember(Name = "totalSeconds", EmitDefaultValue = false)]
        public long TotalSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConfirmTime {\n");
            sb.Append("  Ticks: ").Append(Ticks).Append("\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  Hours: ").Append(Hours).Append("\n");
            sb.Append("  Milliseconds: ").Append(Milliseconds).Append("\n");
            sb.Append("  Minutes: ").Append(Minutes).Append("\n");
            sb.Append("  Seconds: ").Append(Seconds).Append("\n");
            sb.Append("  TotalDays: ").Append(TotalDays).Append("\n");
            sb.Append("  TotalHours: ").Append(TotalHours).Append("\n");
            sb.Append("  TotalMilliseconds: ").Append(TotalMilliseconds).Append("\n");
            sb.Append("  TotalMinutes: ").Append(TotalMinutes).Append("\n");
            sb.Append("  TotalSeconds: ").Append(TotalSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
