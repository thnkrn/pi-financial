/*
 * pi-it-backoffice-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Pi.Client.PiInternal.Client.FileParameter;
using OpenAPIDateConverter = Pi.Client.PiInternal.Client.OpenAPIDateConverter;

namespace Pi.Client.PiInternal.Model
{
    /// <summary>
    /// TradeDetail
    /// </summary>
    [DataContract(Name = "TradeDetail")]
    public partial class TradeDetail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradeDetail" /> class.
        /// </summary>
        /// <param name="refDate">refDate.</param>
        /// <param name="refType">refType.</param>
        /// <param name="unit">unit.</param>
        /// <param name="price">price.</param>
        /// <param name="custCode">custCode.</param>
        /// <param name="account">account.</param>
        /// <param name="shareCode">shareCode.</param>
        /// <param name="trxBranch">trxBranch.</param>
        /// <param name="trxTeamId">trxTeamId.</param>
        /// <param name="trxMktId">trxMktId.</param>
        /// <param name="confirmTime">confirmTime.</param>
        /// <param name="serviceType">serviceType.</param>
        /// <param name="commSub">commSub.</param>
        /// <param name="vatSub">vatSub.</param>
        /// <param name="amt">amt.</param>
        /// <param name="remainPostUnit">remainPostUnit.</param>
        /// <param name="xchgMkt">xchgMkt.</param>
        /// <param name="multiplier">multiplier.</param>
        /// <param name="refNo">refNo.</param>
        /// <param name="tradeFee">tradeFee.</param>
        /// <param name="clrFee">clrFee.</param>
        /// <param name="secFee">secFee.</param>
        /// <param name="regFee">regFee.</param>
        /// <param name="userId">userId.</param>
        /// <param name="buysellsorter">buysellsorter.</param>
        public TradeDetail(DateTime refDate = default(DateTime), string refType = default(string), double unit = default(double), double price = default(double), string custCode = default(string), string account = default(string), string shareCode = default(string), string trxBranch = default(string), string trxTeamId = default(string), string trxMktId = default(string), ConfirmTime confirmTime = default(ConfirmTime), string serviceType = default(string), double commSub = default(double), double vatSub = default(double), double amt = default(double), double remainPostUnit = default(double), string xchgMkt = default(string), double multiplier = default(double), string refNo = default(string), double tradeFee = default(double), double clrFee = default(double), double secFee = default(double), double regFee = default(double), string userId = default(string), string buysellsorter = default(string))
        {
            this.RefDate = refDate;
            this.RefType = refType;
            this.Unit = unit;
            this.Price = price;
            this.CustCode = custCode;
            this.Account = account;
            this.ShareCode = shareCode;
            this.TrxBranch = trxBranch;
            this.TrxTeamId = trxTeamId;
            this.TrxMktId = trxMktId;
            this.ConfirmTime = confirmTime;
            this.ServiceType = serviceType;
            this.CommSub = commSub;
            this.VatSub = vatSub;
            this.Amt = amt;
            this.RemainPostUnit = remainPostUnit;
            this.XchgMkt = xchgMkt;
            this.Multiplier = multiplier;
            this.RefNo = refNo;
            this.TradeFee = tradeFee;
            this.ClrFee = clrFee;
            this.SecFee = secFee;
            this.RegFee = regFee;
            this.UserId = userId;
            this.Buysellsorter = buysellsorter;
        }

        /// <summary>
        /// Gets or Sets RefDate
        /// </summary>
        [DataMember(Name = "refDate", EmitDefaultValue = false)]
        public DateTime RefDate { get; set; }

        /// <summary>
        /// Gets or Sets RefType
        /// </summary>
        [DataMember(Name = "refType", EmitDefaultValue = true)]
        public string RefType { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name = "unit", EmitDefaultValue = false)]
        public double Unit { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public double Price { get; set; }

        /// <summary>
        /// Gets or Sets CustCode
        /// </summary>
        [DataMember(Name = "custCode", EmitDefaultValue = true)]
        public string CustCode { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name = "account", EmitDefaultValue = true)]
        public string Account { get; set; }

        /// <summary>
        /// Gets or Sets ShareCode
        /// </summary>
        [DataMember(Name = "shareCode", EmitDefaultValue = true)]
        public string ShareCode { get; set; }

        /// <summary>
        /// Gets or Sets TrxBranch
        /// </summary>
        [DataMember(Name = "trxBranch", EmitDefaultValue = true)]
        public string TrxBranch { get; set; }

        /// <summary>
        /// Gets or Sets TrxTeamId
        /// </summary>
        [DataMember(Name = "trxTeamId", EmitDefaultValue = true)]
        public string TrxTeamId { get; set; }

        /// <summary>
        /// Gets or Sets TrxMktId
        /// </summary>
        [DataMember(Name = "trxMktId", EmitDefaultValue = true)]
        public string TrxMktId { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmTime
        /// </summary>
        [DataMember(Name = "confirmTime", EmitDefaultValue = false)]
        public ConfirmTime ConfirmTime { get; set; }

        /// <summary>
        /// Gets or Sets ConfirmTimeString
        /// </summary>
        [DataMember(Name = "confirmTimeString", EmitDefaultValue = true)]
        public string ConfirmTimeString { get; private set; }

        /// <summary>
        /// Returns false as ConfirmTimeString should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeConfirmTimeString()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ServiceType
        /// </summary>
        [DataMember(Name = "serviceType", EmitDefaultValue = true)]
        public string ServiceType { get; set; }

        /// <summary>
        /// Gets or Sets CommSub
        /// </summary>
        [DataMember(Name = "commSub", EmitDefaultValue = false)]
        public double CommSub { get; set; }

        /// <summary>
        /// Gets or Sets VatSub
        /// </summary>
        [DataMember(Name = "vatSub", EmitDefaultValue = false)]
        public double VatSub { get; set; }

        /// <summary>
        /// Gets or Sets Amt
        /// </summary>
        [DataMember(Name = "amt", EmitDefaultValue = false)]
        public double Amt { get; set; }

        /// <summary>
        /// Gets or Sets RemainPostUnit
        /// </summary>
        [DataMember(Name = "remainPostUnit", EmitDefaultValue = false)]
        public double RemainPostUnit { get; set; }

        /// <summary>
        /// Gets or Sets XchgMkt
        /// </summary>
        [DataMember(Name = "xchgMkt", EmitDefaultValue = true)]
        public string XchgMkt { get; set; }

        /// <summary>
        /// Gets or Sets Multiplier
        /// </summary>
        [DataMember(Name = "multiplier", EmitDefaultValue = false)]
        public double Multiplier { get; set; }

        /// <summary>
        /// Gets or Sets RefNo
        /// </summary>
        [DataMember(Name = "refNo", EmitDefaultValue = true)]
        public string RefNo { get; set; }

        /// <summary>
        /// Gets or Sets TradeFee
        /// </summary>
        [DataMember(Name = "tradeFee", EmitDefaultValue = false)]
        public double TradeFee { get; set; }

        /// <summary>
        /// Gets or Sets ClrFee
        /// </summary>
        [DataMember(Name = "clrFee", EmitDefaultValue = false)]
        public double ClrFee { get; set; }

        /// <summary>
        /// Gets or Sets SecFee
        /// </summary>
        [DataMember(Name = "secFee", EmitDefaultValue = false)]
        public double SecFee { get; set; }

        /// <summary>
        /// Gets or Sets RegFee
        /// </summary>
        [DataMember(Name = "regFee", EmitDefaultValue = false)]
        public double RegFee { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets Buysellsorter
        /// </summary>
        [DataMember(Name = "buysellsorter", EmitDefaultValue = true)]
        public string Buysellsorter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TradeDetail {\n");
            sb.Append("  RefDate: ").Append(RefDate).Append("\n");
            sb.Append("  RefType: ").Append(RefType).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  CustCode: ").Append(CustCode).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  ShareCode: ").Append(ShareCode).Append("\n");
            sb.Append("  TrxBranch: ").Append(TrxBranch).Append("\n");
            sb.Append("  TrxTeamId: ").Append(TrxTeamId).Append("\n");
            sb.Append("  TrxMktId: ").Append(TrxMktId).Append("\n");
            sb.Append("  ConfirmTime: ").Append(ConfirmTime).Append("\n");
            sb.Append("  ConfirmTimeString: ").Append(ConfirmTimeString).Append("\n");
            sb.Append("  ServiceType: ").Append(ServiceType).Append("\n");
            sb.Append("  CommSub: ").Append(CommSub).Append("\n");
            sb.Append("  VatSub: ").Append(VatSub).Append("\n");
            sb.Append("  Amt: ").Append(Amt).Append("\n");
            sb.Append("  RemainPostUnit: ").Append(RemainPostUnit).Append("\n");
            sb.Append("  XchgMkt: ").Append(XchgMkt).Append("\n");
            sb.Append("  Multiplier: ").Append(Multiplier).Append("\n");
            sb.Append("  RefNo: ").Append(RefNo).Append("\n");
            sb.Append("  TradeFee: ").Append(TradeFee).Append("\n");
            sb.Append("  ClrFee: ").Append(ClrFee).Append("\n");
            sb.Append("  SecFee: ").Append(SecFee).Append("\n");
            sb.Append("  RegFee: ").Append(RegFee).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Buysellsorter: ").Append(Buysellsorter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
