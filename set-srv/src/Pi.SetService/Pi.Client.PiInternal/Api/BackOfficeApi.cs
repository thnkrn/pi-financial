/*
 * pi-it-backoffice-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Pi.Client.PiInternal.Client;
using Pi.Client.PiInternal.Model;

namespace Pi.Client.PiInternal.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBackOfficeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Pi.Client.PiInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="accountNumber"> (optional)</param>
        /// <returns>ResponseDataAUM</returns>
        ResponseDataAUM ApiBackOfficeAUMByAccountGet(Guid? apiKey = default(Guid?), string? accountNumber = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pi.Client.PiInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="accountNumber"> (optional)</param>
        /// <returns>ApiResponse of ResponseDataAUM</returns>
        ApiResponse<ResponseDataAUM> ApiBackOfficeAUMByAccountGetWithHttpInfo(Guid? apiKey = default(Guid?), string? accountNumber = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Pi.Client.PiInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="accountNumber"></param>
        /// <param name="apiKey"> (optional)</param>
        /// <returns>ResponseData</returns>
        ResponseData ApiBackOfficeOrderTradesGet(string startDate, string endDate, string accountNumber, Guid? apiKey = default(Guid?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pi.Client.PiInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="accountNumber"></param>
        /// <param name="apiKey"> (optional)</param>
        /// <returns>ApiResponse of ResponseData</returns>
        ApiResponse<ResponseData> ApiBackOfficeOrderTradesGetWithHttpInfo(string startDate, string endDate, string accountNumber, Guid? apiKey = default(Guid?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBackOfficeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pi.Client.PiInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="accountNumber"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseDataAUM</returns>
        System.Threading.Tasks.Task<ResponseDataAUM> ApiBackOfficeAUMByAccountGetAsync(Guid? apiKey = default(Guid?), string? accountNumber = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pi.Client.PiInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="accountNumber"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseDataAUM)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDataAUM>> ApiBackOfficeAUMByAccountGetWithHttpInfoAsync(Guid? apiKey = default(Guid?), string? accountNumber = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pi.Client.PiInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="accountNumber"></param>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseData</returns>
        System.Threading.Tasks.Task<ResponseData> ApiBackOfficeOrderTradesGetAsync(string startDate, string endDate, string accountNumber, Guid? apiKey = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Pi.Client.PiInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="accountNumber"></param>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseData)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseData>> ApiBackOfficeOrderTradesGetWithHttpInfoAsync(string startDate, string endDate, string accountNumber, Guid? apiKey = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBackOfficeApi : IBackOfficeApiSync, IBackOfficeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BackOfficeApi : IDisposable, IBackOfficeApi
    {
        private Pi.Client.PiInternal.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BackOfficeApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public BackOfficeApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BackOfficeApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public BackOfficeApi(string basePath)
        {
            this.Configuration = Pi.Client.PiInternal.Client.Configuration.MergeConfigurations(
                Pi.Client.PiInternal.Client.GlobalConfiguration.Instance,
                new Pi.Client.PiInternal.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Pi.Client.PiInternal.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Pi.Client.PiInternal.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BackOfficeApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public BackOfficeApi(Pi.Client.PiInternal.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Pi.Client.PiInternal.Client.Configuration.MergeConfigurations(
                Pi.Client.PiInternal.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Pi.Client.PiInternal.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Pi.Client.PiInternal.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BackOfficeApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public BackOfficeApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BackOfficeApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public BackOfficeApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Pi.Client.PiInternal.Client.Configuration.MergeConfigurations(
                Pi.Client.PiInternal.Client.GlobalConfiguration.Instance,
                new Pi.Client.PiInternal.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Pi.Client.PiInternal.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Pi.Client.PiInternal.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BackOfficeApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public BackOfficeApi(HttpClient client, Pi.Client.PiInternal.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Pi.Client.PiInternal.Client.Configuration.MergeConfigurations(
                Pi.Client.PiInternal.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Pi.Client.PiInternal.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Pi.Client.PiInternal.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BackOfficeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public BackOfficeApi(Pi.Client.PiInternal.Client.ISynchronousClient client, Pi.Client.PiInternal.Client.IAsynchronousClient asyncClient, Pi.Client.PiInternal.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Pi.Client.PiInternal.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Pi.Client.PiInternal.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Pi.Client.PiInternal.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Pi.Client.PiInternal.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Pi.Client.PiInternal.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Pi.Client.PiInternal.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pi.Client.PiInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="accountNumber"> (optional)</param>
        /// <returns>ResponseDataAUM</returns>
        public ResponseDataAUM ApiBackOfficeAUMByAccountGet(Guid? apiKey = default(Guid?), string? accountNumber = default(string?))
        {
            Pi.Client.PiInternal.Client.ApiResponse<ResponseDataAUM> localVarResponse = ApiBackOfficeAUMByAccountGetWithHttpInfo(apiKey, accountNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pi.Client.PiInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="accountNumber"> (optional)</param>
        /// <returns>ApiResponse of ResponseDataAUM</returns>
        public Pi.Client.PiInternal.Client.ApiResponse<ResponseDataAUM> ApiBackOfficeAUMByAccountGetWithHttpInfo(Guid? apiKey = default(Guid?), string? accountNumber = default(string?))
        {
            Pi.Client.PiInternal.Client.RequestOptions localVarRequestOptions = new Pi.Client.PiInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Pi.Client.PiInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Client.PiInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (accountNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Client.PiInternal.Client.ClientUtils.ParameterToMultiMap("", "accountNumber", accountNumber));
            }
            if (apiKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", Pi.Client.PiInternal.Client.ClientUtils.ParameterToString(apiKey)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ResponseDataAUM>("/api/BackOffice/AUMByAccount", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBackOfficeAUMByAccountGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pi.Client.PiInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="accountNumber"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseDataAUM</returns>
        public async System.Threading.Tasks.Task<ResponseDataAUM> ApiBackOfficeAUMByAccountGetAsync(Guid? apiKey = default(Guid?), string? accountNumber = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Client.PiInternal.Client.ApiResponse<ResponseDataAUM> localVarResponse = await ApiBackOfficeAUMByAccountGetWithHttpInfoAsync(apiKey, accountNumber, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pi.Client.PiInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="accountNumber"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseDataAUM)</returns>
        public async System.Threading.Tasks.Task<Pi.Client.PiInternal.Client.ApiResponse<ResponseDataAUM>> ApiBackOfficeAUMByAccountGetWithHttpInfoAsync(Guid? apiKey = default(Guid?), string? accountNumber = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Pi.Client.PiInternal.Client.RequestOptions localVarRequestOptions = new Pi.Client.PiInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Pi.Client.PiInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Client.PiInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (accountNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Client.PiInternal.Client.ClientUtils.ParameterToMultiMap("", "accountNumber", accountNumber));
            }
            if (apiKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", Pi.Client.PiInternal.Client.ClientUtils.ParameterToString(apiKey)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResponseDataAUM>("/api/BackOffice/AUMByAccount", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBackOfficeAUMByAccountGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pi.Client.PiInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="accountNumber"></param>
        /// <param name="apiKey"> (optional)</param>
        /// <returns>ResponseData</returns>
        public ResponseData ApiBackOfficeOrderTradesGet(string startDate, string endDate, string accountNumber, Guid? apiKey = default(Guid?))
        {
            Pi.Client.PiInternal.Client.ApiResponse<ResponseData> localVarResponse = ApiBackOfficeOrderTradesGetWithHttpInfo(startDate, endDate, accountNumber, apiKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pi.Client.PiInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="accountNumber"></param>
        /// <param name="apiKey"> (optional)</param>
        /// <returns>ApiResponse of ResponseData</returns>
        public Pi.Client.PiInternal.Client.ApiResponse<ResponseData> ApiBackOfficeOrderTradesGetWithHttpInfo(string startDate, string endDate, string accountNumber, Guid? apiKey = default(Guid?))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new Pi.Client.PiInternal.Client.ApiException(400, "Missing required parameter 'startDate' when calling BackOfficeApi->ApiBackOfficeOrderTradesGet");

            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new Pi.Client.PiInternal.Client.ApiException(400, "Missing required parameter 'endDate' when calling BackOfficeApi->ApiBackOfficeOrderTradesGet");

            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new Pi.Client.PiInternal.Client.ApiException(400, "Missing required parameter 'accountNumber' when calling BackOfficeApi->ApiBackOfficeOrderTradesGet");

            Pi.Client.PiInternal.Client.RequestOptions localVarRequestOptions = new Pi.Client.PiInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Pi.Client.PiInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Client.PiInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Pi.Client.PiInternal.Client.ClientUtils.ParameterToMultiMap("", "StartDate", startDate));
            localVarRequestOptions.QueryParameters.Add(Pi.Client.PiInternal.Client.ClientUtils.ParameterToMultiMap("", "EndDate", endDate));
            localVarRequestOptions.QueryParameters.Add(Pi.Client.PiInternal.Client.ClientUtils.ParameterToMultiMap("", "AccountNumber", accountNumber));
            if (apiKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", Pi.Client.PiInternal.Client.ClientUtils.ParameterToString(apiKey)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ResponseData>("/api/BackOffice/OrderTrades", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBackOfficeOrderTradesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pi.Client.PiInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="accountNumber"></param>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseData</returns>
        public async System.Threading.Tasks.Task<ResponseData> ApiBackOfficeOrderTradesGetAsync(string startDate, string endDate, string accountNumber, Guid? apiKey = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Client.PiInternal.Client.ApiResponse<ResponseData> localVarResponse = await ApiBackOfficeOrderTradesGetWithHttpInfoAsync(startDate, endDate, accountNumber, apiKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Pi.Client.PiInternal.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="accountNumber"></param>
        /// <param name="apiKey"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseData)</returns>
        public async System.Threading.Tasks.Task<Pi.Client.PiInternal.Client.ApiResponse<ResponseData>> ApiBackOfficeOrderTradesGetWithHttpInfoAsync(string startDate, string endDate, string accountNumber, Guid? apiKey = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new Pi.Client.PiInternal.Client.ApiException(400, "Missing required parameter 'startDate' when calling BackOfficeApi->ApiBackOfficeOrderTradesGet");

            // verify the required parameter 'endDate' is set
            if (endDate == null)
                throw new Pi.Client.PiInternal.Client.ApiException(400, "Missing required parameter 'endDate' when calling BackOfficeApi->ApiBackOfficeOrderTradesGet");

            // verify the required parameter 'accountNumber' is set
            if (accountNumber == null)
                throw new Pi.Client.PiInternal.Client.ApiException(400, "Missing required parameter 'accountNumber' when calling BackOfficeApi->ApiBackOfficeOrderTradesGet");


            Pi.Client.PiInternal.Client.RequestOptions localVarRequestOptions = new Pi.Client.PiInternal.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Pi.Client.PiInternal.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Client.PiInternal.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Pi.Client.PiInternal.Client.ClientUtils.ParameterToMultiMap("", "StartDate", startDate));
            localVarRequestOptions.QueryParameters.Add(Pi.Client.PiInternal.Client.ClientUtils.ParameterToMultiMap("", "EndDate", endDate));
            localVarRequestOptions.QueryParameters.Add(Pi.Client.PiInternal.Client.ClientUtils.ParameterToMultiMap("", "AccountNumber", accountNumber));
            if (apiKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", Pi.Client.PiInternal.Client.ClientUtils.ParameterToString(apiKey)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResponseData>("/api/BackOffice/OrderTrades", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiBackOfficeOrderTradesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
