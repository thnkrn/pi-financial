// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/pi-financial/go-boilerplate/config"
	"github.com/pi-financial/go-boilerplate/internal/driver/log/adapter"
	config2 "github.com/pi-financial/go-boilerplate/internal/driver/log/config"
	"github.com/pi-financial/go-boilerplate/internal/driver/mysql"
	"github.com/pi-financial/go-boilerplate/internal/handler"
	"github.com/pi-financial/go-boilerplate/internal/handler/example"
	"github.com/pi-financial/go-boilerplate/internal/middleware"
	"github.com/pi-financial/go-boilerplate/internal/repository"
	"github.com/pi-financial/go-boilerplate/internal/service"
)

// Injectors from wire.go:

func InitializeAPI(cfg config.Config) (*handler.ServerHTTP, error) {
	logger, err := config2.ProvidZapLogger()
	if err != nil {
		return nil, err
	}
	zapImplement := adapter.ProvideLogger(logger)
	errorHandler := middleware.NewErrorHandler()
	middlewares := &handler.Middlewares{
		ErrorHandler: errorHandler,
	}
	db, err := mysql.ConnectDatabase(cfg)
	if err != nil {
		return nil, err
	}
	exampleRepository := repository.NewExampleRepository(db)
	exampleService := service.NewExampleService(exampleRepository)
	exampleHandler := example.NewExampleHandler(exampleService)
	handlers := handler.Handlers{
		ExampleHandler: exampleHandler,
	}
	serverHTTP := handler.NewServerHTTP(zapImplement, middlewares, handlers, cfg)
	return serverHTTP, nil
}
