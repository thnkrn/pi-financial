/*
 * Exante Trade
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Pi.Client.ExanteTrade.Client.FileParameter;
using OpenAPIDateConverter = Pi.Client.ExanteTrade.Client.OpenAPIDateConverter;

namespace Pi.Client.ExanteTrade.Model
{
    /// <summary>
    /// AccountSummaryPosition
    /// </summary>
    [DataContract(Name = "AccountSummaryPosition")]
    public partial class AccountSummaryPosition : IEquatable<AccountSummaryPosition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountSummaryPosition" /> class.
        /// </summary>
        /// <param name="symbolId">symbolId.</param>
        /// <param name="symbolType">symbolType.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="currency">currency.</param>
        /// <param name="price">price.</param>
        /// <param name="averagePrice">averagePrice.</param>
        /// <param name="pnl">pnl.</param>
        /// <param name="convertedPnl">convertedPnl.</param>
        /// <param name="value">value.</param>
        /// <param name="convertedValue">convertedValue.</param>
        public AccountSummaryPosition(string symbolId = default(string), string symbolType = default(string), string quantity = default(string), string currency = default(string), string price = default(string), string averagePrice = default(string), string pnl = default(string), string convertedPnl = default(string), string value = default(string), string convertedValue = default(string))
        {
            this.SymbolId = symbolId;
            this.SymbolType = symbolType;
            this.Quantity = quantity;
            this.Currency = currency;
            this.Price = price;
            this.AveragePrice = averagePrice;
            this.Pnl = pnl;
            this.ConvertedPnl = convertedPnl;
            this.Value = value;
            this.ConvertedValue = convertedValue;
        }

        /// <summary>
        /// Gets or Sets SymbolId
        /// </summary>
        [DataMember(Name = "symbolId", EmitDefaultValue = false)]
        public string SymbolId { get; set; }

        /// <summary>
        /// Gets or Sets SymbolType
        /// </summary>
        [DataMember(Name = "symbolType", EmitDefaultValue = false)]
        public string SymbolType { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public string Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", EmitDefaultValue = true)]
        public string Price { get; set; }

        /// <summary>
        /// Gets or Sets AveragePrice
        /// </summary>
        [DataMember(Name = "averagePrice", EmitDefaultValue = true)]
        public string AveragePrice { get; set; }

        /// <summary>
        /// Gets or Sets Pnl
        /// </summary>
        [DataMember(Name = "pnl", EmitDefaultValue = true)]
        public string Pnl { get; set; }

        /// <summary>
        /// Gets or Sets ConvertedPnl
        /// </summary>
        [DataMember(Name = "convertedPnl", EmitDefaultValue = true)]
        public string ConvertedPnl { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets ConvertedValue
        /// </summary>
        [DataMember(Name = "convertedValue", EmitDefaultValue = true)]
        public string ConvertedValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountSummaryPosition {\n");
            sb.Append("  SymbolId: ").Append(SymbolId).Append("\n");
            sb.Append("  SymbolType: ").Append(SymbolType).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  AveragePrice: ").Append(AveragePrice).Append("\n");
            sb.Append("  Pnl: ").Append(Pnl).Append("\n");
            sb.Append("  ConvertedPnl: ").Append(ConvertedPnl).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ConvertedValue: ").Append(ConvertedValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountSummaryPosition);
        }

        /// <summary>
        /// Returns true if AccountSummaryPosition instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountSummaryPosition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountSummaryPosition input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.SymbolId == input.SymbolId ||
                    (this.SymbolId != null &&
                    this.SymbolId.Equals(input.SymbolId))
                ) &&
                (
                    this.SymbolType == input.SymbolType ||
                    (this.SymbolType != null &&
                    this.SymbolType.Equals(input.SymbolType))
                ) &&
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) &&
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) &&
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) &&
                (
                    this.AveragePrice == input.AveragePrice ||
                    (this.AveragePrice != null &&
                    this.AveragePrice.Equals(input.AveragePrice))
                ) &&
                (
                    this.Pnl == input.Pnl ||
                    (this.Pnl != null &&
                    this.Pnl.Equals(input.Pnl))
                ) &&
                (
                    this.ConvertedPnl == input.ConvertedPnl ||
                    (this.ConvertedPnl != null &&
                    this.ConvertedPnl.Equals(input.ConvertedPnl))
                ) &&
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) &&
                (
                    this.ConvertedValue == input.ConvertedValue ||
                    (this.ConvertedValue != null &&
                    this.ConvertedValue.Equals(input.ConvertedValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SymbolId != null)
                {
                    hashCode = (hashCode * 59) + this.SymbolId.GetHashCode();
                }
                if (this.SymbolType != null)
                {
                    hashCode = (hashCode * 59) + this.SymbolType.GetHashCode();
                }
                if (this.Quantity != null)
                {
                    hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Price != null)
                {
                    hashCode = (hashCode * 59) + this.Price.GetHashCode();
                }
                if (this.AveragePrice != null)
                {
                    hashCode = (hashCode * 59) + this.AveragePrice.GetHashCode();
                }
                if (this.Pnl != null)
                {
                    hashCode = (hashCode * 59) + this.Pnl.GetHashCode();
                }
                if (this.ConvertedPnl != null)
                {
                    hashCode = (hashCode * 59) + this.ConvertedPnl.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.ConvertedValue != null)
                {
                    hashCode = (hashCode * 59) + this.ConvertedValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
