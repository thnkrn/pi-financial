/*
 * Exante Trade
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Pi.Client.ExanteTrade.Client.FileParameter;
using OpenAPIDateConverter = Pi.Client.ExanteTrade.Client.OpenAPIDateConverter;

namespace Pi.Client.ExanteTrade.Model
{
    /// <summary>
    /// AccountSummaryCurrency
    /// </summary>
    [DataContract(Name = "AccountSummaryCurrency")]
    public partial class AccountSummaryCurrency : IEquatable<AccountSummaryCurrency>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountSummaryCurrency" /> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="value">value.</param>
        /// <param name="convertedValue">convertedValue.</param>
        public AccountSummaryCurrency(string code = default(string), string value = default(string), string convertedValue = default(string))
        {
            this.Code = code;
            this.Value = value;
            this.ConvertedValue = convertedValue;
        }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets ConvertedValue
        /// </summary>
        [DataMember(Name = "convertedValue", EmitDefaultValue = false)]
        public string ConvertedValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountSummaryCurrency {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ConvertedValue: ").Append(ConvertedValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountSummaryCurrency);
        }

        /// <summary>
        /// Returns true if AccountSummaryCurrency instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountSummaryCurrency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountSummaryCurrency input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) &&
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) &&
                (
                    this.ConvertedValue == input.ConvertedValue ||
                    (this.ConvertedValue != null &&
                    this.ConvertedValue.Equals(input.ConvertedValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                if (this.ConvertedValue != null)
                {
                    hashCode = (hashCode * 59) + this.ConvertedValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
