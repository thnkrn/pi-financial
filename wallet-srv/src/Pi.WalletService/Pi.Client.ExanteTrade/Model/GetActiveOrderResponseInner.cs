/*
 * Exante Trade
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Pi.Client.ExanteTrade.Client.FileParameter;
using OpenAPIDateConverter = Pi.Client.ExanteTrade.Client.OpenAPIDateConverter;

namespace Pi.Client.ExanteTrade.Model
{
    /// <summary>
    /// GetActiveOrderResponseInner
    /// </summary>
    [DataContract(Name = "GetActiveOrderResponse_inner")]
    public partial class GetActiveOrderResponseInner : IEquatable<GetActiveOrderResponseInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetActiveOrderResponseInner" /> class.
        /// </summary>
        /// <param name="orderId">orderId.</param>
        /// <param name="placeTime">placeTime.</param>
        /// <param name="currentModificationId">currentModificationId.</param>
        /// <param name="accountId">accountId.</param>
        /// <param name="username">username.</param>
        /// <param name="orderState">orderState.</param>
        /// <param name="orderParameters">orderParameters.</param>
        public GetActiveOrderResponseInner(string orderId = default(string), string placeTime = default(string), string currentModificationId = default(string), string accountId = default(string), string username = default(string), GetActiveOrderResponseInnerOrderState orderState = default(GetActiveOrderResponseInnerOrderState), GetActiveOrderResponseInnerOrderParameters orderParameters = default(GetActiveOrderResponseInnerOrderParameters))
        {
            this.OrderId = orderId;
            this.PlaceTime = placeTime;
            this.CurrentModificationId = currentModificationId;
            this.AccountId = accountId;
            this.Username = username;
            this.OrderState = orderState;
            this.OrderParameters = orderParameters;
        }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name = "orderId", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets PlaceTime
        /// </summary>
        [DataMember(Name = "placeTime", EmitDefaultValue = false)]
        public string PlaceTime { get; set; }

        /// <summary>
        /// Gets or Sets CurrentModificationId
        /// </summary>
        [DataMember(Name = "currentModificationId", EmitDefaultValue = false)]
        public string CurrentModificationId { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets OrderState
        /// </summary>
        [DataMember(Name = "orderState", EmitDefaultValue = false)]
        public GetActiveOrderResponseInnerOrderState OrderState { get; set; }

        /// <summary>
        /// Gets or Sets OrderParameters
        /// </summary>
        [DataMember(Name = "orderParameters", EmitDefaultValue = false)]
        public GetActiveOrderResponseInnerOrderParameters OrderParameters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetActiveOrderResponseInner {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  PlaceTime: ").Append(PlaceTime).Append("\n");
            sb.Append("  CurrentModificationId: ").Append(CurrentModificationId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  OrderState: ").Append(OrderState).Append("\n");
            sb.Append("  OrderParameters: ").Append(OrderParameters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetActiveOrderResponseInner);
        }

        /// <summary>
        /// Returns true if GetActiveOrderResponseInner instances are equal
        /// </summary>
        /// <param name="input">Instance of GetActiveOrderResponseInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetActiveOrderResponseInner input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) &&
                (
                    this.PlaceTime == input.PlaceTime ||
                    (this.PlaceTime != null &&
                    this.PlaceTime.Equals(input.PlaceTime))
                ) &&
                (
                    this.CurrentModificationId == input.CurrentModificationId ||
                    (this.CurrentModificationId != null &&
                    this.CurrentModificationId.Equals(input.CurrentModificationId))
                ) &&
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) &&
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) &&
                (
                    this.OrderState == input.OrderState ||
                    (this.OrderState != null &&
                    this.OrderState.Equals(input.OrderState))
                ) &&
                (
                    this.OrderParameters == input.OrderParameters ||
                    (this.OrderParameters != null &&
                    this.OrderParameters.Equals(input.OrderParameters))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.PlaceTime != null)
                {
                    hashCode = (hashCode * 59) + this.PlaceTime.GetHashCode();
                }
                if (this.CurrentModificationId != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentModificationId.GetHashCode();
                }
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                if (this.OrderState != null)
                {
                    hashCode = (hashCode * 59) + this.OrderState.GetHashCode();
                }
                if (this.OrderParameters != null)
                {
                    hashCode = (hashCode * 59) + this.OrderParameters.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
