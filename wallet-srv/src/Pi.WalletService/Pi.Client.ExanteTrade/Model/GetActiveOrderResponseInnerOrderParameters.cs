/*
 * Exante Trade
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Pi.Client.ExanteTrade.Client.FileParameter;
using OpenAPIDateConverter = Pi.Client.ExanteTrade.Client.OpenAPIDateConverter;

namespace Pi.Client.ExanteTrade.Model
{
    /// <summary>
    /// GetActiveOrderResponseInnerOrderParameters
    /// </summary>
    [DataContract(Name = "GetActiveOrderResponse_inner_orderParameters")]
    public partial class GetActiveOrderResponseInnerOrderParameters : IEquatable<GetActiveOrderResponseInnerOrderParameters>, IValidatableObject
    {
        /// <summary>
        /// Defines Side
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SideEnum
        {
            /// <summary>
            /// Enum Buy for value: buy
            /// </summary>
            [EnumMember(Value = "buy")]
            Buy = 1,

            /// <summary>
            /// Enum Sell for value: sell
            /// </summary>
            [EnumMember(Value = "sell")]
            Sell = 2
        }


        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [DataMember(Name = "side", EmitDefaultValue = false)]
        public SideEnum? Side { get; set; }
        /// <summary>
        /// Defines OrderType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderTypeEnum
        {
            /// <summary>
            /// Enum Market for value: market
            /// </summary>
            [EnumMember(Value = "market")]
            Market = 1,

            /// <summary>
            /// Enum Limit for value: limit
            /// </summary>
            [EnumMember(Value = "limit")]
            Limit = 2,

            /// <summary>
            /// Enum Stop for value: stop
            /// </summary>
            [EnumMember(Value = "stop")]
            Stop = 3,

            /// <summary>
            /// Enum StopLimit for value: stop_limit
            /// </summary>
            [EnumMember(Value = "stop_limit")]
            StopLimit = 4,

            /// <summary>
            /// Enum Twap for value: twap
            /// </summary>
            [EnumMember(Value = "twap")]
            Twap = 5,

            /// <summary>
            /// Enum TrailingStop for value: trailing_stop
            /// </summary>
            [EnumMember(Value = "trailing_stop")]
            TrailingStop = 6,

            /// <summary>
            /// Enum Iceberg for value: iceberg
            /// </summary>
            [EnumMember(Value = "iceberg")]
            Iceberg = 7
        }


        /// <summary>
        /// Gets or Sets OrderType
        /// </summary>
        [DataMember(Name = "orderType", EmitDefaultValue = false)]
        public OrderTypeEnum? OrderType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetActiveOrderResponseInnerOrderParameters" /> class.
        /// </summary>
        /// <param name="side">side.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="ocoGroup">ocoGroup.</param>
        /// <param name="ifDoneParentId">ifDoneParentId.</param>
        /// <param name="duration">duration.</param>
        /// <param name="orderType">orderType.</param>
        /// <param name="stopPrice">stopPrice.</param>
        /// <param name="limitPrice">limitPrice.</param>
        /// <param name="partQuantity">partQuantity.</param>
        /// <param name="placeInterval">placeInterval.</param>
        /// <param name="priceDistance">priceDistance.</param>
        /// <param name="gttExpiration">gttExpiration.</param>
        /// <param name="instrument">instrument.</param>
        /// <param name="symbolId">symbolId.</param>
        public GetActiveOrderResponseInnerOrderParameters(SideEnum? side = default(SideEnum?), string quantity = default(string), string ocoGroup = default(string), string ifDoneParentId = default(string), string duration = default(string), OrderTypeEnum? orderType = default(OrderTypeEnum?), string stopPrice = default(string), string limitPrice = default(string), string partQuantity = default(string), long placeInterval = default(long), string priceDistance = default(string), string gttExpiration = default(string), string instrument = default(string), string symbolId = default(string))
        {
            this.Side = side;
            this.Quantity = quantity;
            this.OcoGroup = ocoGroup;
            this.IfDoneParentId = ifDoneParentId;
            this.Duration = duration;
            this.OrderType = orderType;
            this.StopPrice = stopPrice;
            this.LimitPrice = limitPrice;
            this.PartQuantity = partQuantity;
            this.PlaceInterval = placeInterval;
            this.PriceDistance = priceDistance;
            this.GttExpiration = gttExpiration;
            this.Instrument = instrument;
            this.SymbolId = symbolId;
        }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public string Quantity { get; set; }

        /// <summary>
        /// Gets or Sets OcoGroup
        /// </summary>
        [DataMember(Name = "ocoGroup", EmitDefaultValue = false)]
        public string OcoGroup { get; set; }

        /// <summary>
        /// Gets or Sets IfDoneParentId
        /// </summary>
        [DataMember(Name = "ifDoneParentId", EmitDefaultValue = false)]
        public string IfDoneParentId { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public string Duration { get; set; }

        /// <summary>
        /// Gets or Sets StopPrice
        /// </summary>
        [DataMember(Name = "stopPrice", EmitDefaultValue = false)]
        public string StopPrice { get; set; }

        /// <summary>
        /// Gets or Sets LimitPrice
        /// </summary>
        [DataMember(Name = "limitPrice", EmitDefaultValue = false)]
        public string LimitPrice { get; set; }

        /// <summary>
        /// Gets or Sets PartQuantity
        /// </summary>
        [DataMember(Name = "partQuantity", EmitDefaultValue = false)]
        public string PartQuantity { get; set; }

        /// <summary>
        /// Gets or Sets PlaceInterval
        /// </summary>
        [DataMember(Name = "placeInterval", EmitDefaultValue = false)]
        public long PlaceInterval { get; set; }

        /// <summary>
        /// Gets or Sets PriceDistance
        /// </summary>
        [DataMember(Name = "priceDistance", EmitDefaultValue = false)]
        public string PriceDistance { get; set; }

        /// <summary>
        /// Gets or Sets GttExpiration
        /// </summary>
        [DataMember(Name = "gttExpiration", EmitDefaultValue = false)]
        public string GttExpiration { get; set; }

        /// <summary>
        /// Gets or Sets Instrument
        /// </summary>
        [DataMember(Name = "instrument", EmitDefaultValue = false)]
        public string Instrument { get; set; }

        /// <summary>
        /// Gets or Sets SymbolId
        /// </summary>
        [DataMember(Name = "symbolId", EmitDefaultValue = false)]
        public string SymbolId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetActiveOrderResponseInnerOrderParameters {\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  OcoGroup: ").Append(OcoGroup).Append("\n");
            sb.Append("  IfDoneParentId: ").Append(IfDoneParentId).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  StopPrice: ").Append(StopPrice).Append("\n");
            sb.Append("  LimitPrice: ").Append(LimitPrice).Append("\n");
            sb.Append("  PartQuantity: ").Append(PartQuantity).Append("\n");
            sb.Append("  PlaceInterval: ").Append(PlaceInterval).Append("\n");
            sb.Append("  PriceDistance: ").Append(PriceDistance).Append("\n");
            sb.Append("  GttExpiration: ").Append(GttExpiration).Append("\n");
            sb.Append("  Instrument: ").Append(Instrument).Append("\n");
            sb.Append("  SymbolId: ").Append(SymbolId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetActiveOrderResponseInnerOrderParameters);
        }

        /// <summary>
        /// Returns true if GetActiveOrderResponseInnerOrderParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of GetActiveOrderResponseInnerOrderParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetActiveOrderResponseInnerOrderParameters input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.Side == input.Side ||
                    this.Side.Equals(input.Side)
                ) &&
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) &&
                (
                    this.OcoGroup == input.OcoGroup ||
                    (this.OcoGroup != null &&
                    this.OcoGroup.Equals(input.OcoGroup))
                ) &&
                (
                    this.IfDoneParentId == input.IfDoneParentId ||
                    (this.IfDoneParentId != null &&
                    this.IfDoneParentId.Equals(input.IfDoneParentId))
                ) &&
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) &&
                (
                    this.OrderType == input.OrderType ||
                    this.OrderType.Equals(input.OrderType)
                ) &&
                (
                    this.StopPrice == input.StopPrice ||
                    (this.StopPrice != null &&
                    this.StopPrice.Equals(input.StopPrice))
                ) &&
                (
                    this.LimitPrice == input.LimitPrice ||
                    (this.LimitPrice != null &&
                    this.LimitPrice.Equals(input.LimitPrice))
                ) &&
                (
                    this.PartQuantity == input.PartQuantity ||
                    (this.PartQuantity != null &&
                    this.PartQuantity.Equals(input.PartQuantity))
                ) &&
                (
                    this.PlaceInterval == input.PlaceInterval ||
                    this.PlaceInterval.Equals(input.PlaceInterval)
                ) &&
                (
                    this.PriceDistance == input.PriceDistance ||
                    (this.PriceDistance != null &&
                    this.PriceDistance.Equals(input.PriceDistance))
                ) &&
                (
                    this.GttExpiration == input.GttExpiration ||
                    (this.GttExpiration != null &&
                    this.GttExpiration.Equals(input.GttExpiration))
                ) &&
                (
                    this.Instrument == input.Instrument ||
                    (this.Instrument != null &&
                    this.Instrument.Equals(input.Instrument))
                ) &&
                (
                    this.SymbolId == input.SymbolId ||
                    (this.SymbolId != null &&
                    this.SymbolId.Equals(input.SymbolId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Side.GetHashCode();
                if (this.Quantity != null)
                {
                    hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                }
                if (this.OcoGroup != null)
                {
                    hashCode = (hashCode * 59) + this.OcoGroup.GetHashCode();
                }
                if (this.IfDoneParentId != null)
                {
                    hashCode = (hashCode * 59) + this.IfDoneParentId.GetHashCode();
                }
                if (this.Duration != null)
                {
                    hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderType.GetHashCode();
                if (this.StopPrice != null)
                {
                    hashCode = (hashCode * 59) + this.StopPrice.GetHashCode();
                }
                if (this.LimitPrice != null)
                {
                    hashCode = (hashCode * 59) + this.LimitPrice.GetHashCode();
                }
                if (this.PartQuantity != null)
                {
                    hashCode = (hashCode * 59) + this.PartQuantity.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PlaceInterval.GetHashCode();
                if (this.PriceDistance != null)
                {
                    hashCode = (hashCode * 59) + this.PriceDistance.GetHashCode();
                }
                if (this.GttExpiration != null)
                {
                    hashCode = (hashCode * 59) + this.GttExpiration.GetHashCode();
                }
                if (this.Instrument != null)
                {
                    hashCode = (hashCode * 59) + this.Instrument.GetHashCode();
                }
                if (this.SymbolId != null)
                {
                    hashCode = (hashCode * 59) + this.SymbolId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
