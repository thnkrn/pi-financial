/*
 * Exante User Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Pi.Client.ExanteUserManagement.Client.FileParameter;
using OpenAPIDateConverter = Pi.Client.ExanteUserManagement.Client.OpenAPIDateConverter;

namespace Pi.Client.ExanteUserManagement.Model
{
    /// <summary>
    /// TransferResponse
    /// </summary>
    [DataContract(Name = "TransferResponse")]
    public partial class TransferResponse : IEquatable<TransferResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferResponse" /> class.
        /// </summary>
        /// <param name="accountId">accountId.</param>
        /// <param name="secondAccount">secondAccount.</param>
        /// <param name="asset">asset.</param>
        /// <param name="amount">amount.</param>
        /// <param name="sequenceId">sequenceId.</param>
        /// <param name="parentUuid">parentUuid.</param>
        /// <param name="uuid">uuid.</param>
        /// <param name="success">success.</param>
        public TransferResponse(string accountId = default(string), string secondAccount = default(string), string asset = default(string), decimal amount = default(decimal), string sequenceId = default(string), string parentUuid = default(string), string uuid = default(string), bool success = default(bool))
        {
            this.AccountId = accountId;
            this.SecondAccount = secondAccount;
            this.Asset = asset;
            this.Amount = amount;
            this.SequenceId = sequenceId;
            this.ParentUuid = parentUuid;
            this.Uuid = uuid;
            this.Success = success;
        }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets SecondAccount
        /// </summary>
        [DataMember(Name = "second_account", EmitDefaultValue = false)]
        public string SecondAccount { get; set; }

        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name = "asset", EmitDefaultValue = false)]
        public string Asset { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Gets or Sets SequenceId
        /// </summary>
        [DataMember(Name = "sequenceId", EmitDefaultValue = false)]
        public string SequenceId { get; set; }

        /// <summary>
        /// Gets or Sets ParentUuid
        /// </summary>
        [DataMember(Name = "parentUuid", EmitDefaultValue = false)]
        public string ParentUuid { get; set; }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Gets or Sets Success
        /// </summary>
        [DataMember(Name = "success", EmitDefaultValue = true)]
        public bool Success { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransferResponse {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  SecondAccount: ").Append(SecondAccount).Append("\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  SequenceId: ").Append(SequenceId).Append("\n");
            sb.Append("  ParentUuid: ").Append(ParentUuid).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransferResponse);
        }

        /// <summary>
        /// Returns true if TransferResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TransferResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransferResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) &&
                (
                    this.SecondAccount == input.SecondAccount ||
                    (this.SecondAccount != null &&
                    this.SecondAccount.Equals(input.SecondAccount))
                ) &&
                (
                    this.Asset == input.Asset ||
                    (this.Asset != null &&
                    this.Asset.Equals(input.Asset))
                ) &&
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) &&
                (
                    this.SequenceId == input.SequenceId ||
                    (this.SequenceId != null &&
                    this.SequenceId.Equals(input.SequenceId))
                ) &&
                (
                    this.ParentUuid == input.ParentUuid ||
                    (this.ParentUuid != null &&
                    this.ParentUuid.Equals(input.ParentUuid))
                ) &&
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) &&
                (
                    this.Success == input.Success ||
                    this.Success.Equals(input.Success)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.SecondAccount != null)
                {
                    hashCode = (hashCode * 59) + this.SecondAccount.GetHashCode();
                }
                if (this.Asset != null)
                {
                    hashCode = (hashCode * 59) + this.Asset.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.SequenceId != null)
                {
                    hashCode = (hashCode * 59) + this.SequenceId.GetHashCode();
                }
                if (this.ParentUuid != null)
                {
                    hashCode = (hashCode * 59) + this.ParentUuid.GetHashCode();
                }
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Success.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
