/*
 * Cgs Bank
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Pi.Client.CgsBank.Client.FileParameter;
using OpenAPIDateConverter = Pi.Client.CgsBank.Client.OpenAPIDateConverter;

namespace Pi.Client.CgsBank.Model
{
    /// <summary>
    /// DDPaymentResponseData
    /// </summary>
    [DataContract(Name = "DDPaymentResponse_data")]
    public partial class DDPaymentResponseData : IEquatable<DDPaymentResponseData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DDPaymentResponseData" /> class.
        /// </summary>
        /// <param name="transactionNo">transactionNo.</param>
        /// <param name="transactionRefCode">transactionRefCode.</param>
        /// <param name="amount">amount.</param>
        /// <param name="externalRefTime">externalRefTime.</param>
        /// <param name="externalRefCode">externalRefCode.</param>
        public DDPaymentResponseData(string transactionNo = default(string), string transactionRefCode = default(string), decimal amount = default(decimal), string externalRefTime = default(string), string externalRefCode = default(string))
        {
            this.TransactionNo = transactionNo;
            this.TransactionRefCode = transactionRefCode;
            this.Amount = amount;
            this.ExternalRefTime = externalRefTime;
            this.ExternalRefCode = externalRefCode;
        }

        /// <summary>
        /// Gets or Sets TransactionNo
        /// </summary>
        [DataMember(Name = "transactionNo", EmitDefaultValue = false)]
        public string TransactionNo { get; set; }

        /// <summary>
        /// Gets or Sets TransactionRefCode
        /// </summary>
        [DataMember(Name = "transactionRefCode", EmitDefaultValue = false)]
        public string TransactionRefCode { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Gets or Sets ExternalRefTime
        /// </summary>
        [DataMember(Name = "externalRefTime", EmitDefaultValue = false)]
        public string ExternalRefTime { get; set; }

        /// <summary>
        /// Gets or Sets ExternalRefCode
        /// </summary>
        [DataMember(Name = "externalRefCode", EmitDefaultValue = false)]
        public string ExternalRefCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DDPaymentResponseData {\n");
            sb.Append("  TransactionNo: ").Append(TransactionNo).Append("\n");
            sb.Append("  TransactionRefCode: ").Append(TransactionRefCode).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ExternalRefTime: ").Append(ExternalRefTime).Append("\n");
            sb.Append("  ExternalRefCode: ").Append(ExternalRefCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DDPaymentResponseData);
        }

        /// <summary>
        /// Returns true if DDPaymentResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of DDPaymentResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DDPaymentResponseData input)
        {
            if (input == null)
            {
                return false;
            }
            return
                (
                    this.TransactionNo == input.TransactionNo ||
                    (this.TransactionNo != null &&
                    this.TransactionNo.Equals(input.TransactionNo))
                ) &&
                (
                    this.TransactionRefCode == input.TransactionRefCode ||
                    (this.TransactionRefCode != null &&
                    this.TransactionRefCode.Equals(input.TransactionRefCode))
                ) &&
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                ) &&
                (
                    this.ExternalRefTime == input.ExternalRefTime ||
                    (this.ExternalRefTime != null &&
                    this.ExternalRefTime.Equals(input.ExternalRefTime))
                ) &&
                (
                    this.ExternalRefCode == input.ExternalRefCode ||
                    (this.ExternalRefCode != null &&
                    this.ExternalRefCode.Equals(input.ExternalRefCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionNo != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionNo.GetHashCode();
                }
                if (this.TransactionRefCode != null)
                {
                    hashCode = (hashCode * 59) + this.TransactionRefCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                if (this.ExternalRefTime != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalRefTime.GetHashCode();
                }
                if (this.ExternalRefCode != null)
                {
                    hashCode = (hashCode * 59) + this.ExternalRefCode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
