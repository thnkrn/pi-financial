/*
MarketData Migration Proxy API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"encoding/json"
)

// checks if the PiMarketDataDomainModelsResponseInstrumentCategoryList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PiMarketDataDomainModelsResponseInstrumentCategoryList{}

// PiMarketDataDomainModelsResponseInstrumentCategoryList struct for PiMarketDataDomainModelsResponseInstrumentCategoryList
type PiMarketDataDomainModelsResponseInstrumentCategoryList struct {
	Order              *int32                                                 `json:"order,omitempty"`
	InstrumentType     NullableString                                         `json:"instrumentType,omitempty"`
	InstrumentCategory NullableString                                         `json:"instrumentCategory,omitempty"`
	InstrumentList     []PiMarketDataDomainModelsResponseFilterInstrumentList `json:"instrumentList,omitempty"`
}

// NewPiMarketDataDomainModelsResponseInstrumentCategoryList instantiates a new PiMarketDataDomainModelsResponseInstrumentCategoryList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPiMarketDataDomainModelsResponseInstrumentCategoryList() *PiMarketDataDomainModelsResponseInstrumentCategoryList {
	this := PiMarketDataDomainModelsResponseInstrumentCategoryList{}
	return &this
}

// NewPiMarketDataDomainModelsResponseInstrumentCategoryListWithDefaults instantiates a new PiMarketDataDomainModelsResponseInstrumentCategoryList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPiMarketDataDomainModelsResponseInstrumentCategoryListWithDefaults() *PiMarketDataDomainModelsResponseInstrumentCategoryList {
	this := PiMarketDataDomainModelsResponseInstrumentCategoryList{}
	return &this
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *PiMarketDataDomainModelsResponseInstrumentCategoryList) GetOrder() int32 {
	if o == nil || IsNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiMarketDataDomainModelsResponseInstrumentCategoryList) GetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *PiMarketDataDomainModelsResponseInstrumentCategoryList) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *PiMarketDataDomainModelsResponseInstrumentCategoryList) SetOrder(v int32) {
	o.Order = &v
}

// GetInstrumentType returns the InstrumentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiMarketDataDomainModelsResponseInstrumentCategoryList) GetInstrumentType() string {
	if o == nil || IsNil(o.InstrumentType.Get()) {
		var ret string
		return ret
	}
	return *o.InstrumentType.Get()
}

// GetInstrumentTypeOk returns a tuple with the InstrumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiMarketDataDomainModelsResponseInstrumentCategoryList) GetInstrumentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InstrumentType.Get(), o.InstrumentType.IsSet()
}

// HasInstrumentType returns a boolean if a field has been set.
func (o *PiMarketDataDomainModelsResponseInstrumentCategoryList) HasInstrumentType() bool {
	if o != nil && o.InstrumentType.IsSet() {
		return true
	}

	return false
}

// SetInstrumentType gets a reference to the given NullableString and assigns it to the InstrumentType field.
func (o *PiMarketDataDomainModelsResponseInstrumentCategoryList) SetInstrumentType(v string) {
	o.InstrumentType.Set(&v)
}

// SetInstrumentTypeNil sets the value for InstrumentType to be an explicit nil
func (o *PiMarketDataDomainModelsResponseInstrumentCategoryList) SetInstrumentTypeNil() {
	o.InstrumentType.Set(nil)
}

// UnsetInstrumentType ensures that no value is present for InstrumentType, not even an explicit nil
func (o *PiMarketDataDomainModelsResponseInstrumentCategoryList) UnsetInstrumentType() {
	o.InstrumentType.Unset()
}

// GetInstrumentCategory returns the InstrumentCategory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiMarketDataDomainModelsResponseInstrumentCategoryList) GetInstrumentCategory() string {
	if o == nil || IsNil(o.InstrumentCategory.Get()) {
		var ret string
		return ret
	}
	return *o.InstrumentCategory.Get()
}

// GetInstrumentCategoryOk returns a tuple with the InstrumentCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiMarketDataDomainModelsResponseInstrumentCategoryList) GetInstrumentCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InstrumentCategory.Get(), o.InstrumentCategory.IsSet()
}

// HasInstrumentCategory returns a boolean if a field has been set.
func (o *PiMarketDataDomainModelsResponseInstrumentCategoryList) HasInstrumentCategory() bool {
	if o != nil && o.InstrumentCategory.IsSet() {
		return true
	}

	return false
}

// SetInstrumentCategory gets a reference to the given NullableString and assigns it to the InstrumentCategory field.
func (o *PiMarketDataDomainModelsResponseInstrumentCategoryList) SetInstrumentCategory(v string) {
	o.InstrumentCategory.Set(&v)
}

// SetInstrumentCategoryNil sets the value for InstrumentCategory to be an explicit nil
func (o *PiMarketDataDomainModelsResponseInstrumentCategoryList) SetInstrumentCategoryNil() {
	o.InstrumentCategory.Set(nil)
}

// UnsetInstrumentCategory ensures that no value is present for InstrumentCategory, not even an explicit nil
func (o *PiMarketDataDomainModelsResponseInstrumentCategoryList) UnsetInstrumentCategory() {
	o.InstrumentCategory.Unset()
}

// GetInstrumentList returns the InstrumentList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiMarketDataDomainModelsResponseInstrumentCategoryList) GetInstrumentList() []PiMarketDataDomainModelsResponseFilterInstrumentList {
	if o == nil {
		var ret []PiMarketDataDomainModelsResponseFilterInstrumentList
		return ret
	}
	return o.InstrumentList
}

// GetInstrumentListOk returns a tuple with the InstrumentList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiMarketDataDomainModelsResponseInstrumentCategoryList) GetInstrumentListOk() ([]PiMarketDataDomainModelsResponseFilterInstrumentList, bool) {
	if o == nil || IsNil(o.InstrumentList) {
		return nil, false
	}
	return o.InstrumentList, true
}

// HasInstrumentList returns a boolean if a field has been set.
func (o *PiMarketDataDomainModelsResponseInstrumentCategoryList) HasInstrumentList() bool {
	if o != nil && !IsNil(o.InstrumentList) {
		return true
	}

	return false
}

// SetInstrumentList gets a reference to the given []PiMarketDataDomainModelsResponseFilterInstrumentList and assigns it to the InstrumentList field.
func (o *PiMarketDataDomainModelsResponseInstrumentCategoryList) SetInstrumentList(v []PiMarketDataDomainModelsResponseFilterInstrumentList) {
	o.InstrumentList = v
}

func (o PiMarketDataDomainModelsResponseInstrumentCategoryList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PiMarketDataDomainModelsResponseInstrumentCategoryList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	if o.InstrumentType.IsSet() {
		toSerialize["instrumentType"] = o.InstrumentType.Get()
	}
	if o.InstrumentCategory.IsSet() {
		toSerialize["instrumentCategory"] = o.InstrumentCategory.Get()
	}
	if o.InstrumentList != nil {
		toSerialize["instrumentList"] = o.InstrumentList
	}
	return toSerialize, nil
}

type NullablePiMarketDataDomainModelsResponseInstrumentCategoryList struct {
	value *PiMarketDataDomainModelsResponseInstrumentCategoryList
	isSet bool
}

func (v NullablePiMarketDataDomainModelsResponseInstrumentCategoryList) Get() *PiMarketDataDomainModelsResponseInstrumentCategoryList {
	return v.value
}

func (v *NullablePiMarketDataDomainModelsResponseInstrumentCategoryList) Set(val *PiMarketDataDomainModelsResponseInstrumentCategoryList) {
	v.value = val
	v.isSet = true
}

func (v NullablePiMarketDataDomainModelsResponseInstrumentCategoryList) IsSet() bool {
	return v.isSet
}

func (v *NullablePiMarketDataDomainModelsResponseInstrumentCategoryList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePiMarketDataDomainModelsResponseInstrumentCategoryList(val *PiMarketDataDomainModelsResponseInstrumentCategoryList) *NullablePiMarketDataDomainModelsResponseInstrumentCategoryList {
	return &NullablePiMarketDataDomainModelsResponseInstrumentCategoryList{value: val, isSet: true}
}

func (v NullablePiMarketDataDomainModelsResponseInstrumentCategoryList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePiMarketDataDomainModelsResponseInstrumentCategoryList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
