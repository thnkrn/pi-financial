/*
MarketData Migration Proxy API

Testing ProxyAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package go_client

import (
	"context"
	"testing"

	openapiclient "github.com/pi-financial/market-data-migrationproxy-srv/go-client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_go_client_ProxyAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProxyAPIService PathDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var path string

		httpRes, err := apiClient.ProxyAPI.PathDelete(context.Background(), path).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProxyAPIService PathGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var path string

		httpRes, err := apiClient.ProxyAPI.PathGet(context.Background(), path).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProxyAPIService PathHead", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var path string

		httpRes, err := apiClient.ProxyAPI.PathHead(context.Background(), path).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProxyAPIService PathOptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var path string

		httpRes, err := apiClient.ProxyAPI.PathOptions(context.Background(), path).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProxyAPIService PathPatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var path string

		httpRes, err := apiClient.ProxyAPI.PathPatch(context.Background(), path).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProxyAPIService PathPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var path string

		httpRes, err := apiClient.ProxyAPI.PathPost(context.Background(), path).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProxyAPIService PathPut", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var path string

		httpRes, err := apiClient.ProxyAPI.PathPut(context.Background(), path).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
