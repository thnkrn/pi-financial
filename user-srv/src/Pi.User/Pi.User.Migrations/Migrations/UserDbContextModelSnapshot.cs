// <auto-generated />
using System;
using System.ComponentModel.DataAnnotations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pi.User.Infrastructure;

#nullable disable

namespace Pi.User.Migrations.Migrations
{
    [DbContext(typeof(UserDbContext))]
    partial class UserDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.AddressAggregate.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Building")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("building")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("Country")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("country")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("country_code");

                    b.Property<string>("District")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("district")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("Floor")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("floor")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("HomeNo")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("home_no")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("Place")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("place")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("Province")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("province")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("ProvinceCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("province_code");

                    b.Property<string>("Road")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("road")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<string>("Soi")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("soi")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("SubDistrict")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("sub_district")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("Town")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("town")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<string>("Village")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("village")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_addresses_user_id");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.BankAccountAggregate.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("account_name");

                    b.Property<string>("AccountNameHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("account_name_hash");

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("account_no");

                    b.Property<string>("AccountNoHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("account_no_hash");

                    b.Property<string>("BankBranchCode")
                        .HasColumnType("longtext")
                        .HasColumnName("bank_branch_code");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("bank_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_bank_accounts");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_bank_accounts_user_id");

                    b.ToTable("bank_accounts", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.BankAccountAggregate.BankAccountV2", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("account_name")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("account_no")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<DateTime?>("AtsEffectiveDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ats_effective_date");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("bank_code");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("branch_code");

                    b.Property<string>("HashedAccountNo")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("hashed_account_no");

                    b.Property<string>("PaymentToken")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("payment_token");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_bank_account_v2s");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_bank_account_v2s_user_id");

                    b.HasIndex("HashedAccountNo", "BankCode")
                        .IsUnique()
                        .HasDatabaseName("ix_bank_account_v2s_hashed_account_no_bank_code");

                    b.ToTable("bank_account_v2s", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.DocumentAggregate.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("document_type");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("file_name");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("file_url");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_documents");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_documents_user_id");

                    b.ToTable("documents", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.ExamAggregate.Examination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("char(36)")
                        .HasColumnName("exam_id");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("exam_name");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expired_at");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_examinations");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_examinations_user_id");

                    b.ToTable("examinations", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.ExternalAccountAggregate.ExternalAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int")
                        .HasColumnName("provider_id");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<Guid>("TradeAccountId")
                        .HasColumnType("char(36)")
                        .HasColumnName("trade_account_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_external_accounts");

                    b.HasIndex("TradeAccountId", "ProviderId")
                        .IsUnique()
                        .HasDatabaseName("ix_external_accounts_trade_account_id_provider_id");

                    b.ToTable("external_accounts", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.KycAggregate.Kyc", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("date")
                        .HasColumnName("expired_date");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("date")
                        .HasColumnName("review_date");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_kycs");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_kycs_user_id");

                    b.ToTable("kycs", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.SuitabilityTestAggregate.SuitabilityTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("date")
                        .HasColumnName("expired_date");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("grade");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("date")
                        .HasColumnName("review_date");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<int>("Score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_suitability_tests");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_suitability_tests_user_id");

                    b.ToTable("suitability_tests", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.TradeAccountAggregate.TradeAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("account_number");

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("account_status");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("account_type");

                    b.Property<string>("AccountTypeCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("account_type_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<decimal>("CreditLine")
                        .HasPrecision(16, 2)
                        .HasColumnType("decimal(16,2)")
                        .HasColumnName("credit_line");

                    b.Property<string>("CreditLineCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("credit_line_currency");

                    b.Property<DateOnly?>("EffectiveDate")
                        .HasColumnType("date")
                        .HasColumnName("effective_date");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("ExchangeMarketId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("exchange_market_id");

                    b.Property<string>("MarketingId")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("marketing_id");

                    b.Property<DateOnly?>("OpenDate")
                        .HasColumnType("date")
                        .HasColumnName("open_date");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<string>("SaleLicense")
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("sale_license");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserAccountId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("user_account_id");

                    b.HasKey("Id")
                        .HasName("pk_trade_accounts");

                    b.HasIndex("UserAccountId")
                        .HasDatabaseName("ix_trade_accounts_user_account_id");

                    b.ToTable("trade_accounts", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.TransactionIdAggregate.TransactionId", b =>
                {
                    b.Property<string>("Prefix")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("prefix");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("customer_code");

                    b.Property<string>("ReferId")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("refer_id");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<int>("Sequence")
                        .HasColumnType("int")
                        .HasColumnName("sequence");

                    b.HasKey("Prefix", "Date")
                        .HasName("pk_transaction_ids");

                    b.HasIndex("ReferId")
                        .HasDatabaseName("ix_transaction_ids_refer_id");

                    b.ToTable("transaction_ids", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserAccountAggregate.UserAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserAccountType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("user_account_type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_accounts");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_accounts_user_id");

                    b.ToTable("user_accounts", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.CustCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("customer_code");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserInfoId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_info_id");

                    b.HasKey("Id")
                        .HasName("pk_cust_codes");

                    b.HasIndex("CustomerCode")
                        .IsUnique()
                        .HasDatabaseName("ix_cust_codes_customer_code");

                    b.HasIndex("UserInfoId")
                        .HasDatabaseName("ix_cust_codes_user_info_id");

                    b.ToTable("cust_codes", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("device_id");

                    b.Property<string>("DeviceIdentifier")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("device_identifier");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("device_token");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("language");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("platform");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<string>("SubscriptionIdentifier")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("subscription_identifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserInfoId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_info_id");

                    b.HasKey("Id")
                        .HasName("pk_devices");

                    b.HasIndex("UserInfoId")
                        .HasDatabaseName("ix_devices_user_info_id");

                    b.ToTable("devices", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.NotificationPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DeviceForeignKey")
                        .HasColumnType("char(36)")
                        .HasColumnName("device_foreign_key");

                    b.Property<bool>("Important")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("important");

                    b.Property<bool>("Market")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("market");

                    b.Property<bool>("Order")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("order");

                    b.Property<bool>("Portfolio")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("portfolio");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserInfoId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_info_id");

                    b.Property<bool>("Wallet")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("wallet");

                    b.HasKey("Id")
                        .HasName("pk_notification_preferences");

                    b.HasIndex("DeviceForeignKey")
                        .IsUnique()
                        .HasDatabaseName("ix_notification_preferences_device_foreign_key");

                    b.HasIndex("UserInfoId")
                        .HasDatabaseName("ix_notification_preferences_user_info_id");

                    b.ToTable("notification_preferences", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.TradingAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("AcctCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("acct_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<string>("TradingAccountId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("trading_account_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserInfoId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_info_id");

                    b.HasKey("Id")
                        .HasName("pk_trading_accounts");

                    b.HasIndex("TradingAccountId")
                        .HasDatabaseName("ix_trading_accounts_trading_account_id");

                    b.HasIndex("UserInfoId")
                        .HasDatabaseName("ix_trading_accounts_user_info_id");

                    b.ToTable("trading_accounts", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("char(36)")
                        .HasColumnName("address_id");

                    b.Property<string>("CitizenId")
                        .HasColumnType("longtext")
                        .HasColumnName("citizen_id")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("CitizenIdHash")
                        .HasColumnType("longtext")
                        .HasColumnName("citizen_id_hash");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("customer_id");

                    b.Property<string>("DateOfBirth")
                        .HasColumnType("longtext")
                        .HasColumnName("date_of_birth")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("EmailHash")
                        .HasColumnType("longtext")
                        .HasColumnName("email_hash");

                    b.Property<string>("FirstnameEn")
                        .HasColumnType("longtext")
                        .HasColumnName("firstname_en")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("FirstnameTh")
                        .HasColumnType("longtext")
                        .HasColumnName("firstname_th")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("GlobalAccount")
                        .HasColumnType("longtext")
                        .HasColumnName("global_account");

                    b.Property<Guid?>("KycId")
                        .HasColumnType("char(36)")
                        .HasColumnName("kyc_id");

                    b.Property<string>("LastnameEn")
                        .HasColumnType("longtext")
                        .HasColumnName("lastname_en")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("LastnameTh")
                        .HasColumnType("longtext")
                        .HasColumnName("lastname_th")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("PhoneNumberHash")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone_number_hash");

                    b.Property<string>("PlaceOfBirthCity")
                        .HasColumnType("longtext")
                        .HasColumnName("place_of_birth_city");

                    b.Property<string>("PlaceOfBirthCountry")
                        .HasColumnType("longtext")
                        .HasColumnName("place_of_birth_country");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("WealthType")
                        .HasColumnType("longtext")
                        .HasColumnName("wealth_type");

                    b.HasKey("Id")
                        .HasName("pk_user_infos");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_user_infos_address_id");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_infos_customer_id");

                    b.HasIndex("KycId")
                        .HasDatabaseName("ix_user_infos_kyc_id");

                    b.HasIndex("PhoneNumberHash")
                        .IsUnique()
                        .HasDatabaseName("ix_user_infos_phone_number_hash");

                    b.ToTable("user_infos", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.BankAccountAggregate.BankAccount", b =>
                {
                    b.HasOne("Pi.User.Domain.AggregatesModel.UserInfoAggregate.UserInfo", "User")
                        .WithMany("BankAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bank_accounts_user_infos_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.BankAccountAggregate.BankAccountV2", b =>
                {
                    b.HasOne("Pi.User.Domain.AggregatesModel.UserInfoAggregate.UserInfo", null)
                        .WithMany("BankAccountsV2")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bank_account_v2s_user_infos_user_id");
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.DocumentAggregate.Document", b =>
                {
                    b.HasOne("Pi.User.Domain.AggregatesModel.UserInfoAggregate.UserInfo", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_documents_user_infos_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.ExamAggregate.Examination", b =>
                {
                    b.HasOne("Pi.User.Domain.AggregatesModel.UserInfoAggregate.UserInfo", "User")
                        .WithMany("Examinations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_examinations_user_infos_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.ExternalAccountAggregate.ExternalAccount", b =>
                {
                    b.HasOne("Pi.User.Domain.AggregatesModel.TradeAccountAggregate.TradeAccount", null)
                        .WithMany("ExternalAccounts")
                        .HasForeignKey("TradeAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_external_accounts_trade_accounts_trade_account_id");
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.SuitabilityTestAggregate.SuitabilityTest", b =>
                {
                    b.HasOne("Pi.User.Domain.AggregatesModel.UserInfoAggregate.UserInfo", null)
                        .WithMany("SuitabilityTests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_suitability_tests_user_infos_user_id");
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.TradeAccountAggregate.TradeAccount", b =>
                {
                    b.HasOne("Pi.User.Domain.AggregatesModel.UserAccountAggregate.UserAccount", null)
                        .WithMany("TradeAccounts")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trade_accounts_user_accounts_user_account_id");
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserAccountAggregate.UserAccount", b =>
                {
                    b.HasOne("Pi.User.Domain.AggregatesModel.UserInfoAggregate.UserInfo", null)
                        .WithMany("UserAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_accounts_user_infos_user_id");
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.CustCode", b =>
                {
                    b.HasOne("Pi.User.Domain.AggregatesModel.UserInfoAggregate.UserInfo", "UserInfo")
                        .WithMany("CustCodes")
                        .HasForeignKey("UserInfoId")
                        .HasConstraintName("fk_cust_codes_user_infos_user_info_id");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.Device", b =>
                {
                    b.HasOne("Pi.User.Domain.AggregatesModel.UserInfoAggregate.UserInfo", "UserInfo")
                        .WithMany("Devices")
                        .HasForeignKey("UserInfoId")
                        .HasConstraintName("fk_devices_user_infos_user_info_id");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.NotificationPreference", b =>
                {
                    b.HasOne("Pi.User.Domain.AggregatesModel.UserInfoAggregate.Device", null)
                        .WithOne("NotificationPreference")
                        .HasForeignKey("Pi.User.Domain.AggregatesModel.UserInfoAggregate.NotificationPreference", "DeviceForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_preferences_devices_device_foreign_key");

                    b.HasOne("Pi.User.Domain.AggregatesModel.UserInfoAggregate.UserInfo", "UserInfo")
                        .WithMany("NotificationPreferences")
                        .HasForeignKey("UserInfoId")
                        .HasConstraintName("fk_notification_preferences_user_infos_user_info_id");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.TradingAccount", b =>
                {
                    b.HasOne("Pi.User.Domain.AggregatesModel.UserInfoAggregate.UserInfo", "UserInfo")
                        .WithMany("TradingAccounts")
                        .HasForeignKey("UserInfoId")
                        .HasConstraintName("fk_trading_accounts_user_infos_user_info_id");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.UserInfo", b =>
                {
                    b.HasOne("Pi.User.Domain.AggregatesModel.AddressAggregate.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_user_infos_addresses_address_id");

                    b.HasOne("Pi.User.Domain.AggregatesModel.KycAggregate.Kyc", "Kyc")
                        .WithMany()
                        .HasForeignKey("KycId")
                        .HasConstraintName("fk_user_infos_kycs_kyc_id");

                    b.Navigation("Address");

                    b.Navigation("Kyc");
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.TradeAccountAggregate.TradeAccount", b =>
                {
                    b.Navigation("ExternalAccounts");
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserAccountAggregate.UserAccount", b =>
                {
                    b.Navigation("TradeAccounts");
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.Device", b =>
                {
                    b.Navigation("NotificationPreference")
                        .IsRequired();
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.UserInfo", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("BankAccountsV2");

                    b.Navigation("CustCodes");

                    b.Navigation("Devices");

                    b.Navigation("Documents");

                    b.Navigation("Examinations");

                    b.Navigation("NotificationPreferences");

                    b.Navigation("SuitabilityTests");

                    b.Navigation("TradingAccounts");

                    b.Navigation("UserAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
