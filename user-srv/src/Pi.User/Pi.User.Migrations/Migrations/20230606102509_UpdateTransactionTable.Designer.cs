// <auto-generated />
using System;
using System.ComponentModel.DataAnnotations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pi.User.Infrastructure;

#nullable disable

namespace Pi.User.Migrations.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20230606102509_UpdateTransactionTable")]
    partial class UpdateTransactionTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.CustCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("customer_code");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserInfoId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_info_id");

                    b.HasKey("Id")
                        .HasName("pk_cust_codes");

                    b.HasIndex("CustomerCode")
                        .IsUnique()
                        .HasDatabaseName("ix_cust_codes_customer_code");

                    b.HasIndex("UserInfoId")
                        .HasDatabaseName("ix_cust_codes_user_info_id");

                    b.ToTable("cust_codes", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("device_id");

                    b.Property<string>("DeviceIdentifier")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("device_identifier");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("device_token");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("language");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("platform");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<string>("SubscriptionIdentifier")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("subscription_identifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserInfoId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_info_id");

                    b.HasKey("Id")
                        .HasName("pk_devices");

                    b.HasIndex("UserInfoId")
                        .HasDatabaseName("ix_devices_user_info_id");

                    b.ToTable("devices", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.NotificationPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DeviceForeignKey")
                        .HasColumnType("char(36)")
                        .HasColumnName("device_foreign_key");

                    b.Property<bool>("Important")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("important");

                    b.Property<bool>("Market")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("market");

                    b.Property<bool>("Order")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("order");

                    b.Property<bool>("Portfolio")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("portfolio");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserInfoId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_info_id");

                    b.Property<bool>("Wallet")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("wallet");

                    b.HasKey("Id")
                        .HasName("pk_notification_preferences");

                    b.HasIndex("DeviceForeignKey")
                        .IsUnique()
                        .HasDatabaseName("ix_notification_preferences_device_foreign_key");

                    b.HasIndex("UserInfoId")
                        .HasDatabaseName("ix_notification_preferences_user_info_id");

                    b.ToTable("notification_preferences", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.TradingAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<string>("TradingAccountId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("trading_account_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<Guid?>("UserInfoId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_info_id");

                    b.HasKey("Id")
                        .HasName("pk_trading_accounts");

                    b.HasIndex("UserInfoId")
                        .HasDatabaseName("ix_trading_accounts_user_info_id");

                    b.ToTable("trading_accounts", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.TransactionId", b =>
                {
                    b.Property<string>("Prefix")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("prefix");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("ReferId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("refer_id");

                    b.Property<string>("CustomerCode")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("customer_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<int>("Sequence")
                        .HasColumnType("int")
                        .HasColumnName("sequence");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Prefix", "Date", "ReferId", "CustomerCode")
                        .HasName("pk_transaction_ids");

                    b.ToTable("transaction_ids", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CitizenId")
                        .HasColumnType("longtext")
                        .HasColumnName("citizen_id")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("customer_id");

                    b.Property<string>("FirstnameEn")
                        .HasColumnType("longtext")
                        .HasColumnName("firstname_en")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("FirstnameTh")
                        .HasColumnType("longtext")
                        .HasColumnName("firstname_th")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("GlobalAccount")
                        .HasColumnType("longtext")
                        .HasColumnName("global_account");

                    b.Property<string>("LastnameEn")
                        .HasColumnType("longtext")
                        .HasColumnName("lastname_en")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("LastnameTh")
                        .HasColumnType("longtext")
                        .HasColumnName("lastname_th")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number")
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.IsEncrypted", true)
                        .HasAnnotation("Microsoft.EntityFrameworkCore.DataEncryption.StorageFormat", StorageFormat.Default);

                    b.Property<DateTime>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_user_infos");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_infos_customer_id");

                    b.ToTable("user_infos", (string)null);
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.CustCode", b =>
                {
                    b.HasOne("Pi.User.Domain.AggregatesModel.UserInfoAggregate.UserInfo", "UserInfo")
                        .WithMany("CustCodes")
                        .HasForeignKey("UserInfoId")
                        .HasConstraintName("fk_cust_codes_user_infos_user_info_id1");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.Device", b =>
                {
                    b.HasOne("Pi.User.Domain.AggregatesModel.UserInfoAggregate.UserInfo", "UserInfo")
                        .WithMany("Devices")
                        .HasForeignKey("UserInfoId")
                        .HasConstraintName("fk_devices_user_infos_user_info_id1");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.NotificationPreference", b =>
                {
                    b.HasOne("Pi.User.Domain.AggregatesModel.UserInfoAggregate.Device", null)
                        .WithOne("NotificationPreference")
                        .HasForeignKey("Pi.User.Domain.AggregatesModel.UserInfoAggregate.NotificationPreference", "DeviceForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_preferences_devices_device_foreign_key");

                    b.HasOne("Pi.User.Domain.AggregatesModel.UserInfoAggregate.UserInfo", "UserInfo")
                        .WithMany("NotificationPreferences")
                        .HasForeignKey("UserInfoId")
                        .HasConstraintName("fk_notification_preferences_user_infos_user_info_id1");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.TradingAccount", b =>
                {
                    b.HasOne("Pi.User.Domain.AggregatesModel.UserInfoAggregate.UserInfo", "UserInfo")
                        .WithMany("TradingAccounts")
                        .HasForeignKey("UserInfoId")
                        .HasConstraintName("fk_trading_accounts_user_infos_user_info_id1");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.Device", b =>
                {
                    b.Navigation("NotificationPreference")
                        .IsRequired();
                });

            modelBuilder.Entity("Pi.User.Domain.AggregatesModel.UserInfoAggregate.UserInfo", b =>
                {
                    b.Navigation("CustCodes");

                    b.Navigation("Devices");

                    b.Navigation("NotificationPreferences");

                    b.Navigation("TradingAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
