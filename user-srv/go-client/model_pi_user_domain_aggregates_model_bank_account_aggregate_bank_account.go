/*
Pi.User.API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the PiUserDomainAggregatesModelBankAccountAggregateBankAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PiUserDomainAggregatesModelBankAccountAggregateBankAccount{}

// PiUserDomainAggregatesModelBankAccountAggregateBankAccount struct for PiUserDomainAggregatesModelBankAccountAggregateBankAccount
type PiUserDomainAggregatesModelBankAccountAggregateBankAccount struct {
	RowVersion      string                                                `json:"rowVersion"`
	Id              *string                                               `json:"id,omitempty"`
	UserId          *string                                               `json:"userId,omitempty"`
	AccountNo       NullableString                                        `json:"accountNo,omitempty"`
	AccountNoHash   NullableString                                        `json:"accountNoHash,omitempty"`
	AccountName     NullableString                                        `json:"accountName,omitempty"`
	AccountNameHash NullableString                                        `json:"accountNameHash,omitempty"`
	BankCode        NullableString                                        `json:"bankCode,omitempty"`
	BankBranchCode  NullableString                                        `json:"bankBranchCode,omitempty"`
	User            *PiUserDomainAggregatesModelUserInfoAggregateUserInfo `json:"user,omitempty"`
	CreatedAt       *time.Time                                            `json:"createdAt,omitempty"`
	UpdatedAt       NullableTime                                          `json:"updatedAt,omitempty"`
}

type _PiUserDomainAggregatesModelBankAccountAggregateBankAccount PiUserDomainAggregatesModelBankAccountAggregateBankAccount

// NewPiUserDomainAggregatesModelBankAccountAggregateBankAccount instantiates a new PiUserDomainAggregatesModelBankAccountAggregateBankAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPiUserDomainAggregatesModelBankAccountAggregateBankAccount(rowVersion string) *PiUserDomainAggregatesModelBankAccountAggregateBankAccount {
	this := PiUserDomainAggregatesModelBankAccountAggregateBankAccount{}
	this.RowVersion = rowVersion
	return &this
}

// NewPiUserDomainAggregatesModelBankAccountAggregateBankAccountWithDefaults instantiates a new PiUserDomainAggregatesModelBankAccountAggregateBankAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPiUserDomainAggregatesModelBankAccountAggregateBankAccountWithDefaults() *PiUserDomainAggregatesModelBankAccountAggregateBankAccount {
	this := PiUserDomainAggregatesModelBankAccountAggregateBankAccount{}
	return &this
}

// GetRowVersion returns the RowVersion field value
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetRowVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RowVersion
}

// GetRowVersionOk returns a tuple with the RowVersion field value
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetRowVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RowVersion, true
}

// SetRowVersion sets field value
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) SetRowVersion(v string) {
	o.RowVersion = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) SetId(v string) {
	o.Id = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) SetUserId(v string) {
	o.UserId = &v
}

// GetAccountNo returns the AccountNo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetAccountNo() string {
	if o == nil || IsNil(o.AccountNo.Get()) {
		var ret string
		return ret
	}
	return *o.AccountNo.Get()
}

// GetAccountNoOk returns a tuple with the AccountNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetAccountNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountNo.Get(), o.AccountNo.IsSet()
}

// HasAccountNo returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) HasAccountNo() bool {
	if o != nil && o.AccountNo.IsSet() {
		return true
	}

	return false
}

// SetAccountNo gets a reference to the given NullableString and assigns it to the AccountNo field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) SetAccountNo(v string) {
	o.AccountNo.Set(&v)
}

// SetAccountNoNil sets the value for AccountNo to be an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) SetAccountNoNil() {
	o.AccountNo.Set(nil)
}

// UnsetAccountNo ensures that no value is present for AccountNo, not even an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) UnsetAccountNo() {
	o.AccountNo.Unset()
}

// GetAccountNoHash returns the AccountNoHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetAccountNoHash() string {
	if o == nil || IsNil(o.AccountNoHash.Get()) {
		var ret string
		return ret
	}
	return *o.AccountNoHash.Get()
}

// GetAccountNoHashOk returns a tuple with the AccountNoHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetAccountNoHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountNoHash.Get(), o.AccountNoHash.IsSet()
}

// HasAccountNoHash returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) HasAccountNoHash() bool {
	if o != nil && o.AccountNoHash.IsSet() {
		return true
	}

	return false
}

// SetAccountNoHash gets a reference to the given NullableString and assigns it to the AccountNoHash field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) SetAccountNoHash(v string) {
	o.AccountNoHash.Set(&v)
}

// SetAccountNoHashNil sets the value for AccountNoHash to be an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) SetAccountNoHashNil() {
	o.AccountNoHash.Set(nil)
}

// UnsetAccountNoHash ensures that no value is present for AccountNoHash, not even an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) UnsetAccountNoHash() {
	o.AccountNoHash.Unset()
}

// GetAccountName returns the AccountName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetAccountName() string {
	if o == nil || IsNil(o.AccountName.Get()) {
		var ret string
		return ret
	}
	return *o.AccountName.Get()
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetAccountNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountName.Get(), o.AccountName.IsSet()
}

// HasAccountName returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) HasAccountName() bool {
	if o != nil && o.AccountName.IsSet() {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given NullableString and assigns it to the AccountName field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) SetAccountName(v string) {
	o.AccountName.Set(&v)
}

// SetAccountNameNil sets the value for AccountName to be an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) SetAccountNameNil() {
	o.AccountName.Set(nil)
}

// UnsetAccountName ensures that no value is present for AccountName, not even an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) UnsetAccountName() {
	o.AccountName.Unset()
}

// GetAccountNameHash returns the AccountNameHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetAccountNameHash() string {
	if o == nil || IsNil(o.AccountNameHash.Get()) {
		var ret string
		return ret
	}
	return *o.AccountNameHash.Get()
}

// GetAccountNameHashOk returns a tuple with the AccountNameHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetAccountNameHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountNameHash.Get(), o.AccountNameHash.IsSet()
}

// HasAccountNameHash returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) HasAccountNameHash() bool {
	if o != nil && o.AccountNameHash.IsSet() {
		return true
	}

	return false
}

// SetAccountNameHash gets a reference to the given NullableString and assigns it to the AccountNameHash field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) SetAccountNameHash(v string) {
	o.AccountNameHash.Set(&v)
}

// SetAccountNameHashNil sets the value for AccountNameHash to be an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) SetAccountNameHashNil() {
	o.AccountNameHash.Set(nil)
}

// UnsetAccountNameHash ensures that no value is present for AccountNameHash, not even an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) UnsetAccountNameHash() {
	o.AccountNameHash.Unset()
}

// GetBankCode returns the BankCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetBankCode() string {
	if o == nil || IsNil(o.BankCode.Get()) {
		var ret string
		return ret
	}
	return *o.BankCode.Get()
}

// GetBankCodeOk returns a tuple with the BankCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetBankCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BankCode.Get(), o.BankCode.IsSet()
}

// HasBankCode returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) HasBankCode() bool {
	if o != nil && o.BankCode.IsSet() {
		return true
	}

	return false
}

// SetBankCode gets a reference to the given NullableString and assigns it to the BankCode field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) SetBankCode(v string) {
	o.BankCode.Set(&v)
}

// SetBankCodeNil sets the value for BankCode to be an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) SetBankCodeNil() {
	o.BankCode.Set(nil)
}

// UnsetBankCode ensures that no value is present for BankCode, not even an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) UnsetBankCode() {
	o.BankCode.Unset()
}

// GetBankBranchCode returns the BankBranchCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetBankBranchCode() string {
	if o == nil || IsNil(o.BankBranchCode.Get()) {
		var ret string
		return ret
	}
	return *o.BankBranchCode.Get()
}

// GetBankBranchCodeOk returns a tuple with the BankBranchCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetBankBranchCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BankBranchCode.Get(), o.BankBranchCode.IsSet()
}

// HasBankBranchCode returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) HasBankBranchCode() bool {
	if o != nil && o.BankBranchCode.IsSet() {
		return true
	}

	return false
}

// SetBankBranchCode gets a reference to the given NullableString and assigns it to the BankBranchCode field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) SetBankBranchCode(v string) {
	o.BankBranchCode.Set(&v)
}

// SetBankBranchCodeNil sets the value for BankBranchCode to be an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) SetBankBranchCodeNil() {
	o.BankBranchCode.Set(nil)
}

// UnsetBankBranchCode ensures that no value is present for BankBranchCode, not even an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) UnsetBankBranchCode() {
	o.BankBranchCode.Unset()
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetUser() PiUserDomainAggregatesModelUserInfoAggregateUserInfo {
	if o == nil || IsNil(o.User) {
		var ret PiUserDomainAggregatesModelUserInfoAggregateUserInfo
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetUserOk() (*PiUserDomainAggregatesModelUserInfoAggregateUserInfo, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given PiUserDomainAggregatesModelUserInfoAggregateUserInfo and assigns it to the User field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) SetUser(v PiUserDomainAggregatesModelUserInfoAggregateUserInfo) {
	o.User = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given NullableTime and assigns it to the UpdatedAt field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) SetUpdatedAt(v time.Time) {
	o.UpdatedAt.Set(&v)
}

// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) SetUpdatedAtNil() {
	o.UpdatedAt.Set(nil)
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

func (o PiUserDomainAggregatesModelBankAccountAggregateBankAccount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PiUserDomainAggregatesModelBankAccountAggregateBankAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rowVersion"] = o.RowVersion
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if o.AccountNo.IsSet() {
		toSerialize["accountNo"] = o.AccountNo.Get()
	}
	if o.AccountNoHash.IsSet() {
		toSerialize["accountNoHash"] = o.AccountNoHash.Get()
	}
	if o.AccountName.IsSet() {
		toSerialize["accountName"] = o.AccountName.Get()
	}
	if o.AccountNameHash.IsSet() {
		toSerialize["accountNameHash"] = o.AccountNameHash.Get()
	}
	if o.BankCode.IsSet() {
		toSerialize["bankCode"] = o.BankCode.Get()
	}
	if o.BankBranchCode.IsSet() {
		toSerialize["bankBranchCode"] = o.BankBranchCode.Get()
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.UpdatedAt.IsSet() {
		toSerialize["updatedAt"] = o.UpdatedAt.Get()
	}
	return toSerialize, nil
}

func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rowVersion",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPiUserDomainAggregatesModelBankAccountAggregateBankAccount := _PiUserDomainAggregatesModelBankAccountAggregateBankAccount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPiUserDomainAggregatesModelBankAccountAggregateBankAccount)

	if err != nil {
		return err
	}

	*o = PiUserDomainAggregatesModelBankAccountAggregateBankAccount(varPiUserDomainAggregatesModelBankAccountAggregateBankAccount)

	return err
}

type NullablePiUserDomainAggregatesModelBankAccountAggregateBankAccount struct {
	value *PiUserDomainAggregatesModelBankAccountAggregateBankAccount
	isSet bool
}

func (v NullablePiUserDomainAggregatesModelBankAccountAggregateBankAccount) Get() *PiUserDomainAggregatesModelBankAccountAggregateBankAccount {
	return v.value
}

func (v *NullablePiUserDomainAggregatesModelBankAccountAggregateBankAccount) Set(val *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) {
	v.value = val
	v.isSet = true
}

func (v NullablePiUserDomainAggregatesModelBankAccountAggregateBankAccount) IsSet() bool {
	return v.isSet
}

func (v *NullablePiUserDomainAggregatesModelBankAccountAggregateBankAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePiUserDomainAggregatesModelBankAccountAggregateBankAccount(val *PiUserDomainAggregatesModelBankAccountAggregateBankAccount) *NullablePiUserDomainAggregatesModelBankAccountAggregateBankAccount {
	return &NullablePiUserDomainAggregatesModelBankAccountAggregateBankAccount{value: val, isSet: true}
}

func (v NullablePiUserDomainAggregatesModelBankAccountAggregateBankAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePiUserDomainAggregatesModelBankAccountAggregateBankAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
