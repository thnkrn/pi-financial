/*
Pi.User.API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2{}

// PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2 struct for PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2
type PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2 struct {
	RowVersion                string                                                                               `json:"rowVersion"`
	Id                        *string                                                                              `json:"id,omitempty"`
	AccountNo                 NullableString                                                                       `json:"accountNo,omitempty"`
	HashedAccountNo           NullableString                                                                       `json:"hashedAccountNo,omitempty"`
	AccountName               NullableString                                                                       `json:"accountName,omitempty"`
	BankCode                  NullableString                                                                       `json:"bankCode,omitempty"`
	BranchCode                NullableString                                                                       `json:"branchCode,omitempty"`
	PaymentToken              NullableString                                                                       `json:"paymentToken,omitempty"`
	AtsEffectiveDate          NullableTime                                                                         `json:"atsEffectiveDate,omitempty"`
	Status                    *int32                                                                               `json:"status,omitempty"`
	UserId                    *string                                                                              `json:"userId,omitempty"`
	TradeAccountBankAccountId *string                                                                              `json:"tradeAccountBankAccountId,omitempty"`
	TradeAccountBankAccounts  []PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount `json:"tradeAccountBankAccounts,omitempty"`
}

type _PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2 PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2

// NewPiUserDomainAggregatesModelBankAccountAggregateBankAccountV2 instantiates a new PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPiUserDomainAggregatesModelBankAccountAggregateBankAccountV2(rowVersion string) *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2 {
	this := PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2{}
	this.RowVersion = rowVersion
	return &this
}

// NewPiUserDomainAggregatesModelBankAccountAggregateBankAccountV2WithDefaults instantiates a new PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPiUserDomainAggregatesModelBankAccountAggregateBankAccountV2WithDefaults() *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2 {
	this := PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2{}
	return &this
}

// GetRowVersion returns the RowVersion field value
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetRowVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RowVersion
}

// GetRowVersionOk returns a tuple with the RowVersion field value
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetRowVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RowVersion, true
}

// SetRowVersion sets field value
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) SetRowVersion(v string) {
	o.RowVersion = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) SetId(v string) {
	o.Id = &v
}

// GetAccountNo returns the AccountNo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetAccountNo() string {
	if o == nil || IsNil(o.AccountNo.Get()) {
		var ret string
		return ret
	}
	return *o.AccountNo.Get()
}

// GetAccountNoOk returns a tuple with the AccountNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetAccountNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountNo.Get(), o.AccountNo.IsSet()
}

// HasAccountNo returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) HasAccountNo() bool {
	if o != nil && o.AccountNo.IsSet() {
		return true
	}

	return false
}

// SetAccountNo gets a reference to the given NullableString and assigns it to the AccountNo field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) SetAccountNo(v string) {
	o.AccountNo.Set(&v)
}

// SetAccountNoNil sets the value for AccountNo to be an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) SetAccountNoNil() {
	o.AccountNo.Set(nil)
}

// UnsetAccountNo ensures that no value is present for AccountNo, not even an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) UnsetAccountNo() {
	o.AccountNo.Unset()
}

// GetHashedAccountNo returns the HashedAccountNo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetHashedAccountNo() string {
	if o == nil || IsNil(o.HashedAccountNo.Get()) {
		var ret string
		return ret
	}
	return *o.HashedAccountNo.Get()
}

// GetHashedAccountNoOk returns a tuple with the HashedAccountNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetHashedAccountNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HashedAccountNo.Get(), o.HashedAccountNo.IsSet()
}

// HasHashedAccountNo returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) HasHashedAccountNo() bool {
	if o != nil && o.HashedAccountNo.IsSet() {
		return true
	}

	return false
}

// SetHashedAccountNo gets a reference to the given NullableString and assigns it to the HashedAccountNo field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) SetHashedAccountNo(v string) {
	o.HashedAccountNo.Set(&v)
}

// SetHashedAccountNoNil sets the value for HashedAccountNo to be an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) SetHashedAccountNoNil() {
	o.HashedAccountNo.Set(nil)
}

// UnsetHashedAccountNo ensures that no value is present for HashedAccountNo, not even an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) UnsetHashedAccountNo() {
	o.HashedAccountNo.Unset()
}

// GetAccountName returns the AccountName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetAccountName() string {
	if o == nil || IsNil(o.AccountName.Get()) {
		var ret string
		return ret
	}
	return *o.AccountName.Get()
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetAccountNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountName.Get(), o.AccountName.IsSet()
}

// HasAccountName returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) HasAccountName() bool {
	if o != nil && o.AccountName.IsSet() {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given NullableString and assigns it to the AccountName field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) SetAccountName(v string) {
	o.AccountName.Set(&v)
}

// SetAccountNameNil sets the value for AccountName to be an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) SetAccountNameNil() {
	o.AccountName.Set(nil)
}

// UnsetAccountName ensures that no value is present for AccountName, not even an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) UnsetAccountName() {
	o.AccountName.Unset()
}

// GetBankCode returns the BankCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetBankCode() string {
	if o == nil || IsNil(o.BankCode.Get()) {
		var ret string
		return ret
	}
	return *o.BankCode.Get()
}

// GetBankCodeOk returns a tuple with the BankCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetBankCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BankCode.Get(), o.BankCode.IsSet()
}

// HasBankCode returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) HasBankCode() bool {
	if o != nil && o.BankCode.IsSet() {
		return true
	}

	return false
}

// SetBankCode gets a reference to the given NullableString and assigns it to the BankCode field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) SetBankCode(v string) {
	o.BankCode.Set(&v)
}

// SetBankCodeNil sets the value for BankCode to be an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) SetBankCodeNil() {
	o.BankCode.Set(nil)
}

// UnsetBankCode ensures that no value is present for BankCode, not even an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) UnsetBankCode() {
	o.BankCode.Unset()
}

// GetBranchCode returns the BranchCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetBranchCode() string {
	if o == nil || IsNil(o.BranchCode.Get()) {
		var ret string
		return ret
	}
	return *o.BranchCode.Get()
}

// GetBranchCodeOk returns a tuple with the BranchCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetBranchCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BranchCode.Get(), o.BranchCode.IsSet()
}

// HasBranchCode returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) HasBranchCode() bool {
	if o != nil && o.BranchCode.IsSet() {
		return true
	}

	return false
}

// SetBranchCode gets a reference to the given NullableString and assigns it to the BranchCode field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) SetBranchCode(v string) {
	o.BranchCode.Set(&v)
}

// SetBranchCodeNil sets the value for BranchCode to be an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) SetBranchCodeNil() {
	o.BranchCode.Set(nil)
}

// UnsetBranchCode ensures that no value is present for BranchCode, not even an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) UnsetBranchCode() {
	o.BranchCode.Unset()
}

// GetPaymentToken returns the PaymentToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetPaymentToken() string {
	if o == nil || IsNil(o.PaymentToken.Get()) {
		var ret string
		return ret
	}
	return *o.PaymentToken.Get()
}

// GetPaymentTokenOk returns a tuple with the PaymentToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetPaymentTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PaymentToken.Get(), o.PaymentToken.IsSet()
}

// HasPaymentToken returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) HasPaymentToken() bool {
	if o != nil && o.PaymentToken.IsSet() {
		return true
	}

	return false
}

// SetPaymentToken gets a reference to the given NullableString and assigns it to the PaymentToken field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) SetPaymentToken(v string) {
	o.PaymentToken.Set(&v)
}

// SetPaymentTokenNil sets the value for PaymentToken to be an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) SetPaymentTokenNil() {
	o.PaymentToken.Set(nil)
}

// UnsetPaymentToken ensures that no value is present for PaymentToken, not even an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) UnsetPaymentToken() {
	o.PaymentToken.Unset()
}

// GetAtsEffectiveDate returns the AtsEffectiveDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetAtsEffectiveDate() time.Time {
	if o == nil || IsNil(o.AtsEffectiveDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.AtsEffectiveDate.Get()
}

// GetAtsEffectiveDateOk returns a tuple with the AtsEffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetAtsEffectiveDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.AtsEffectiveDate.Get(), o.AtsEffectiveDate.IsSet()
}

// HasAtsEffectiveDate returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) HasAtsEffectiveDate() bool {
	if o != nil && o.AtsEffectiveDate.IsSet() {
		return true
	}

	return false
}

// SetAtsEffectiveDate gets a reference to the given NullableTime and assigns it to the AtsEffectiveDate field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) SetAtsEffectiveDate(v time.Time) {
	o.AtsEffectiveDate.Set(&v)
}

// SetAtsEffectiveDateNil sets the value for AtsEffectiveDate to be an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) SetAtsEffectiveDateNil() {
	o.AtsEffectiveDate.Set(nil)
}

// UnsetAtsEffectiveDate ensures that no value is present for AtsEffectiveDate, not even an explicit nil
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) UnsetAtsEffectiveDate() {
	o.AtsEffectiveDate.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) SetStatus(v int32) {
	o.Status = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) SetUserId(v string) {
	o.UserId = &v
}

// GetTradeAccountBankAccountId returns the TradeAccountBankAccountId field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetTradeAccountBankAccountId() string {
	if o == nil || IsNil(o.TradeAccountBankAccountId) {
		var ret string
		return ret
	}
	return *o.TradeAccountBankAccountId
}

// GetTradeAccountBankAccountIdOk returns a tuple with the TradeAccountBankAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetTradeAccountBankAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.TradeAccountBankAccountId) {
		return nil, false
	}
	return o.TradeAccountBankAccountId, true
}

// HasTradeAccountBankAccountId returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) HasTradeAccountBankAccountId() bool {
	if o != nil && !IsNil(o.TradeAccountBankAccountId) {
		return true
	}

	return false
}

// SetTradeAccountBankAccountId gets a reference to the given string and assigns it to the TradeAccountBankAccountId field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) SetTradeAccountBankAccountId(v string) {
	o.TradeAccountBankAccountId = &v
}

// GetTradeAccountBankAccounts returns the TradeAccountBankAccounts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetTradeAccountBankAccounts() []PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount {
	if o == nil {
		var ret []PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount
		return ret
	}
	return o.TradeAccountBankAccounts
}

// GetTradeAccountBankAccountsOk returns a tuple with the TradeAccountBankAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) GetTradeAccountBankAccountsOk() ([]PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount, bool) {
	if o == nil || IsNil(o.TradeAccountBankAccounts) {
		return nil, false
	}
	return o.TradeAccountBankAccounts, true
}

// HasTradeAccountBankAccounts returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) HasTradeAccountBankAccounts() bool {
	if o != nil && !IsNil(o.TradeAccountBankAccounts) {
		return true
	}

	return false
}

// SetTradeAccountBankAccounts gets a reference to the given []PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount and assigns it to the TradeAccountBankAccounts field.
func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) SetTradeAccountBankAccounts(v []PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) {
	o.TradeAccountBankAccounts = v
}

func (o PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rowVersion"] = o.RowVersion
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.AccountNo.IsSet() {
		toSerialize["accountNo"] = o.AccountNo.Get()
	}
	if o.HashedAccountNo.IsSet() {
		toSerialize["hashedAccountNo"] = o.HashedAccountNo.Get()
	}
	if o.AccountName.IsSet() {
		toSerialize["accountName"] = o.AccountName.Get()
	}
	if o.BankCode.IsSet() {
		toSerialize["bankCode"] = o.BankCode.Get()
	}
	if o.BranchCode.IsSet() {
		toSerialize["branchCode"] = o.BranchCode.Get()
	}
	if o.PaymentToken.IsSet() {
		toSerialize["paymentToken"] = o.PaymentToken.Get()
	}
	if o.AtsEffectiveDate.IsSet() {
		toSerialize["atsEffectiveDate"] = o.AtsEffectiveDate.Get()
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.TradeAccountBankAccountId) {
		toSerialize["tradeAccountBankAccountId"] = o.TradeAccountBankAccountId
	}
	if o.TradeAccountBankAccounts != nil {
		toSerialize["tradeAccountBankAccounts"] = o.TradeAccountBankAccounts
	}
	return toSerialize, nil
}

func (o *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rowVersion",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPiUserDomainAggregatesModelBankAccountAggregateBankAccountV2 := _PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPiUserDomainAggregatesModelBankAccountAggregateBankAccountV2)

	if err != nil {
		return err
	}

	*o = PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2(varPiUserDomainAggregatesModelBankAccountAggregateBankAccountV2)

	return err
}

type NullablePiUserDomainAggregatesModelBankAccountAggregateBankAccountV2 struct {
	value *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2
	isSet bool
}

func (v NullablePiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) Get() *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2 {
	return v.value
}

func (v *NullablePiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) Set(val *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) {
	v.value = val
	v.isSet = true
}

func (v NullablePiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) IsSet() bool {
	return v.isSet
}

func (v *NullablePiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePiUserDomainAggregatesModelBankAccountAggregateBankAccountV2(val *PiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) *NullablePiUserDomainAggregatesModelBankAccountAggregateBankAccountV2 {
	return &NullablePiUserDomainAggregatesModelBankAccountAggregateBankAccountV2{value: val, isSet: true}
}

func (v NullablePiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePiUserDomainAggregatesModelBankAccountAggregateBankAccountV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
