/*
Pi.User.API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// UserAccountAPIService UserAccountAPI service
type UserAccountAPIService service

type ApiInternalUserAccountPostRequest struct {
	ctx                                     context.Context
	ApiService                              *UserAccountAPIService
	piUserAPIModelsCreateUserAccountRequest *PiUserAPIModelsCreateUserAccountRequest
	userId                                  *string
}

func (r ApiInternalUserAccountPostRequest) PiUserAPIModelsCreateUserAccountRequest(piUserAPIModelsCreateUserAccountRequest PiUserAPIModelsCreateUserAccountRequest) ApiInternalUserAccountPostRequest {
	r.piUserAPIModelsCreateUserAccountRequest = &piUserAPIModelsCreateUserAccountRequest
	return r
}

func (r ApiInternalUserAccountPostRequest) UserId(userId string) ApiInternalUserAccountPostRequest {
	r.userId = &userId
	return r
}

func (r ApiInternalUserAccountPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.InternalUserAccountPostExecute(r)
}

/*
InternalUserAccountPost Method for InternalUserAccountPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalUserAccountPostRequest
*/
func (a *UserAccountAPIService) InternalUserAccountPost(ctx context.Context) ApiInternalUserAccountPostRequest {
	return ApiInternalUserAccountPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *UserAccountAPIService) InternalUserAccountPostExecute(r ApiInternalUserAccountPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserAccountAPIService.InternalUserAccountPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/user-account"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.piUserAPIModelsCreateUserAccountRequest == nil {
		return nil, reportError("piUserAPIModelsCreateUserAccountRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	}
	// body params
	localVarPostBody = r.piUserAPIModelsCreateUserAccountRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
