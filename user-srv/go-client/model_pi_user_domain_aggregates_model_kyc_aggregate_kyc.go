/*
Pi.User.API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the PiUserDomainAggregatesModelKycAggregateKyc type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PiUserDomainAggregatesModelKycAggregateKyc{}

// PiUserDomainAggregatesModelKycAggregateKyc struct for PiUserDomainAggregatesModelKycAggregateKyc
type PiUserDomainAggregatesModelKycAggregateKyc struct {
	RowVersion  string     `json:"rowVersion"`
	Id          *string    `json:"id,omitempty"`
	ReviewDate  *time.Time `json:"reviewDate,omitempty"`
	ExpiredDate *time.Time `json:"expiredDate,omitempty"`
	UserId      *string    `json:"userId,omitempty"`
}

type _PiUserDomainAggregatesModelKycAggregateKyc PiUserDomainAggregatesModelKycAggregateKyc

// NewPiUserDomainAggregatesModelKycAggregateKyc instantiates a new PiUserDomainAggregatesModelKycAggregateKyc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPiUserDomainAggregatesModelKycAggregateKyc(rowVersion string) *PiUserDomainAggregatesModelKycAggregateKyc {
	this := PiUserDomainAggregatesModelKycAggregateKyc{}
	this.RowVersion = rowVersion
	return &this
}

// NewPiUserDomainAggregatesModelKycAggregateKycWithDefaults instantiates a new PiUserDomainAggregatesModelKycAggregateKyc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPiUserDomainAggregatesModelKycAggregateKycWithDefaults() *PiUserDomainAggregatesModelKycAggregateKyc {
	this := PiUserDomainAggregatesModelKycAggregateKyc{}
	return &this
}

// GetRowVersion returns the RowVersion field value
func (o *PiUserDomainAggregatesModelKycAggregateKyc) GetRowVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RowVersion
}

// GetRowVersionOk returns a tuple with the RowVersion field value
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelKycAggregateKyc) GetRowVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RowVersion, true
}

// SetRowVersion sets field value
func (o *PiUserDomainAggregatesModelKycAggregateKyc) SetRowVersion(v string) {
	o.RowVersion = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelKycAggregateKyc) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelKycAggregateKyc) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelKycAggregateKyc) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PiUserDomainAggregatesModelKycAggregateKyc) SetId(v string) {
	o.Id = &v
}

// GetReviewDate returns the ReviewDate field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelKycAggregateKyc) GetReviewDate() time.Time {
	if o == nil || IsNil(o.ReviewDate) {
		var ret time.Time
		return ret
	}
	return *o.ReviewDate
}

// GetReviewDateOk returns a tuple with the ReviewDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelKycAggregateKyc) GetReviewDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ReviewDate) {
		return nil, false
	}
	return o.ReviewDate, true
}

// HasReviewDate returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelKycAggregateKyc) HasReviewDate() bool {
	if o != nil && !IsNil(o.ReviewDate) {
		return true
	}

	return false
}

// SetReviewDate gets a reference to the given time.Time and assigns it to the ReviewDate field.
func (o *PiUserDomainAggregatesModelKycAggregateKyc) SetReviewDate(v time.Time) {
	o.ReviewDate = &v
}

// GetExpiredDate returns the ExpiredDate field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelKycAggregateKyc) GetExpiredDate() time.Time {
	if o == nil || IsNil(o.ExpiredDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpiredDate
}

// GetExpiredDateOk returns a tuple with the ExpiredDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelKycAggregateKyc) GetExpiredDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiredDate) {
		return nil, false
	}
	return o.ExpiredDate, true
}

// HasExpiredDate returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelKycAggregateKyc) HasExpiredDate() bool {
	if o != nil && !IsNil(o.ExpiredDate) {
		return true
	}

	return false
}

// SetExpiredDate gets a reference to the given time.Time and assigns it to the ExpiredDate field.
func (o *PiUserDomainAggregatesModelKycAggregateKyc) SetExpiredDate(v time.Time) {
	o.ExpiredDate = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelKycAggregateKyc) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelKycAggregateKyc) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelKycAggregateKyc) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *PiUserDomainAggregatesModelKycAggregateKyc) SetUserId(v string) {
	o.UserId = &v
}

func (o PiUserDomainAggregatesModelKycAggregateKyc) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PiUserDomainAggregatesModelKycAggregateKyc) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rowVersion"] = o.RowVersion
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ReviewDate) {
		toSerialize["reviewDate"] = o.ReviewDate
	}
	if !IsNil(o.ExpiredDate) {
		toSerialize["expiredDate"] = o.ExpiredDate
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	return toSerialize, nil
}

func (o *PiUserDomainAggregatesModelKycAggregateKyc) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rowVersion",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPiUserDomainAggregatesModelKycAggregateKyc := _PiUserDomainAggregatesModelKycAggregateKyc{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPiUserDomainAggregatesModelKycAggregateKyc)

	if err != nil {
		return err
	}

	*o = PiUserDomainAggregatesModelKycAggregateKyc(varPiUserDomainAggregatesModelKycAggregateKyc)

	return err
}

type NullablePiUserDomainAggregatesModelKycAggregateKyc struct {
	value *PiUserDomainAggregatesModelKycAggregateKyc
	isSet bool
}

func (v NullablePiUserDomainAggregatesModelKycAggregateKyc) Get() *PiUserDomainAggregatesModelKycAggregateKyc {
	return v.value
}

func (v *NullablePiUserDomainAggregatesModelKycAggregateKyc) Set(val *PiUserDomainAggregatesModelKycAggregateKyc) {
	v.value = val
	v.isSet = true
}

func (v NullablePiUserDomainAggregatesModelKycAggregateKyc) IsSet() bool {
	return v.isSet
}

func (v *NullablePiUserDomainAggregatesModelKycAggregateKyc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePiUserDomainAggregatesModelKycAggregateKyc(val *PiUserDomainAggregatesModelKycAggregateKyc) *NullablePiUserDomainAggregatesModelKycAggregateKyc {
	return &NullablePiUserDomainAggregatesModelKycAggregateKyc{value: val, isSet: true}
}

func (v NullablePiUserDomainAggregatesModelKycAggregateKyc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePiUserDomainAggregatesModelKycAggregateKyc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
