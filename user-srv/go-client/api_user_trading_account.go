/*
Pi.User.API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// UserTradingAccountAPIService UserTradingAccountAPI service
type UserTradingAccountAPIService service

type ApiGetTradingAccountsByCustomerCodeRequest struct {
	ctx        context.Context
	ApiService *UserTradingAccountAPIService
	custCode   *string
}

func (r ApiGetTradingAccountsByCustomerCodeRequest) CustCode(custCode string) ApiGetTradingAccountsByCustomerCodeRequest {
	r.custCode = &custCode
	return r
}

func (r ApiGetTradingAccountsByCustomerCodeRequest) Execute() (*SystemStringIEnumerableApiResponse, *http.Response, error) {
	return r.ApiService.GetTradingAccountsByCustomerCodeExecute(r)
}

/*
GetTradingAccountsByCustomerCode Method for GetTradingAccountsByCustomerCode

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetTradingAccountsByCustomerCodeRequest
*/
func (a *UserTradingAccountAPIService) GetTradingAccountsByCustomerCode(ctx context.Context) ApiGetTradingAccountsByCustomerCodeRequest {
	return ApiGetTradingAccountsByCustomerCodeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SystemStringIEnumerableApiResponse
func (a *UserTradingAccountAPIService) GetTradingAccountsByCustomerCodeExecute(r ApiGetTradingAccountsByCustomerCodeRequest) (*SystemStringIEnumerableApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SystemStringIEnumerableApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserTradingAccountAPIService.GetTradingAccountsByCustomerCode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/user/trading-accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.custCode == nil {
		return localVarReturnValue, nil, reportError("custCode is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "custCode", r.custCode, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserTradingAccountInfoByCustomerIdRequest struct {
	ctx          context.Context
	ApiService   *UserTradingAccountAPIService
	userId       *string
	customerCode *string
}

func (r ApiGetUserTradingAccountInfoByCustomerIdRequest) UserId(userId string) ApiGetUserTradingAccountInfoByCustomerIdRequest {
	r.userId = &userId
	return r
}

func (r ApiGetUserTradingAccountInfoByCustomerIdRequest) CustomerCode(customerCode string) ApiGetUserTradingAccountInfoByCustomerIdRequest {
	r.customerCode = &customerCode
	return r
}

func (r ApiGetUserTradingAccountInfoByCustomerIdRequest) Execute() (*PiUserApplicationModelsUserTradingAccountInfoApiResponse, *http.Response, error) {
	return r.ApiService.GetUserTradingAccountInfoByCustomerIdExecute(r)
}

/*
GetUserTradingAccountInfoByCustomerId Method for GetUserTradingAccountInfoByCustomerId

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetUserTradingAccountInfoByCustomerIdRequest
*/
func (a *UserTradingAccountAPIService) GetUserTradingAccountInfoByCustomerId(ctx context.Context) ApiGetUserTradingAccountInfoByCustomerIdRequest {
	return ApiGetUserTradingAccountInfoByCustomerIdRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiUserApplicationModelsUserTradingAccountInfoApiResponse
func (a *UserTradingAccountAPIService) GetUserTradingAccountInfoByCustomerIdExecute(r ApiGetUserTradingAccountInfoByCustomerIdRequest) (*PiUserApplicationModelsUserTradingAccountInfoApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiUserApplicationModelsUserTradingAccountInfoApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserTradingAccountAPIService.GetUserTradingAccountInfoByCustomerId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/secure/trading-accounts/v2"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.customerCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customerCode", r.customerCode, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUserTradingAccountInfoByUserIdRequest struct {
	ctx          context.Context
	ApiService   *UserTradingAccountAPIService
	userId       *string
	customerCode *string
}

func (r ApiGetUserTradingAccountInfoByUserIdRequest) UserId(userId string) ApiGetUserTradingAccountInfoByUserIdRequest {
	r.userId = &userId
	return r
}

func (r ApiGetUserTradingAccountInfoByUserIdRequest) CustomerCode(customerCode string) ApiGetUserTradingAccountInfoByUserIdRequest {
	r.customerCode = &customerCode
	return r
}

func (r ApiGetUserTradingAccountInfoByUserIdRequest) Execute() (*PiUserApplicationModelsUserTradingAccountInfoApiResponse, *http.Response, error) {
	return r.ApiService.GetUserTradingAccountInfoByUserIdExecute(r)
}

/*
GetUserTradingAccountInfoByUserId Method for GetUserTradingAccountInfoByUserId

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetUserTradingAccountInfoByUserIdRequest
*/
func (a *UserTradingAccountAPIService) GetUserTradingAccountInfoByUserId(ctx context.Context) ApiGetUserTradingAccountInfoByUserIdRequest {
	return ApiGetUserTradingAccountInfoByUserIdRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiUserApplicationModelsUserTradingAccountInfoApiResponse
func (a *UserTradingAccountAPIService) GetUserTradingAccountInfoByUserIdExecute(r ApiGetUserTradingAccountInfoByUserIdRequest) (*PiUserApplicationModelsUserTradingAccountInfoApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiUserApplicationModelsUserTradingAccountInfoApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserTradingAccountAPIService.GetUserTradingAccountInfoByUserId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/trading-accounts/v2"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "userId", r.userId, "form", "")
	}
	if r.customerCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customerCode", r.customerCode, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
