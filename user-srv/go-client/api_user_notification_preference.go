/*
Pi.User.API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// UserNotificationPreferenceAPIService UserNotificationPreferenceAPI service
type UserNotificationPreferenceAPIService service

type ApiInternalNotificationPreferenceGetRequest struct {
	ctx        context.Context
	ApiService *UserNotificationPreferenceAPIService
	userId     *string
	deviceId   *string
}

func (r ApiInternalNotificationPreferenceGetRequest) UserId(userId string) ApiInternalNotificationPreferenceGetRequest {
	r.userId = &userId
	return r
}

func (r ApiInternalNotificationPreferenceGetRequest) DeviceId(deviceId string) ApiInternalNotificationPreferenceGetRequest {
	r.deviceId = &deviceId
	return r
}

func (r ApiInternalNotificationPreferenceGetRequest) Execute() (*PiUserAPIModelsDeviceResponseApiResponse, *http.Response, error) {
	return r.ApiService.InternalNotificationPreferenceGetExecute(r)
}

/*
InternalNotificationPreferenceGet Method for InternalNotificationPreferenceGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalNotificationPreferenceGetRequest
*/
func (a *UserNotificationPreferenceAPIService) InternalNotificationPreferenceGet(ctx context.Context) ApiInternalNotificationPreferenceGetRequest {
	return ApiInternalNotificationPreferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiUserAPIModelsDeviceResponseApiResponse
func (a *UserNotificationPreferenceAPIService) InternalNotificationPreferenceGetExecute(r ApiInternalNotificationPreferenceGetRequest) (*PiUserAPIModelsDeviceResponseApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiUserAPIModelsDeviceResponseApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserNotificationPreferenceAPIService.InternalNotificationPreferenceGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/notification-preference"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "deviceId", r.deviceId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSecureNotificationPreferenceGetRequest struct {
	ctx        context.Context
	ApiService *UserNotificationPreferenceAPIService
	userId     *string
	deviceId   *string
}

func (r ApiSecureNotificationPreferenceGetRequest) UserId(userId string) ApiSecureNotificationPreferenceGetRequest {
	r.userId = &userId
	return r
}

func (r ApiSecureNotificationPreferenceGetRequest) DeviceId(deviceId string) ApiSecureNotificationPreferenceGetRequest {
	r.deviceId = &deviceId
	return r
}

func (r ApiSecureNotificationPreferenceGetRequest) Execute() (*PiUserAPIModelsDeviceResponseApiResponse, *http.Response, error) {
	return r.ApiService.SecureNotificationPreferenceGetExecute(r)
}

/*
SecureNotificationPreferenceGet Method for SecureNotificationPreferenceGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSecureNotificationPreferenceGetRequest
*/
func (a *UserNotificationPreferenceAPIService) SecureNotificationPreferenceGet(ctx context.Context) ApiSecureNotificationPreferenceGetRequest {
	return ApiSecureNotificationPreferenceGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiUserAPIModelsDeviceResponseApiResponse
func (a *UserNotificationPreferenceAPIService) SecureNotificationPreferenceGetExecute(r ApiSecureNotificationPreferenceGetRequest) (*PiUserAPIModelsDeviceResponseApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiUserAPIModelsDeviceResponseApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserNotificationPreferenceAPIService.SecureNotificationPreferenceGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/secure/notification-preference"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "deviceId", r.deviceId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSecureNotificationPreferencePutRequest struct {
	ctx                                          context.Context
	ApiService                                   *UserNotificationPreferenceAPIService
	userId                                       *string
	deviceId                                     *string
	piUserAPIModelsNotificationPreferenceRequest *PiUserAPIModelsNotificationPreferenceRequest
}

func (r ApiSecureNotificationPreferencePutRequest) UserId(userId string) ApiSecureNotificationPreferencePutRequest {
	r.userId = &userId
	return r
}

func (r ApiSecureNotificationPreferencePutRequest) DeviceId(deviceId string) ApiSecureNotificationPreferencePutRequest {
	r.deviceId = &deviceId
	return r
}

func (r ApiSecureNotificationPreferencePutRequest) PiUserAPIModelsNotificationPreferenceRequest(piUserAPIModelsNotificationPreferenceRequest PiUserAPIModelsNotificationPreferenceRequest) ApiSecureNotificationPreferencePutRequest {
	r.piUserAPIModelsNotificationPreferenceRequest = &piUserAPIModelsNotificationPreferenceRequest
	return r
}

func (r ApiSecureNotificationPreferencePutRequest) Execute() (*PiUserAPIModelsNotificationPreferenceTicketApiResponse, *http.Response, error) {
	return r.ApiService.SecureNotificationPreferencePutExecute(r)
}

/*
SecureNotificationPreferencePut Method for SecureNotificationPreferencePut

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSecureNotificationPreferencePutRequest
*/
func (a *UserNotificationPreferenceAPIService) SecureNotificationPreferencePut(ctx context.Context) ApiSecureNotificationPreferencePutRequest {
	return ApiSecureNotificationPreferencePutRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiUserAPIModelsNotificationPreferenceTicketApiResponse
func (a *UserNotificationPreferenceAPIService) SecureNotificationPreferencePutExecute(r ApiSecureNotificationPreferencePutRequest) (*PiUserAPIModelsNotificationPreferenceTicketApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiUserAPIModelsNotificationPreferenceTicketApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserNotificationPreferenceAPIService.SecureNotificationPreferencePut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/secure/notification-preference"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}
	if r.piUserAPIModelsNotificationPreferenceRequest == nil {
		return localVarReturnValue, nil, reportError("piUserAPIModelsNotificationPreferenceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "deviceId", r.deviceId, "simple", "")
	// body params
	localVarPostBody = r.piUserAPIModelsNotificationPreferenceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
