/*
Pi.User.API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount{}

// PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount struct for PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount
type PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount struct {
	RowVersion               string                                                                               `json:"rowVersion"`
	Id                       *string                                                                              `json:"id,omitempty"`
	AccountNumber            NullableString                                                                       `json:"accountNumber,omitempty"`
	AccountType              *int32                                                                               `json:"accountType,omitempty"`
	AccountTypeCode          NullableString                                                                       `json:"accountTypeCode,omitempty"`
	ExchangeMarketId         NullableString                                                                       `json:"exchangeMarketId,omitempty"`
	AccountStatus            NullableString                                                                       `json:"accountStatus,omitempty"`
	CreditLine               *float64                                                                             `json:"creditLine,omitempty"`
	CreditLineCurrency       NullableString                                                                       `json:"creditLineCurrency,omitempty"`
	EffectiveDate            NullableString                                                                       `json:"effectiveDate,omitempty"`
	EndDate                  NullableString                                                                       `json:"endDate,omitempty"`
	MarketingId              NullableString                                                                       `json:"marketingId,omitempty"`
	SaleLicense              NullableString                                                                       `json:"saleLicense,omitempty"`
	OpenDate                 NullableString                                                                       `json:"openDate,omitempty"`
	UserAccountId            NullableString                                                                       `json:"userAccountId,omitempty"`
	CreatedAt                *time.Time                                                                           `json:"createdAt,omitempty"`
	UpdatedAt                NullableTime                                                                         `json:"updatedAt,omitempty"`
	ExternalAccounts         []PiUserDomainAggregatesModelExternalAccountAggregateExternalAccount                 `json:"externalAccounts,omitempty"`
	TradeAccountBankAccounts []PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount `json:"tradeAccountBankAccounts,omitempty"`
}

type _PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount

// NewPiUserDomainAggregatesModelTradeAccountAggregateTradeAccount instantiates a new PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPiUserDomainAggregatesModelTradeAccountAggregateTradeAccount(rowVersion string) *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount {
	this := PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount{}
	this.RowVersion = rowVersion
	return &this
}

// NewPiUserDomainAggregatesModelTradeAccountAggregateTradeAccountWithDefaults instantiates a new PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPiUserDomainAggregatesModelTradeAccountAggregateTradeAccountWithDefaults() *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount {
	this := PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount{}
	return &this
}

// GetRowVersion returns the RowVersion field value
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetRowVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RowVersion
}

// GetRowVersionOk returns a tuple with the RowVersion field value
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetRowVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RowVersion, true
}

// SetRowVersion sets field value
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetRowVersion(v string) {
	o.RowVersion = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetId(v string) {
	o.Id = &v
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetAccountNumber() string {
	if o == nil || IsNil(o.AccountNumber.Get()) {
		var ret string
		return ret
	}
	return *o.AccountNumber.Get()
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetAccountNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountNumber.Get(), o.AccountNumber.IsSet()
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) HasAccountNumber() bool {
	if o != nil && o.AccountNumber.IsSet() {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given NullableString and assigns it to the AccountNumber field.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetAccountNumber(v string) {
	o.AccountNumber.Set(&v)
}

// SetAccountNumberNil sets the value for AccountNumber to be an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetAccountNumberNil() {
	o.AccountNumber.Set(nil)
}

// UnsetAccountNumber ensures that no value is present for AccountNumber, not even an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) UnsetAccountNumber() {
	o.AccountNumber.Unset()
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetAccountType() int32 {
	if o == nil || IsNil(o.AccountType) {
		var ret int32
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetAccountTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.AccountType) {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) HasAccountType() bool {
	if o != nil && !IsNil(o.AccountType) {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given int32 and assigns it to the AccountType field.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetAccountType(v int32) {
	o.AccountType = &v
}

// GetAccountTypeCode returns the AccountTypeCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetAccountTypeCode() string {
	if o == nil || IsNil(o.AccountTypeCode.Get()) {
		var ret string
		return ret
	}
	return *o.AccountTypeCode.Get()
}

// GetAccountTypeCodeOk returns a tuple with the AccountTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetAccountTypeCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountTypeCode.Get(), o.AccountTypeCode.IsSet()
}

// HasAccountTypeCode returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) HasAccountTypeCode() bool {
	if o != nil && o.AccountTypeCode.IsSet() {
		return true
	}

	return false
}

// SetAccountTypeCode gets a reference to the given NullableString and assigns it to the AccountTypeCode field.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetAccountTypeCode(v string) {
	o.AccountTypeCode.Set(&v)
}

// SetAccountTypeCodeNil sets the value for AccountTypeCode to be an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetAccountTypeCodeNil() {
	o.AccountTypeCode.Set(nil)
}

// UnsetAccountTypeCode ensures that no value is present for AccountTypeCode, not even an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) UnsetAccountTypeCode() {
	o.AccountTypeCode.Unset()
}

// GetExchangeMarketId returns the ExchangeMarketId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetExchangeMarketId() string {
	if o == nil || IsNil(o.ExchangeMarketId.Get()) {
		var ret string
		return ret
	}
	return *o.ExchangeMarketId.Get()
}

// GetExchangeMarketIdOk returns a tuple with the ExchangeMarketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetExchangeMarketIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExchangeMarketId.Get(), o.ExchangeMarketId.IsSet()
}

// HasExchangeMarketId returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) HasExchangeMarketId() bool {
	if o != nil && o.ExchangeMarketId.IsSet() {
		return true
	}

	return false
}

// SetExchangeMarketId gets a reference to the given NullableString and assigns it to the ExchangeMarketId field.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetExchangeMarketId(v string) {
	o.ExchangeMarketId.Set(&v)
}

// SetExchangeMarketIdNil sets the value for ExchangeMarketId to be an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetExchangeMarketIdNil() {
	o.ExchangeMarketId.Set(nil)
}

// UnsetExchangeMarketId ensures that no value is present for ExchangeMarketId, not even an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) UnsetExchangeMarketId() {
	o.ExchangeMarketId.Unset()
}

// GetAccountStatus returns the AccountStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetAccountStatus() string {
	if o == nil || IsNil(o.AccountStatus.Get()) {
		var ret string
		return ret
	}
	return *o.AccountStatus.Get()
}

// GetAccountStatusOk returns a tuple with the AccountStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetAccountStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountStatus.Get(), o.AccountStatus.IsSet()
}

// HasAccountStatus returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) HasAccountStatus() bool {
	if o != nil && o.AccountStatus.IsSet() {
		return true
	}

	return false
}

// SetAccountStatus gets a reference to the given NullableString and assigns it to the AccountStatus field.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetAccountStatus(v string) {
	o.AccountStatus.Set(&v)
}

// SetAccountStatusNil sets the value for AccountStatus to be an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetAccountStatusNil() {
	o.AccountStatus.Set(nil)
}

// UnsetAccountStatus ensures that no value is present for AccountStatus, not even an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) UnsetAccountStatus() {
	o.AccountStatus.Unset()
}

// GetCreditLine returns the CreditLine field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetCreditLine() float64 {
	if o == nil || IsNil(o.CreditLine) {
		var ret float64
		return ret
	}
	return *o.CreditLine
}

// GetCreditLineOk returns a tuple with the CreditLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetCreditLineOk() (*float64, bool) {
	if o == nil || IsNil(o.CreditLine) {
		return nil, false
	}
	return o.CreditLine, true
}

// HasCreditLine returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) HasCreditLine() bool {
	if o != nil && !IsNil(o.CreditLine) {
		return true
	}

	return false
}

// SetCreditLine gets a reference to the given float64 and assigns it to the CreditLine field.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetCreditLine(v float64) {
	o.CreditLine = &v
}

// GetCreditLineCurrency returns the CreditLineCurrency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetCreditLineCurrency() string {
	if o == nil || IsNil(o.CreditLineCurrency.Get()) {
		var ret string
		return ret
	}
	return *o.CreditLineCurrency.Get()
}

// GetCreditLineCurrencyOk returns a tuple with the CreditLineCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetCreditLineCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreditLineCurrency.Get(), o.CreditLineCurrency.IsSet()
}

// HasCreditLineCurrency returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) HasCreditLineCurrency() bool {
	if o != nil && o.CreditLineCurrency.IsSet() {
		return true
	}

	return false
}

// SetCreditLineCurrency gets a reference to the given NullableString and assigns it to the CreditLineCurrency field.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetCreditLineCurrency(v string) {
	o.CreditLineCurrency.Set(&v)
}

// SetCreditLineCurrencyNil sets the value for CreditLineCurrency to be an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetCreditLineCurrencyNil() {
	o.CreditLineCurrency.Set(nil)
}

// UnsetCreditLineCurrency ensures that no value is present for CreditLineCurrency, not even an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) UnsetCreditLineCurrency() {
	o.CreditLineCurrency.Unset()
}

// GetEffectiveDate returns the EffectiveDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetEffectiveDate() string {
	if o == nil || IsNil(o.EffectiveDate.Get()) {
		var ret string
		return ret
	}
	return *o.EffectiveDate.Get()
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetEffectiveDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EffectiveDate.Get(), o.EffectiveDate.IsSet()
}

// HasEffectiveDate returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) HasEffectiveDate() bool {
	if o != nil && o.EffectiveDate.IsSet() {
		return true
	}

	return false
}

// SetEffectiveDate gets a reference to the given NullableString and assigns it to the EffectiveDate field.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetEffectiveDate(v string) {
	o.EffectiveDate.Set(&v)
}

// SetEffectiveDateNil sets the value for EffectiveDate to be an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetEffectiveDateNil() {
	o.EffectiveDate.Set(nil)
}

// UnsetEffectiveDate ensures that no value is present for EffectiveDate, not even an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) UnsetEffectiveDate() {
	o.EffectiveDate.Unset()
}

// GetEndDate returns the EndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetEndDate() string {
	if o == nil || IsNil(o.EndDate.Get()) {
		var ret string
		return ret
	}
	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetEndDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// HasEndDate returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) HasEndDate() bool {
	if o != nil && o.EndDate.IsSet() {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given NullableString and assigns it to the EndDate field.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetEndDate(v string) {
	o.EndDate.Set(&v)
}

// SetEndDateNil sets the value for EndDate to be an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetEndDateNil() {
	o.EndDate.Set(nil)
}

// UnsetEndDate ensures that no value is present for EndDate, not even an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) UnsetEndDate() {
	o.EndDate.Unset()
}

// GetMarketingId returns the MarketingId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetMarketingId() string {
	if o == nil || IsNil(o.MarketingId.Get()) {
		var ret string
		return ret
	}
	return *o.MarketingId.Get()
}

// GetMarketingIdOk returns a tuple with the MarketingId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetMarketingIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MarketingId.Get(), o.MarketingId.IsSet()
}

// HasMarketingId returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) HasMarketingId() bool {
	if o != nil && o.MarketingId.IsSet() {
		return true
	}

	return false
}

// SetMarketingId gets a reference to the given NullableString and assigns it to the MarketingId field.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetMarketingId(v string) {
	o.MarketingId.Set(&v)
}

// SetMarketingIdNil sets the value for MarketingId to be an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetMarketingIdNil() {
	o.MarketingId.Set(nil)
}

// UnsetMarketingId ensures that no value is present for MarketingId, not even an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) UnsetMarketingId() {
	o.MarketingId.Unset()
}

// GetSaleLicense returns the SaleLicense field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetSaleLicense() string {
	if o == nil || IsNil(o.SaleLicense.Get()) {
		var ret string
		return ret
	}
	return *o.SaleLicense.Get()
}

// GetSaleLicenseOk returns a tuple with the SaleLicense field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetSaleLicenseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SaleLicense.Get(), o.SaleLicense.IsSet()
}

// HasSaleLicense returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) HasSaleLicense() bool {
	if o != nil && o.SaleLicense.IsSet() {
		return true
	}

	return false
}

// SetSaleLicense gets a reference to the given NullableString and assigns it to the SaleLicense field.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetSaleLicense(v string) {
	o.SaleLicense.Set(&v)
}

// SetSaleLicenseNil sets the value for SaleLicense to be an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetSaleLicenseNil() {
	o.SaleLicense.Set(nil)
}

// UnsetSaleLicense ensures that no value is present for SaleLicense, not even an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) UnsetSaleLicense() {
	o.SaleLicense.Unset()
}

// GetOpenDate returns the OpenDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetOpenDate() string {
	if o == nil || IsNil(o.OpenDate.Get()) {
		var ret string
		return ret
	}
	return *o.OpenDate.Get()
}

// GetOpenDateOk returns a tuple with the OpenDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetOpenDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OpenDate.Get(), o.OpenDate.IsSet()
}

// HasOpenDate returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) HasOpenDate() bool {
	if o != nil && o.OpenDate.IsSet() {
		return true
	}

	return false
}

// SetOpenDate gets a reference to the given NullableString and assigns it to the OpenDate field.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetOpenDate(v string) {
	o.OpenDate.Set(&v)
}

// SetOpenDateNil sets the value for OpenDate to be an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetOpenDateNil() {
	o.OpenDate.Set(nil)
}

// UnsetOpenDate ensures that no value is present for OpenDate, not even an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) UnsetOpenDate() {
	o.OpenDate.Unset()
}

// GetUserAccountId returns the UserAccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetUserAccountId() string {
	if o == nil || IsNil(o.UserAccountId.Get()) {
		var ret string
		return ret
	}
	return *o.UserAccountId.Get()
}

// GetUserAccountIdOk returns a tuple with the UserAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetUserAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserAccountId.Get(), o.UserAccountId.IsSet()
}

// HasUserAccountId returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) HasUserAccountId() bool {
	if o != nil && o.UserAccountId.IsSet() {
		return true
	}

	return false
}

// SetUserAccountId gets a reference to the given NullableString and assigns it to the UserAccountId field.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetUserAccountId(v string) {
	o.UserAccountId.Set(&v)
}

// SetUserAccountIdNil sets the value for UserAccountId to be an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetUserAccountIdNil() {
	o.UserAccountId.Set(nil)
}

// UnsetUserAccountId ensures that no value is present for UserAccountId, not even an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) UnsetUserAccountId() {
	o.UserAccountId.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given NullableTime and assigns it to the UpdatedAt field.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetUpdatedAt(v time.Time) {
	o.UpdatedAt.Set(&v)
}

// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetUpdatedAtNil() {
	o.UpdatedAt.Set(nil)
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

// GetExternalAccounts returns the ExternalAccounts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetExternalAccounts() []PiUserDomainAggregatesModelExternalAccountAggregateExternalAccount {
	if o == nil {
		var ret []PiUserDomainAggregatesModelExternalAccountAggregateExternalAccount
		return ret
	}
	return o.ExternalAccounts
}

// GetExternalAccountsOk returns a tuple with the ExternalAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetExternalAccountsOk() ([]PiUserDomainAggregatesModelExternalAccountAggregateExternalAccount, bool) {
	if o == nil || IsNil(o.ExternalAccounts) {
		return nil, false
	}
	return o.ExternalAccounts, true
}

// HasExternalAccounts returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) HasExternalAccounts() bool {
	if o != nil && !IsNil(o.ExternalAccounts) {
		return true
	}

	return false
}

// SetExternalAccounts gets a reference to the given []PiUserDomainAggregatesModelExternalAccountAggregateExternalAccount and assigns it to the ExternalAccounts field.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetExternalAccounts(v []PiUserDomainAggregatesModelExternalAccountAggregateExternalAccount) {
	o.ExternalAccounts = v
}

// GetTradeAccountBankAccounts returns the TradeAccountBankAccounts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetTradeAccountBankAccounts() []PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount {
	if o == nil {
		var ret []PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount
		return ret
	}
	return o.TradeAccountBankAccounts
}

// GetTradeAccountBankAccountsOk returns a tuple with the TradeAccountBankAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) GetTradeAccountBankAccountsOk() ([]PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount, bool) {
	if o == nil || IsNil(o.TradeAccountBankAccounts) {
		return nil, false
	}
	return o.TradeAccountBankAccounts, true
}

// HasTradeAccountBankAccounts returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) HasTradeAccountBankAccounts() bool {
	if o != nil && !IsNil(o.TradeAccountBankAccounts) {
		return true
	}

	return false
}

// SetTradeAccountBankAccounts gets a reference to the given []PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount and assigns it to the TradeAccountBankAccounts field.
func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) SetTradeAccountBankAccounts(v []PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) {
	o.TradeAccountBankAccounts = v
}

func (o PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rowVersion"] = o.RowVersion
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.AccountNumber.IsSet() {
		toSerialize["accountNumber"] = o.AccountNumber.Get()
	}
	if !IsNil(o.AccountType) {
		toSerialize["accountType"] = o.AccountType
	}
	if o.AccountTypeCode.IsSet() {
		toSerialize["accountTypeCode"] = o.AccountTypeCode.Get()
	}
	if o.ExchangeMarketId.IsSet() {
		toSerialize["exchangeMarketId"] = o.ExchangeMarketId.Get()
	}
	if o.AccountStatus.IsSet() {
		toSerialize["accountStatus"] = o.AccountStatus.Get()
	}
	if !IsNil(o.CreditLine) {
		toSerialize["creditLine"] = o.CreditLine
	}
	if o.CreditLineCurrency.IsSet() {
		toSerialize["creditLineCurrency"] = o.CreditLineCurrency.Get()
	}
	if o.EffectiveDate.IsSet() {
		toSerialize["effectiveDate"] = o.EffectiveDate.Get()
	}
	if o.EndDate.IsSet() {
		toSerialize["endDate"] = o.EndDate.Get()
	}
	if o.MarketingId.IsSet() {
		toSerialize["marketingId"] = o.MarketingId.Get()
	}
	if o.SaleLicense.IsSet() {
		toSerialize["saleLicense"] = o.SaleLicense.Get()
	}
	if o.OpenDate.IsSet() {
		toSerialize["openDate"] = o.OpenDate.Get()
	}
	if o.UserAccountId.IsSet() {
		toSerialize["userAccountId"] = o.UserAccountId.Get()
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.UpdatedAt.IsSet() {
		toSerialize["updatedAt"] = o.UpdatedAt.Get()
	}
	if o.ExternalAccounts != nil {
		toSerialize["externalAccounts"] = o.ExternalAccounts
	}
	if o.TradeAccountBankAccounts != nil {
		toSerialize["tradeAccountBankAccounts"] = o.TradeAccountBankAccounts
	}
	return toSerialize, nil
}

func (o *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rowVersion",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPiUserDomainAggregatesModelTradeAccountAggregateTradeAccount := _PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPiUserDomainAggregatesModelTradeAccountAggregateTradeAccount)

	if err != nil {
		return err
	}

	*o = PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount(varPiUserDomainAggregatesModelTradeAccountAggregateTradeAccount)

	return err
}

type NullablePiUserDomainAggregatesModelTradeAccountAggregateTradeAccount struct {
	value *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount
	isSet bool
}

func (v NullablePiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) Get() *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount {
	return v.value
}

func (v *NullablePiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) Set(val *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) {
	v.value = val
	v.isSet = true
}

func (v NullablePiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) IsSet() bool {
	return v.isSet
}

func (v *NullablePiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePiUserDomainAggregatesModelTradeAccountAggregateTradeAccount(val *PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) *NullablePiUserDomainAggregatesModelTradeAccountAggregateTradeAccount {
	return &NullablePiUserDomainAggregatesModelTradeAccountAggregateTradeAccount{value: val, isSet: true}
}

func (v NullablePiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
