/*
Pi.User.API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"encoding/json"
	"time"
)

// checks if the PiUserApplicationModelsExaminationExaminationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PiUserApplicationModelsExaminationExaminationDto{}

// PiUserApplicationModelsExaminationExaminationDto struct for PiUserApplicationModelsExaminationExaminationDto
type PiUserApplicationModelsExaminationExaminationDto struct {
	Id        *string        `json:"id,omitempty"`
	ExamId    *string        `json:"examId,omitempty"`
	ExamName  NullableString `json:"examName,omitempty"`
	Score     *int32         `json:"score,omitempty"`
	ExpiredAt *time.Time     `json:"expiredAt,omitempty"`
	Grade     NullableString `json:"grade,omitempty"`
	UpdatedAt *time.Time     `json:"updatedAt,omitempty"`
}

// NewPiUserApplicationModelsExaminationExaminationDto instantiates a new PiUserApplicationModelsExaminationExaminationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPiUserApplicationModelsExaminationExaminationDto() *PiUserApplicationModelsExaminationExaminationDto {
	this := PiUserApplicationModelsExaminationExaminationDto{}
	return &this
}

// NewPiUserApplicationModelsExaminationExaminationDtoWithDefaults instantiates a new PiUserApplicationModelsExaminationExaminationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPiUserApplicationModelsExaminationExaminationDtoWithDefaults() *PiUserApplicationModelsExaminationExaminationDto {
	this := PiUserApplicationModelsExaminationExaminationDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PiUserApplicationModelsExaminationExaminationDto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserApplicationModelsExaminationExaminationDto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PiUserApplicationModelsExaminationExaminationDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PiUserApplicationModelsExaminationExaminationDto) SetId(v string) {
	o.Id = &v
}

// GetExamId returns the ExamId field value if set, zero value otherwise.
func (o *PiUserApplicationModelsExaminationExaminationDto) GetExamId() string {
	if o == nil || IsNil(o.ExamId) {
		var ret string
		return ret
	}
	return *o.ExamId
}

// GetExamIdOk returns a tuple with the ExamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserApplicationModelsExaminationExaminationDto) GetExamIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExamId) {
		return nil, false
	}
	return o.ExamId, true
}

// HasExamId returns a boolean if a field has been set.
func (o *PiUserApplicationModelsExaminationExaminationDto) HasExamId() bool {
	if o != nil && !IsNil(o.ExamId) {
		return true
	}

	return false
}

// SetExamId gets a reference to the given string and assigns it to the ExamId field.
func (o *PiUserApplicationModelsExaminationExaminationDto) SetExamId(v string) {
	o.ExamId = &v
}

// GetExamName returns the ExamName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserApplicationModelsExaminationExaminationDto) GetExamName() string {
	if o == nil || IsNil(o.ExamName.Get()) {
		var ret string
		return ret
	}
	return *o.ExamName.Get()
}

// GetExamNameOk returns a tuple with the ExamName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserApplicationModelsExaminationExaminationDto) GetExamNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExamName.Get(), o.ExamName.IsSet()
}

// HasExamName returns a boolean if a field has been set.
func (o *PiUserApplicationModelsExaminationExaminationDto) HasExamName() bool {
	if o != nil && o.ExamName.IsSet() {
		return true
	}

	return false
}

// SetExamName gets a reference to the given NullableString and assigns it to the ExamName field.
func (o *PiUserApplicationModelsExaminationExaminationDto) SetExamName(v string) {
	o.ExamName.Set(&v)
}

// SetExamNameNil sets the value for ExamName to be an explicit nil
func (o *PiUserApplicationModelsExaminationExaminationDto) SetExamNameNil() {
	o.ExamName.Set(nil)
}

// UnsetExamName ensures that no value is present for ExamName, not even an explicit nil
func (o *PiUserApplicationModelsExaminationExaminationDto) UnsetExamName() {
	o.ExamName.Unset()
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *PiUserApplicationModelsExaminationExaminationDto) GetScore() int32 {
	if o == nil || IsNil(o.Score) {
		var ret int32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserApplicationModelsExaminationExaminationDto) GetScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *PiUserApplicationModelsExaminationExaminationDto) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given int32 and assigns it to the Score field.
func (o *PiUserApplicationModelsExaminationExaminationDto) SetScore(v int32) {
	o.Score = &v
}

// GetExpiredAt returns the ExpiredAt field value if set, zero value otherwise.
func (o *PiUserApplicationModelsExaminationExaminationDto) GetExpiredAt() time.Time {
	if o == nil || IsNil(o.ExpiredAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiredAt
}

// GetExpiredAtOk returns a tuple with the ExpiredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserApplicationModelsExaminationExaminationDto) GetExpiredAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiredAt) {
		return nil, false
	}
	return o.ExpiredAt, true
}

// HasExpiredAt returns a boolean if a field has been set.
func (o *PiUserApplicationModelsExaminationExaminationDto) HasExpiredAt() bool {
	if o != nil && !IsNil(o.ExpiredAt) {
		return true
	}

	return false
}

// SetExpiredAt gets a reference to the given time.Time and assigns it to the ExpiredAt field.
func (o *PiUserApplicationModelsExaminationExaminationDto) SetExpiredAt(v time.Time) {
	o.ExpiredAt = &v
}

// GetGrade returns the Grade field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserApplicationModelsExaminationExaminationDto) GetGrade() string {
	if o == nil || IsNil(o.Grade.Get()) {
		var ret string
		return ret
	}
	return *o.Grade.Get()
}

// GetGradeOk returns a tuple with the Grade field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserApplicationModelsExaminationExaminationDto) GetGradeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Grade.Get(), o.Grade.IsSet()
}

// HasGrade returns a boolean if a field has been set.
func (o *PiUserApplicationModelsExaminationExaminationDto) HasGrade() bool {
	if o != nil && o.Grade.IsSet() {
		return true
	}

	return false
}

// SetGrade gets a reference to the given NullableString and assigns it to the Grade field.
func (o *PiUserApplicationModelsExaminationExaminationDto) SetGrade(v string) {
	o.Grade.Set(&v)
}

// SetGradeNil sets the value for Grade to be an explicit nil
func (o *PiUserApplicationModelsExaminationExaminationDto) SetGradeNil() {
	o.Grade.Set(nil)
}

// UnsetGrade ensures that no value is present for Grade, not even an explicit nil
func (o *PiUserApplicationModelsExaminationExaminationDto) UnsetGrade() {
	o.Grade.Unset()
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *PiUserApplicationModelsExaminationExaminationDto) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserApplicationModelsExaminationExaminationDto) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PiUserApplicationModelsExaminationExaminationDto) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *PiUserApplicationModelsExaminationExaminationDto) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o PiUserApplicationModelsExaminationExaminationDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PiUserApplicationModelsExaminationExaminationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ExamId) {
		toSerialize["examId"] = o.ExamId
	}
	if o.ExamName.IsSet() {
		toSerialize["examName"] = o.ExamName.Get()
	}
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	if !IsNil(o.ExpiredAt) {
		toSerialize["expiredAt"] = o.ExpiredAt
	}
	if o.Grade.IsSet() {
		toSerialize["grade"] = o.Grade.Get()
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullablePiUserApplicationModelsExaminationExaminationDto struct {
	value *PiUserApplicationModelsExaminationExaminationDto
	isSet bool
}

func (v NullablePiUserApplicationModelsExaminationExaminationDto) Get() *PiUserApplicationModelsExaminationExaminationDto {
	return v.value
}

func (v *NullablePiUserApplicationModelsExaminationExaminationDto) Set(val *PiUserApplicationModelsExaminationExaminationDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePiUserApplicationModelsExaminationExaminationDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePiUserApplicationModelsExaminationExaminationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePiUserApplicationModelsExaminationExaminationDto(val *PiUserApplicationModelsExaminationExaminationDto) *NullablePiUserApplicationModelsExaminationExaminationDto {
	return &NullablePiUserApplicationModelsExaminationExaminationDto{value: val, isSet: true}
}

func (v NullablePiUserApplicationModelsExaminationExaminationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePiUserApplicationModelsExaminationExaminationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
