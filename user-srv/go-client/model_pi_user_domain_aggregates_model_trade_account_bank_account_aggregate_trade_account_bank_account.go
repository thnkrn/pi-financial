/*
Pi.User.API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount{}

// PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount struct for PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount
type PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount struct {
	RowVersion      string         `json:"rowVersion"`
	Id              *string        `json:"id,omitempty"`
	RpType          NullableString `json:"rpType,omitempty"`
	PaymentType     NullableString `json:"paymentType,omitempty"`
	TransactionType NullableString `json:"transactionType,omitempty"`
	BankAccountId   *string        `json:"bankAccountId,omitempty"`
	TradeAccountId  *string        `json:"tradeAccountId,omitempty"`
}

type _PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount

// NewPiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount instantiates a new PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount(rowVersion string) *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount {
	this := PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount{}
	this.RowVersion = rowVersion
	return &this
}

// NewPiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccountWithDefaults instantiates a new PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccountWithDefaults() *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount {
	this := PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount{}
	return &this
}

// GetRowVersion returns the RowVersion field value
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) GetRowVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RowVersion
}

// GetRowVersionOk returns a tuple with the RowVersion field value
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) GetRowVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RowVersion, true
}

// SetRowVersion sets field value
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) SetRowVersion(v string) {
	o.RowVersion = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) SetId(v string) {
	o.Id = &v
}

// GetRpType returns the RpType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) GetRpType() string {
	if o == nil || IsNil(o.RpType.Get()) {
		var ret string
		return ret
	}
	return *o.RpType.Get()
}

// GetRpTypeOk returns a tuple with the RpType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) GetRpTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RpType.Get(), o.RpType.IsSet()
}

// HasRpType returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) HasRpType() bool {
	if o != nil && o.RpType.IsSet() {
		return true
	}

	return false
}

// SetRpType gets a reference to the given NullableString and assigns it to the RpType field.
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) SetRpType(v string) {
	o.RpType.Set(&v)
}

// SetRpTypeNil sets the value for RpType to be an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) SetRpTypeNil() {
	o.RpType.Set(nil)
}

// UnsetRpType ensures that no value is present for RpType, not even an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) UnsetRpType() {
	o.RpType.Unset()
}

// GetPaymentType returns the PaymentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) GetPaymentType() string {
	if o == nil || IsNil(o.PaymentType.Get()) {
		var ret string
		return ret
	}
	return *o.PaymentType.Get()
}

// GetPaymentTypeOk returns a tuple with the PaymentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) GetPaymentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PaymentType.Get(), o.PaymentType.IsSet()
}

// HasPaymentType returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) HasPaymentType() bool {
	if o != nil && o.PaymentType.IsSet() {
		return true
	}

	return false
}

// SetPaymentType gets a reference to the given NullableString and assigns it to the PaymentType field.
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) SetPaymentType(v string) {
	o.PaymentType.Set(&v)
}

// SetPaymentTypeNil sets the value for PaymentType to be an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) SetPaymentTypeNil() {
	o.PaymentType.Set(nil)
}

// UnsetPaymentType ensures that no value is present for PaymentType, not even an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) UnsetPaymentType() {
	o.PaymentType.Unset()
}

// GetTransactionType returns the TransactionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) GetTransactionType() string {
	if o == nil || IsNil(o.TransactionType.Get()) {
		var ret string
		return ret
	}
	return *o.TransactionType.Get()
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) GetTransactionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransactionType.Get(), o.TransactionType.IsSet()
}

// HasTransactionType returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) HasTransactionType() bool {
	if o != nil && o.TransactionType.IsSet() {
		return true
	}

	return false
}

// SetTransactionType gets a reference to the given NullableString and assigns it to the TransactionType field.
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) SetTransactionType(v string) {
	o.TransactionType.Set(&v)
}

// SetTransactionTypeNil sets the value for TransactionType to be an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) SetTransactionTypeNil() {
	o.TransactionType.Set(nil)
}

// UnsetTransactionType ensures that no value is present for TransactionType, not even an explicit nil
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) UnsetTransactionType() {
	o.TransactionType.Unset()
}

// GetBankAccountId returns the BankAccountId field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) GetBankAccountId() string {
	if o == nil || IsNil(o.BankAccountId) {
		var ret string
		return ret
	}
	return *o.BankAccountId
}

// GetBankAccountIdOk returns a tuple with the BankAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) GetBankAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.BankAccountId) {
		return nil, false
	}
	return o.BankAccountId, true
}

// HasBankAccountId returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) HasBankAccountId() bool {
	if o != nil && !IsNil(o.BankAccountId) {
		return true
	}

	return false
}

// SetBankAccountId gets a reference to the given string and assigns it to the BankAccountId field.
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) SetBankAccountId(v string) {
	o.BankAccountId = &v
}

// GetTradeAccountId returns the TradeAccountId field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) GetTradeAccountId() string {
	if o == nil || IsNil(o.TradeAccountId) {
		var ret string
		return ret
	}
	return *o.TradeAccountId
}

// GetTradeAccountIdOk returns a tuple with the TradeAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) GetTradeAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.TradeAccountId) {
		return nil, false
	}
	return o.TradeAccountId, true
}

// HasTradeAccountId returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) HasTradeAccountId() bool {
	if o != nil && !IsNil(o.TradeAccountId) {
		return true
	}

	return false
}

// SetTradeAccountId gets a reference to the given string and assigns it to the TradeAccountId field.
func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) SetTradeAccountId(v string) {
	o.TradeAccountId = &v
}

func (o PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rowVersion"] = o.RowVersion
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.RpType.IsSet() {
		toSerialize["rpType"] = o.RpType.Get()
	}
	if o.PaymentType.IsSet() {
		toSerialize["paymentType"] = o.PaymentType.Get()
	}
	if o.TransactionType.IsSet() {
		toSerialize["transactionType"] = o.TransactionType.Get()
	}
	if !IsNil(o.BankAccountId) {
		toSerialize["bankAccountId"] = o.BankAccountId
	}
	if !IsNil(o.TradeAccountId) {
		toSerialize["tradeAccountId"] = o.TradeAccountId
	}
	return toSerialize, nil
}

func (o *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rowVersion",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount := _PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount)

	if err != nil {
		return err
	}

	*o = PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount(varPiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount)

	return err
}

type NullablePiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount struct {
	value *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount
	isSet bool
}

func (v NullablePiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) Get() *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount {
	return v.value
}

func (v *NullablePiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) Set(val *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) {
	v.value = val
	v.isSet = true
}

func (v NullablePiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) IsSet() bool {
	return v.isSet
}

func (v *NullablePiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount(val *PiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) *NullablePiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount {
	return &NullablePiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount{value: val, isSet: true}
}

func (v NullablePiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePiUserDomainAggregatesModelTradeAccountBankAccountAggregateTradeAccountBankAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
