/*
Pi.User.API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
)

// UserBankAccountAPIService UserBankAccountAPI service
type UserBankAccountAPIService service

type ApiDeleteBankAccountByUserIdRequest struct {
	ctx        context.Context
	ApiService *UserBankAccountAPIService
	userId     string
}

func (r ApiDeleteBankAccountByUserIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteBankAccountByUserIdExecute(r)
}

/*
DeleteBankAccountByUserId Method for DeleteBankAccountByUserId

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId
	@return ApiDeleteBankAccountByUserIdRequest
*/
func (a *UserBankAccountAPIService) DeleteBankAccountByUserId(ctx context.Context, userId string) ApiDeleteBankAccountByUserIdRequest {
	return ApiDeleteBankAccountByUserIdRequest{
		ApiService: a,
		ctx:        ctx,
		userId:     userId,
	}
}

// Execute executes the request
func (a *UserBankAccountAPIService) DeleteBankAccountByUserIdExecute(r ApiDeleteBankAccountByUserIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserBankAccountAPIService.DeleteBankAccountByUserId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/bank-account/{userId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetBankAccountByUserIdRequest struct {
	ctx        context.Context
	ApiService *UserBankAccountAPIService
	userId     string
}

func (r ApiGetBankAccountByUserIdRequest) Execute() (*PiUserApplicationModelsBankAccountBankAccountDtoApiResponse, *http.Response, error) {
	return r.ApiService.GetBankAccountByUserIdExecute(r)
}

/*
GetBankAccountByUserId Method for GetBankAccountByUserId

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param userId
	@return ApiGetBankAccountByUserIdRequest
*/
func (a *UserBankAccountAPIService) GetBankAccountByUserId(ctx context.Context, userId string) ApiGetBankAccountByUserIdRequest {
	return ApiGetBankAccountByUserIdRequest{
		ApiService: a,
		ctx:        ctx,
		userId:     userId,
	}
}

// Execute executes the request
//
//	@return PiUserApplicationModelsBankAccountBankAccountDtoApiResponse
func (a *UserBankAccountAPIService) GetBankAccountByUserIdExecute(r ApiGetBankAccountByUserIdRequest) (*PiUserApplicationModelsBankAccountBankAccountDtoApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiUserApplicationModelsBankAccountBankAccountDtoApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserBankAccountAPIService.GetBankAccountByUserId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/bank-account/{userId}"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateBankAccountRequest struct {
	ctx             context.Context
	ApiService      *UserBankAccountAPIService
	userId          *string
	bankAccountNo   *string
	bankAccountName *string
	bankCode        *string
	bankBranchCode  *string
	bookbank        *os.File
}

func (r ApiUpdateBankAccountRequest) UserId(userId string) ApiUpdateBankAccountRequest {
	r.userId = &userId
	return r
}

func (r ApiUpdateBankAccountRequest) BankAccountNo(bankAccountNo string) ApiUpdateBankAccountRequest {
	r.bankAccountNo = &bankAccountNo
	return r
}

func (r ApiUpdateBankAccountRequest) BankAccountName(bankAccountName string) ApiUpdateBankAccountRequest {
	r.bankAccountName = &bankAccountName
	return r
}

func (r ApiUpdateBankAccountRequest) BankCode(bankCode string) ApiUpdateBankAccountRequest {
	r.bankCode = &bankCode
	return r
}

func (r ApiUpdateBankAccountRequest) BankBranchCode(bankBranchCode string) ApiUpdateBankAccountRequest {
	r.bankBranchCode = &bankBranchCode
	return r
}

func (r ApiUpdateBankAccountRequest) Bookbank(bookbank *os.File) ApiUpdateBankAccountRequest {
	r.bookbank = bookbank
	return r
}

func (r ApiUpdateBankAccountRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateBankAccountExecute(r)
}

/*
UpdateBankAccount Method for UpdateBankAccount

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUpdateBankAccountRequest
*/
func (a *UserBankAccountAPIService) UpdateBankAccount(ctx context.Context) ApiUpdateBankAccountRequest {
	return ApiUpdateBankAccountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *UserBankAccountAPIService) UpdateBankAccountExecute(r ApiUpdateBankAccountRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserBankAccountAPIService.UpdateBankAccount")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/secure/bank-account"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	if r.bankAccountNo != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "BankAccountNo", r.bankAccountNo, "form", "")
	}
	if r.bankAccountName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "BankAccountName", r.bankAccountName, "form", "")
	}
	if r.bankCode != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "BankCode", r.bankCode, "form", "")
	}
	if r.bankBranchCode != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "BankBranchCode", r.bankBranchCode, "form", "")
	}
	var bookbankLocalVarFormFileName string
	var bookbankLocalVarFileName string
	var bookbankLocalVarFileBytes []byte

	bookbankLocalVarFormFileName = "Bookbank"
	bookbankLocalVarFile := r.bookbank

	if bookbankLocalVarFile != nil {
		fbs, _ := io.ReadAll(bookbankLocalVarFile)

		bookbankLocalVarFileBytes = fbs
		bookbankLocalVarFileName = bookbankLocalVarFile.Name()
		bookbankLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: bookbankLocalVarFileBytes, fileName: bookbankLocalVarFileName, formFileName: bookbankLocalVarFormFileName})
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUploadBankAccountDocumentRequest struct {
	ctx        context.Context
	ApiService *UserBankAccountAPIService
	userId     *string
	statements []*os.File
}

func (r ApiUploadBankAccountDocumentRequest) UserId(userId string) ApiUploadBankAccountDocumentRequest {
	r.userId = &userId
	return r
}

func (r ApiUploadBankAccountDocumentRequest) Statements(statements []*os.File) ApiUploadBankAccountDocumentRequest {
	r.statements = statements
	return r
}

func (r ApiUploadBankAccountDocumentRequest) Execute() (*http.Response, error) {
	return r.ApiService.UploadBankAccountDocumentExecute(r)
}

/*
UploadBankAccountDocument Method for UploadBankAccountDocument

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUploadBankAccountDocumentRequest
*/
func (a *UserBankAccountAPIService) UploadBankAccountDocument(ctx context.Context) ApiUploadBankAccountDocumentRequest {
	return ApiUploadBankAccountDocumentRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *UserBankAccountAPIService) UploadBankAccountDocumentExecute(r ApiUploadBankAccountDocumentRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserBankAccountAPIService.UploadBankAccountDocument")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/secure/bank-account/upload-document"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	var statementsLocalVarFormFileName string
	var statementsLocalVarFileName string
	var statementsLocalVarFileBytes []byte

	statementsLocalVarFormFileName = "Statements"
	statementsLocalVarFile := r.statements

	if statementsLocalVarFile != nil {
		// loop through the array to prepare multiple files upload
		for _, statementsLocalVarFileValue := range statementsLocalVarFile {
			fbs, _ := io.ReadAll(statementsLocalVarFileValue)

			statementsLocalVarFileBytes = fbs
			statementsLocalVarFileName = statementsLocalVarFileValue.Name()
			statementsLocalVarFileValue.Close()
			formFiles = append(formFiles, formFile{fileBytes: statementsLocalVarFileBytes, fileName: statementsLocalVarFileName, formFileName: statementsLocalVarFormFileName})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
