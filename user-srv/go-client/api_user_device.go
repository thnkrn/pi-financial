/*
Pi.User.API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// UserDeviceAPIService UserDeviceAPI service
type UserDeviceAPIService service

type ApiInternalUserDeviceDeleteRequest struct {
	ctx        context.Context
	ApiService *UserDeviceAPIService
	userId     *string
	deviceId   *string
}

func (r ApiInternalUserDeviceDeleteRequest) UserId(userId string) ApiInternalUserDeviceDeleteRequest {
	r.userId = &userId
	return r
}

func (r ApiInternalUserDeviceDeleteRequest) DeviceId(deviceId string) ApiInternalUserDeviceDeleteRequest {
	r.deviceId = &deviceId
	return r
}

func (r ApiInternalUserDeviceDeleteRequest) Execute() (*PiUserAPIModelsUpdateUserInfoTicketIdApiResponse, *http.Response, error) {
	return r.ApiService.InternalUserDeviceDeleteExecute(r)
}

/*
InternalUserDeviceDelete Method for InternalUserDeviceDelete

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalUserDeviceDeleteRequest
*/
func (a *UserDeviceAPIService) InternalUserDeviceDelete(ctx context.Context) ApiInternalUserDeviceDeleteRequest {
	return ApiInternalUserDeviceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiUserAPIModelsUpdateUserInfoTicketIdApiResponse
func (a *UserDeviceAPIService) InternalUserDeviceDeleteExecute(r ApiInternalUserDeviceDeleteRequest) (*PiUserAPIModelsUpdateUserInfoTicketIdApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiUserAPIModelsUpdateUserInfoTicketIdApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserDeviceAPIService.InternalUserDeviceDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/user/device"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "deviceId", r.deviceId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInternalUserDevicePostRequest struct {
	ctx                                        context.Context
	ApiService                                 *UserDeviceAPIService
	userId                                     *string
	deviceId                                   *string
	device                                     *string
	acceptLanguage                             *string
	piUserAPIModelsCreateOrUpdateDeviceRequest *PiUserAPIModelsCreateOrUpdateDeviceRequest
}

func (r ApiInternalUserDevicePostRequest) UserId(userId string) ApiInternalUserDevicePostRequest {
	r.userId = &userId
	return r
}

func (r ApiInternalUserDevicePostRequest) DeviceId(deviceId string) ApiInternalUserDevicePostRequest {
	r.deviceId = &deviceId
	return r
}

func (r ApiInternalUserDevicePostRequest) Device(device string) ApiInternalUserDevicePostRequest {
	r.device = &device
	return r
}

func (r ApiInternalUserDevicePostRequest) AcceptLanguage(acceptLanguage string) ApiInternalUserDevicePostRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiInternalUserDevicePostRequest) PiUserAPIModelsCreateOrUpdateDeviceRequest(piUserAPIModelsCreateOrUpdateDeviceRequest PiUserAPIModelsCreateOrUpdateDeviceRequest) ApiInternalUserDevicePostRequest {
	r.piUserAPIModelsCreateOrUpdateDeviceRequest = &piUserAPIModelsCreateOrUpdateDeviceRequest
	return r
}

func (r ApiInternalUserDevicePostRequest) Execute() (*PiUserAPIModelsUpdateUserInfoTicketIdApiResponse, *http.Response, error) {
	return r.ApiService.InternalUserDevicePostExecute(r)
}

/*
InternalUserDevicePost Internal Create or update device

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalUserDevicePostRequest
*/
func (a *UserDeviceAPIService) InternalUserDevicePost(ctx context.Context) ApiInternalUserDevicePostRequest {
	return ApiInternalUserDevicePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiUserAPIModelsUpdateUserInfoTicketIdApiResponse
func (a *UserDeviceAPIService) InternalUserDevicePostExecute(r ApiInternalUserDevicePostRequest) (*PiUserAPIModelsUpdateUserInfoTicketIdApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiUserAPIModelsUpdateUserInfoTicketIdApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserDeviceAPIService.InternalUserDevicePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/user/device"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}
	if r.device == nil {
		return localVarReturnValue, nil, reportError("device is required and must be specified")
	}
	if r.acceptLanguage == nil {
		return localVarReturnValue, nil, reportError("acceptLanguage is required and must be specified")
	}
	if r.piUserAPIModelsCreateOrUpdateDeviceRequest == nil {
		return localVarReturnValue, nil, reportError("piUserAPIModelsCreateOrUpdateDeviceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "deviceId", r.deviceId, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "device", r.device, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	// body params
	localVarPostBody = r.piUserAPIModelsCreateOrUpdateDeviceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInternalUserIdDeviceGetRequest struct {
	ctx        context.Context
	ApiService *UserDeviceAPIService
	id         string
}

func (r ApiInternalUserIdDeviceGetRequest) Execute() (*PiUserAPIModelsDeviceResponseListApiResponse, *http.Response, error) {
	return r.ApiService.InternalUserIdDeviceGetExecute(r)
}

/*
InternalUserIdDeviceGet Method for InternalUserIdDeviceGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiInternalUserIdDeviceGetRequest
*/
func (a *UserDeviceAPIService) InternalUserIdDeviceGet(ctx context.Context, id string) ApiInternalUserIdDeviceGetRequest {
	return ApiInternalUserIdDeviceGetRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PiUserAPIModelsDeviceResponseListApiResponse
func (a *UserDeviceAPIService) InternalUserIdDeviceGetExecute(r ApiInternalUserIdDeviceGetRequest) (*PiUserAPIModelsDeviceResponseListApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiUserAPIModelsDeviceResponseListApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserDeviceAPIService.InternalUserIdDeviceGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/user/{id}/device"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSecureUserDeviceDeleteRequest struct {
	ctx        context.Context
	ApiService *UserDeviceAPIService
	userId     *string
	deviceId   *string
}

func (r ApiSecureUserDeviceDeleteRequest) UserId(userId string) ApiSecureUserDeviceDeleteRequest {
	r.userId = &userId
	return r
}

func (r ApiSecureUserDeviceDeleteRequest) DeviceId(deviceId string) ApiSecureUserDeviceDeleteRequest {
	r.deviceId = &deviceId
	return r
}

func (r ApiSecureUserDeviceDeleteRequest) Execute() (*PiUserAPIModelsUpdateUserInfoTicketIdApiResponse, *http.Response, error) {
	return r.ApiService.SecureUserDeviceDeleteExecute(r)
}

/*
SecureUserDeviceDelete Method for SecureUserDeviceDelete

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSecureUserDeviceDeleteRequest
*/
func (a *UserDeviceAPIService) SecureUserDeviceDelete(ctx context.Context) ApiSecureUserDeviceDeleteRequest {
	return ApiSecureUserDeviceDeleteRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiUserAPIModelsUpdateUserInfoTicketIdApiResponse
func (a *UserDeviceAPIService) SecureUserDeviceDeleteExecute(r ApiSecureUserDeviceDeleteRequest) (*PiUserAPIModelsUpdateUserInfoTicketIdApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiUserAPIModelsUpdateUserInfoTicketIdApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserDeviceAPIService.SecureUserDeviceDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/secure/user/device"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "deviceId", r.deviceId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSecureUserDevicePostRequest struct {
	ctx                                        context.Context
	ApiService                                 *UserDeviceAPIService
	userId                                     *string
	deviceId                                   *string
	device                                     *string
	acceptLanguage                             *string
	piUserAPIModelsCreateOrUpdateDeviceRequest *PiUserAPIModelsCreateOrUpdateDeviceRequest
	sid                                        *string
}

func (r ApiSecureUserDevicePostRequest) UserId(userId string) ApiSecureUserDevicePostRequest {
	r.userId = &userId
	return r
}

func (r ApiSecureUserDevicePostRequest) DeviceId(deviceId string) ApiSecureUserDevicePostRequest {
	r.deviceId = &deviceId
	return r
}

func (r ApiSecureUserDevicePostRequest) Device(device string) ApiSecureUserDevicePostRequest {
	r.device = &device
	return r
}

func (r ApiSecureUserDevicePostRequest) AcceptLanguage(acceptLanguage string) ApiSecureUserDevicePostRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiSecureUserDevicePostRequest) PiUserAPIModelsCreateOrUpdateDeviceRequest(piUserAPIModelsCreateOrUpdateDeviceRequest PiUserAPIModelsCreateOrUpdateDeviceRequest) ApiSecureUserDevicePostRequest {
	r.piUserAPIModelsCreateOrUpdateDeviceRequest = &piUserAPIModelsCreateOrUpdateDeviceRequest
	return r
}

func (r ApiSecureUserDevicePostRequest) Sid(sid string) ApiSecureUserDevicePostRequest {
	r.sid = &sid
	return r
}

func (r ApiSecureUserDevicePostRequest) Execute() (*PiUserAPIModelsUpdateUserInfoTicketIdApiResponse, *http.Response, error) {
	return r.ApiService.SecureUserDevicePostExecute(r)
}

/*
SecureUserDevicePost Create or update device

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSecureUserDevicePostRequest
*/
func (a *UserDeviceAPIService) SecureUserDevicePost(ctx context.Context) ApiSecureUserDevicePostRequest {
	return ApiSecureUserDevicePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiUserAPIModelsUpdateUserInfoTicketIdApiResponse
func (a *UserDeviceAPIService) SecureUserDevicePostExecute(r ApiSecureUserDevicePostRequest) (*PiUserAPIModelsUpdateUserInfoTicketIdApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiUserAPIModelsUpdateUserInfoTicketIdApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserDeviceAPIService.SecureUserDevicePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/secure/user/device"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}
	if r.deviceId == nil {
		return localVarReturnValue, nil, reportError("deviceId is required and must be specified")
	}
	if r.device == nil {
		return localVarReturnValue, nil, reportError("device is required and must be specified")
	}
	if r.acceptLanguage == nil {
		return localVarReturnValue, nil, reportError("acceptLanguage is required and must be specified")
	}
	if r.piUserAPIModelsCreateOrUpdateDeviceRequest == nil {
		return localVarReturnValue, nil, reportError("piUserAPIModelsCreateOrUpdateDeviceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "deviceId", r.deviceId, "simple", "")
	parameterAddToHeaderOrQuery(localVarHeaderParams, "device", r.device, "simple", "")
	if r.sid != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Sid", r.sid, "simple", "")
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	// body params
	localVarPostBody = r.piUserAPIModelsCreateOrUpdateDeviceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
