/*
Pi.User.API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the PiUserDomainAggregatesModelUserAccountAggregateUserAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PiUserDomainAggregatesModelUserAccountAggregateUserAccount{}

// PiUserDomainAggregatesModelUserAccountAggregateUserAccount struct for PiUserDomainAggregatesModelUserAccountAggregateUserAccount
type PiUserDomainAggregatesModelUserAccountAggregateUserAccount struct {
	RowVersion      string                                                         `json:"rowVersion"`
	Id              NullableString                                                 `json:"id,omitempty"`
	UserAccountType *string                                                        `json:"userAccountType,omitempty"`
	UserId          *string                                                        `json:"userId,omitempty"`
	CreatedAt       *time.Time                                                     `json:"createdAt,omitempty"`
	UpdatedAt       NullableTime                                                   `json:"updatedAt,omitempty"`
	TradeAccounts   []PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount `json:"tradeAccounts,omitempty"`
}

type _PiUserDomainAggregatesModelUserAccountAggregateUserAccount PiUserDomainAggregatesModelUserAccountAggregateUserAccount

// NewPiUserDomainAggregatesModelUserAccountAggregateUserAccount instantiates a new PiUserDomainAggregatesModelUserAccountAggregateUserAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPiUserDomainAggregatesModelUserAccountAggregateUserAccount(rowVersion string) *PiUserDomainAggregatesModelUserAccountAggregateUserAccount {
	this := PiUserDomainAggregatesModelUserAccountAggregateUserAccount{}
	this.RowVersion = rowVersion
	return &this
}

// NewPiUserDomainAggregatesModelUserAccountAggregateUserAccountWithDefaults instantiates a new PiUserDomainAggregatesModelUserAccountAggregateUserAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPiUserDomainAggregatesModelUserAccountAggregateUserAccountWithDefaults() *PiUserDomainAggregatesModelUserAccountAggregateUserAccount {
	this := PiUserDomainAggregatesModelUserAccountAggregateUserAccount{}
	return &this
}

// GetRowVersion returns the RowVersion field value
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) GetRowVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RowVersion
}

// GetRowVersionOk returns a tuple with the RowVersion field value
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) GetRowVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RowVersion, true
}

// SetRowVersion sets field value
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) SetRowVersion(v string) {
	o.RowVersion = v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) SetId(v string) {
	o.Id.Set(&v)
}

// SetIdNil sets the value for Id to be an explicit nil
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) UnsetId() {
	o.Id.Unset()
}

// GetUserAccountType returns the UserAccountType field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) GetUserAccountType() string {
	if o == nil || IsNil(o.UserAccountType) {
		var ret string
		return ret
	}
	return *o.UserAccountType
}

// GetUserAccountTypeOk returns a tuple with the UserAccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) GetUserAccountTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UserAccountType) {
		return nil, false
	}
	return o.UserAccountType, true
}

// HasUserAccountType returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) HasUserAccountType() bool {
	if o != nil && !IsNil(o.UserAccountType) {
		return true
	}

	return false
}

// SetUserAccountType gets a reference to the given string and assigns it to the UserAccountType field.
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) SetUserAccountType(v string) {
	o.UserAccountType = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) SetUserId(v string) {
	o.UserId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given NullableTime and assigns it to the UpdatedAt field.
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) SetUpdatedAt(v time.Time) {
	o.UpdatedAt.Set(&v)
}

// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) SetUpdatedAtNil() {
	o.UpdatedAt.Set(nil)
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

// GetTradeAccounts returns the TradeAccounts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) GetTradeAccounts() []PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount {
	if o == nil {
		var ret []PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount
		return ret
	}
	return o.TradeAccounts
}

// GetTradeAccountsOk returns a tuple with the TradeAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) GetTradeAccountsOk() ([]PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount, bool) {
	if o == nil || IsNil(o.TradeAccounts) {
		return nil, false
	}
	return o.TradeAccounts, true
}

// HasTradeAccounts returns a boolean if a field has been set.
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) HasTradeAccounts() bool {
	if o != nil && !IsNil(o.TradeAccounts) {
		return true
	}

	return false
}

// SetTradeAccounts gets a reference to the given []PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount and assigns it to the TradeAccounts field.
func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) SetTradeAccounts(v []PiUserDomainAggregatesModelTradeAccountAggregateTradeAccount) {
	o.TradeAccounts = v
}

func (o PiUserDomainAggregatesModelUserAccountAggregateUserAccount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PiUserDomainAggregatesModelUserAccountAggregateUserAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rowVersion"] = o.RowVersion
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.UserAccountType) {
		toSerialize["userAccountType"] = o.UserAccountType
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.UpdatedAt.IsSet() {
		toSerialize["updatedAt"] = o.UpdatedAt.Get()
	}
	if o.TradeAccounts != nil {
		toSerialize["tradeAccounts"] = o.TradeAccounts
	}
	return toSerialize, nil
}

func (o *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rowVersion",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPiUserDomainAggregatesModelUserAccountAggregateUserAccount := _PiUserDomainAggregatesModelUserAccountAggregateUserAccount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPiUserDomainAggregatesModelUserAccountAggregateUserAccount)

	if err != nil {
		return err
	}

	*o = PiUserDomainAggregatesModelUserAccountAggregateUserAccount(varPiUserDomainAggregatesModelUserAccountAggregateUserAccount)

	return err
}

type NullablePiUserDomainAggregatesModelUserAccountAggregateUserAccount struct {
	value *PiUserDomainAggregatesModelUserAccountAggregateUserAccount
	isSet bool
}

func (v NullablePiUserDomainAggregatesModelUserAccountAggregateUserAccount) Get() *PiUserDomainAggregatesModelUserAccountAggregateUserAccount {
	return v.value
}

func (v *NullablePiUserDomainAggregatesModelUserAccountAggregateUserAccount) Set(val *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) {
	v.value = val
	v.isSet = true
}

func (v NullablePiUserDomainAggregatesModelUserAccountAggregateUserAccount) IsSet() bool {
	return v.isSet
}

func (v *NullablePiUserDomainAggregatesModelUserAccountAggregateUserAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePiUserDomainAggregatesModelUserAccountAggregateUserAccount(val *PiUserDomainAggregatesModelUserAccountAggregateUserAccount) *NullablePiUserDomainAggregatesModelUserAccountAggregateUserAccount {
	return &NullablePiUserDomainAggregatesModelUserAccountAggregateUserAccount{value: val, isSet: true}
}

func (v NullablePiUserDomainAggregatesModelUserAccountAggregateUserAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePiUserDomainAggregatesModelUserAccountAggregateUserAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
