# Use the official .NET 8 runtime image as the base image for the runtime environment
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
WORKDIR /app

RUN apt-get update && apt-get install -y stunnel4 tzdata

# Install tzdata and set the time zone
RUN apt-get update && apt-get install -y tzdata
#ENV TZ=UTC
ENV TZ=Asia/Bangkok
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Use the official .NET 8 SDK image as the build environment
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build

WORKDIR /src
COPY ["Pi.GlobalMarketDataRealTime.DataHandler/Pi.GlobalMarketDataRealTime.DataHandler.csproj", "Pi.GlobalMarketDataRealTime.DataHandler/"]
COPY ["Pi.GlobalMarketDataRealTime.Application/Pi.GlobalMarketDataRealTime.Application.csproj", "Pi.GlobalMarketDataRealTime.Application/"]
COPY ["Pi.GlobalMarketDataRealTime.Domain/Pi.GlobalMarketDataRealTime.Domain.csproj", "Pi.GlobalMarketDataRealTime.Domain/"]
COPY ["Pi.GlobalMarketDataRealTime.Infrastructure/Pi.GlobalMarketDataRealTime.Infrastructure.csproj", "Pi.GlobalMarketDataRealTime.Infrastructure/"]
COPY ["nuget.config", ""]
RUN dotnet restore "Pi.GlobalMarketDataRealTime.DataHandler/Pi.GlobalMarketDataRealTime.DataHandler.csproj"
COPY . .
WORKDIR "/src/Pi.GlobalMarketDataRealTime.DataHandler"

# Todo: Should use `Release` mode
RUN dotnet build "Pi.GlobalMarketDataRealTime.DataHandler.csproj" -c Release -o /app/build
# RUN dotnet build "Pi.GlobalMarketDataRealTime.DataHandler.csproj" -c Debug -o /app/build

FROM build AS publish

# Todo: Should use `Release` mode
RUN dotnet publish "Pi.GlobalMarketDataRealTime.DataHandler.csproj" -c Release -o /app/publish /p:UseAppHost=false
# RUN dotnet publish "Pi.GlobalMarketDataRealTime.DataHandler.csproj" -c Debug -o /app/publish /p:UseAppHost=false

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .

RUN mkdir -p /etc/stunnel/certs /var/log/stunnel

# Copy stunnel configuration and start script
COPY Pi.GlobalMarketDataRealTime.DataHandler/stunnel.conf /etc/stunnel/
COPY Pi.GlobalMarketDataRealTime.DataHandler/Bridges_CA.crt /etc/stunnel/certs/
COPY Pi.GlobalMarketDataRealTime.DataHandler/start.sh /app/
RUN chmod u+x /app/start.sh

ENTRYPOINT ["/app/start.sh"]
# ENTRYPOINT ["dotnet", "Pi.GlobalMarketDataRealTime.DataHandler.dll"]

# Command:
# docker build -t ge_realtime_data_handler_manual_build -f Pi.GlobalMarketDataRealTime.DataHandler/Dockerfile .