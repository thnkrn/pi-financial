/*
Pi.FundMarketData.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"encoding/json"
	"fmt"
)

// PiFundMarketDataConstantsInvestorAlert the model 'PiFundMarketDataConstantsInvestorAlert'
type PiFundMarketDataConstantsInvestorAlert string

// List of PiFundMarketDataConstantsInvestorAlert
const (
	PIFUNDMARKETDATACONSTANTSINVESTORALERT_UNKNOWN                           PiFundMarketDataConstantsInvestorAlert = "Unknown"
	PIFUNDMARKETDATACONSTANTSINVESTORALERT_RISK_FROM_CONCENTRATED_INVESTMENT PiFundMarketDataConstantsInvestorAlert = "RiskFromConcentratedInvestment"
	PIFUNDMARKETDATACONSTANTSINVESTORALERT_CONSOLIDATION_FUND                PiFundMarketDataConstantsInvestorAlert = "ConsolidationFund"
)

// All allowed values of PiFundMarketDataConstantsInvestorAlert enum
var AllowedPiFundMarketDataConstantsInvestorAlertEnumValues = []PiFundMarketDataConstantsInvestorAlert{
	"Unknown",
	"RiskFromConcentratedInvestment",
	"ConsolidationFund",
}

func (v *PiFundMarketDataConstantsInvestorAlert) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PiFundMarketDataConstantsInvestorAlert(value)
	for _, existing := range AllowedPiFundMarketDataConstantsInvestorAlertEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PiFundMarketDataConstantsInvestorAlert", value)
}

// NewPiFundMarketDataConstantsInvestorAlertFromValue returns a pointer to a valid PiFundMarketDataConstantsInvestorAlert
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPiFundMarketDataConstantsInvestorAlertFromValue(v string) (*PiFundMarketDataConstantsInvestorAlert, error) {
	ev := PiFundMarketDataConstantsInvestorAlert(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PiFundMarketDataConstantsInvestorAlert: valid values are %v", v, AllowedPiFundMarketDataConstantsInvestorAlertEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PiFundMarketDataConstantsInvestorAlert) IsValid() bool {
	for _, existing := range AllowedPiFundMarketDataConstantsInvestorAlertEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PiFundMarketDataConstantsInvestorAlert value
func (v PiFundMarketDataConstantsInvestorAlert) Ptr() *PiFundMarketDataConstantsInvestorAlert {
	return &v
}

type NullablePiFundMarketDataConstantsInvestorAlert struct {
	value *PiFundMarketDataConstantsInvestorAlert
	isSet bool
}

func (v NullablePiFundMarketDataConstantsInvestorAlert) Get() *PiFundMarketDataConstantsInvestorAlert {
	return v.value
}

func (v *NullablePiFundMarketDataConstantsInvestorAlert) Set(val *PiFundMarketDataConstantsInvestorAlert) {
	v.value = val
	v.isSet = true
}

func (v NullablePiFundMarketDataConstantsInvestorAlert) IsSet() bool {
	return v.isSet
}

func (v *NullablePiFundMarketDataConstantsInvestorAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePiFundMarketDataConstantsInvestorAlert(val *PiFundMarketDataConstantsInvestorAlert) *NullablePiFundMarketDataConstantsInvestorAlert {
	return &NullablePiFundMarketDataConstantsInvestorAlert{value: val, isSet: true}
}

func (v NullablePiFundMarketDataConstantsInvestorAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePiFundMarketDataConstantsInvestorAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
