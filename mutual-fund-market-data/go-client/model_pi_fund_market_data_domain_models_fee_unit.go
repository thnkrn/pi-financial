/*
Pi.FundMarketData.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"encoding/json"
	"fmt"
)

// PiFundMarketDataDomainModelsFeeUnit the model 'PiFundMarketDataDomainModelsFeeUnit'
type PiFundMarketDataDomainModelsFeeUnit string

// List of PiFundMarketDataDomainModelsFeeUnit
const (
	PIFUNDMARKETDATADOMAINMODELSFEEUNIT_AUM_PERCENTAGE            PiFundMarketDataDomainModelsFeeUnit = "AumPercentage"
	PIFUNDMARKETDATADOMAINMODELSFEEUNIT_THB                       PiFundMarketDataDomainModelsFeeUnit = "THB"
	PIFUNDMARKETDATADOMAINMODELSFEEUNIT_TRADING_AMOUNT_PERCENTAGE PiFundMarketDataDomainModelsFeeUnit = "TradingAmountPercentage"
)

// All allowed values of PiFundMarketDataDomainModelsFeeUnit enum
var AllowedPiFundMarketDataDomainModelsFeeUnitEnumValues = []PiFundMarketDataDomainModelsFeeUnit{
	"AumPercentage",
	"THB",
	"TradingAmountPercentage",
}

func (v *PiFundMarketDataDomainModelsFeeUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PiFundMarketDataDomainModelsFeeUnit(value)
	for _, existing := range AllowedPiFundMarketDataDomainModelsFeeUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PiFundMarketDataDomainModelsFeeUnit", value)
}

// NewPiFundMarketDataDomainModelsFeeUnitFromValue returns a pointer to a valid PiFundMarketDataDomainModelsFeeUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPiFundMarketDataDomainModelsFeeUnitFromValue(v string) (*PiFundMarketDataDomainModelsFeeUnit, error) {
	ev := PiFundMarketDataDomainModelsFeeUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PiFundMarketDataDomainModelsFeeUnit: valid values are %v", v, AllowedPiFundMarketDataDomainModelsFeeUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PiFundMarketDataDomainModelsFeeUnit) IsValid() bool {
	for _, existing := range AllowedPiFundMarketDataDomainModelsFeeUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PiFundMarketDataDomainModelsFeeUnit value
func (v PiFundMarketDataDomainModelsFeeUnit) Ptr() *PiFundMarketDataDomainModelsFeeUnit {
	return &v
}

type NullablePiFundMarketDataDomainModelsFeeUnit struct {
	value *PiFundMarketDataDomainModelsFeeUnit
	isSet bool
}

func (v NullablePiFundMarketDataDomainModelsFeeUnit) Get() *PiFundMarketDataDomainModelsFeeUnit {
	return v.value
}

func (v *NullablePiFundMarketDataDomainModelsFeeUnit) Set(val *PiFundMarketDataDomainModelsFeeUnit) {
	v.value = val
	v.isSet = true
}

func (v NullablePiFundMarketDataDomainModelsFeeUnit) IsSet() bool {
	return v.isSet
}

func (v *NullablePiFundMarketDataDomainModelsFeeUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePiFundMarketDataDomainModelsFeeUnit(val *PiFundMarketDataDomainModelsFeeUnit) *NullablePiFundMarketDataDomainModelsFeeUnit {
	return &NullablePiFundMarketDataDomainModelsFeeUnit{value: val, isSet: true}
}

func (v NullablePiFundMarketDataDomainModelsFeeUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePiFundMarketDataDomainModelsFeeUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
