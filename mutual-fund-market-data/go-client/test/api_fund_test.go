/*
Pi.FundMarketData.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

Testing FundAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package go_client

import (
	"context"
	"testing"

	openapiclient "github.com/pi-financial/mutual-fund-market-data/go-client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_go_client_FundAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FundAPIService InternalFundsSearchGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FundAPI.InternalFundsSearchGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FundAPIService InternalFundsSymbolProfileGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var symbol string

		resp, httpRes, err := apiClient.FundAPI.InternalFundsSymbolProfileGet(context.Background(), symbol).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FundAPIService InternalFundsSymbolTradableDatesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var symbol string

		resp, httpRes, err := apiClient.FundAPI.InternalFundsSymbolTradableDatesGet(context.Background(), symbol).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FundAPIService InternalFundsTradingProfilesPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FundAPI.InternalFundsTradingProfilesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FundAPIService SecureFundsMarketBasketMarketSummariesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var marketBasket PiFundMarketDataConstantsMarketBasket

		resp, httpRes, err := apiClient.FundAPI.SecureFundsMarketBasketMarketSummariesGet(context.Background(), marketBasket).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FundAPIService SecureFundsMarketBasketMarketSummariesV2Get", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var marketBasket PiFundMarketDataConstantsMarketBasket

		resp, httpRes, err := apiClient.FundAPI.SecureFundsMarketBasketMarketSummariesV2Get(context.Background(), marketBasket).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FundAPIService SecureFundsProfilesPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FundAPI.SecureFundsProfilesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FundAPIService SecureFundsSearchGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FundAPI.SecureFundsSearchGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FundAPIService SecureFundsSymbolHistoricalNavGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var symbol string

		resp, httpRes, err := apiClient.FundAPI.SecureFundsSymbolHistoricalNavGet(context.Background(), symbol).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FundAPIService SecureFundsSymbolProfileGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var symbol string

		resp, httpRes, err := apiClient.FundAPI.SecureFundsSymbolProfileGet(context.Background(), symbol).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FundAPIService SecureFundsSymbolSwitchingFundsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var symbol string

		resp, httpRes, err := apiClient.FundAPI.SecureFundsSymbolSwitchingFundsGet(context.Background(), symbol).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FundAPIService SecureFundsSymbolTradableDatesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var symbol string

		resp, httpRes, err := apiClient.FundAPI.SecureFundsSymbolTradableDatesGet(context.Background(), symbol).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FundAPIService SecureLegacyFundsSummariesPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FundAPI.SecureLegacyFundsSummariesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
