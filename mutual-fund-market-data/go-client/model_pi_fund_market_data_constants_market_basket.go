/*
Pi.FundMarketData.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"encoding/json"
	"fmt"
)

// PiFundMarketDataConstantsMarketBasket the model 'PiFundMarketDataConstantsMarketBasket'
type PiFundMarketDataConstantsMarketBasket string

// List of PiFundMarketDataConstantsMarketBasket
const (
	PIFUNDMARKETDATACONSTANTSMARKETBASKET_TOP_FUND PiFundMarketDataConstantsMarketBasket = "TopFund"
	PIFUNDMARKETDATACONSTANTSMARKETBASKET_CATEGORY PiFundMarketDataConstantsMarketBasket = "Category"
	PIFUNDMARKETDATACONSTANTSMARKETBASKET_NEW_FUND PiFundMarketDataConstantsMarketBasket = "NewFund"
)

// All allowed values of PiFundMarketDataConstantsMarketBasket enum
var AllowedPiFundMarketDataConstantsMarketBasketEnumValues = []PiFundMarketDataConstantsMarketBasket{
	"TopFund",
	"Category",
	"NewFund",
}

func (v *PiFundMarketDataConstantsMarketBasket) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PiFundMarketDataConstantsMarketBasket(value)
	for _, existing := range AllowedPiFundMarketDataConstantsMarketBasketEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PiFundMarketDataConstantsMarketBasket", value)
}

// NewPiFundMarketDataConstantsMarketBasketFromValue returns a pointer to a valid PiFundMarketDataConstantsMarketBasket
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPiFundMarketDataConstantsMarketBasketFromValue(v string) (*PiFundMarketDataConstantsMarketBasket, error) {
	ev := PiFundMarketDataConstantsMarketBasket(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PiFundMarketDataConstantsMarketBasket: valid values are %v", v, AllowedPiFundMarketDataConstantsMarketBasketEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PiFundMarketDataConstantsMarketBasket) IsValid() bool {
	for _, existing := range AllowedPiFundMarketDataConstantsMarketBasketEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PiFundMarketDataConstantsMarketBasket value
func (v PiFundMarketDataConstantsMarketBasket) Ptr() *PiFundMarketDataConstantsMarketBasket {
	return &v
}

type NullablePiFundMarketDataConstantsMarketBasket struct {
	value *PiFundMarketDataConstantsMarketBasket
	isSet bool
}

func (v NullablePiFundMarketDataConstantsMarketBasket) Get() *PiFundMarketDataConstantsMarketBasket {
	return v.value
}

func (v *NullablePiFundMarketDataConstantsMarketBasket) Set(val *PiFundMarketDataConstantsMarketBasket) {
	v.value = val
	v.isSet = true
}

func (v NullablePiFundMarketDataConstantsMarketBasket) IsSet() bool {
	return v.isSet
}

func (v *NullablePiFundMarketDataConstantsMarketBasket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePiFundMarketDataConstantsMarketBasket(val *PiFundMarketDataConstantsMarketBasket) *NullablePiFundMarketDataConstantsMarketBasket {
	return &NullablePiFundMarketDataConstantsMarketBasket{value: val, isSet: true}
}

func (v NullablePiFundMarketDataConstantsMarketBasket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePiFundMarketDataConstantsMarketBasket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
