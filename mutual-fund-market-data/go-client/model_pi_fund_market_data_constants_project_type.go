/*
Pi.FundMarketData.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"encoding/json"
	"fmt"
)

// PiFundMarketDataConstantsProjectType the model 'PiFundMarketDataConstantsProjectType'
type PiFundMarketDataConstantsProjectType string

// List of PiFundMarketDataConstantsProjectType
const (
	PIFUNDMARKETDATACONSTANTSPROJECTTYPE_UNKNOWN                                        PiFundMarketDataConstantsProjectType = "Unknown"
	PIFUNDMARKETDATACONSTANTSPROJECTTYPE_GENERAL_INVESTORS_FUND                         PiFundMarketDataConstantsProjectType = "GeneralInvestorsFund"
	PIFUNDMARKETDATACONSTANTSPROJECTTYPE_INSTITUTIONAL_INVESTORS_FUND                   PiFundMarketDataConstantsProjectType = "InstitutionalInvestorsFund"
	PIFUNDMARKETDATACONSTANTSPROJECTTYPE_NON_RETAIL_INVESTORS_FUND                      PiFundMarketDataConstantsProjectType = "NonRetailInvestorsFund"
	PIFUNDMARKETDATACONSTANTSPROJECTTYPE_NON_RETAIL_AND_HIGH_NET_WORTH_INVESTORS_FUND   PiFundMarketDataConstantsProjectType = "NonRetailAndHighNetWorthInvestorsFund"
	PIFUNDMARKETDATACONSTANTSPROJECTTYPE_INSTITUTIONAL_AND_SPECIAL_LARGE_INVESTORS_FUND PiFundMarketDataConstantsProjectType = "InstitutionalAndSpecialLargeInvestorsFund"
	PIFUNDMARKETDATACONSTANTSPROJECTTYPE_HIGH_NET_WORTH_INVESTORS_FUND                  PiFundMarketDataConstantsProjectType = "HighNetWorthInvestorsFund"
	PIFUNDMARKETDATACONSTANTSPROJECTTYPE_CORPORATE_INVESTORS_FUND                       PiFundMarketDataConstantsProjectType = "CorporateInvestorsFund"
	PIFUNDMARKETDATACONSTANTSPROJECTTYPE_THAI_GOVERNMENT_FUND                           PiFundMarketDataConstantsProjectType = "ThaiGovernmentFund"
	PIFUNDMARKETDATACONSTANTSPROJECTTYPE_PENSION_RESERVE_FUND                           PiFundMarketDataConstantsProjectType = "PensionReserveFund"
)

// All allowed values of PiFundMarketDataConstantsProjectType enum
var AllowedPiFundMarketDataConstantsProjectTypeEnumValues = []PiFundMarketDataConstantsProjectType{
	"Unknown",
	"GeneralInvestorsFund",
	"InstitutionalInvestorsFund",
	"NonRetailInvestorsFund",
	"NonRetailAndHighNetWorthInvestorsFund",
	"InstitutionalAndSpecialLargeInvestorsFund",
	"HighNetWorthInvestorsFund",
	"CorporateInvestorsFund",
	"ThaiGovernmentFund",
	"PensionReserveFund",
}

func (v *PiFundMarketDataConstantsProjectType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PiFundMarketDataConstantsProjectType(value)
	for _, existing := range AllowedPiFundMarketDataConstantsProjectTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PiFundMarketDataConstantsProjectType", value)
}

// NewPiFundMarketDataConstantsProjectTypeFromValue returns a pointer to a valid PiFundMarketDataConstantsProjectType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPiFundMarketDataConstantsProjectTypeFromValue(v string) (*PiFundMarketDataConstantsProjectType, error) {
	ev := PiFundMarketDataConstantsProjectType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PiFundMarketDataConstantsProjectType: valid values are %v", v, AllowedPiFundMarketDataConstantsProjectTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PiFundMarketDataConstantsProjectType) IsValid() bool {
	for _, existing := range AllowedPiFundMarketDataConstantsProjectTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PiFundMarketDataConstantsProjectType value
func (v PiFundMarketDataConstantsProjectType) Ptr() *PiFundMarketDataConstantsProjectType {
	return &v
}

type NullablePiFundMarketDataConstantsProjectType struct {
	value *PiFundMarketDataConstantsProjectType
	isSet bool
}

func (v NullablePiFundMarketDataConstantsProjectType) Get() *PiFundMarketDataConstantsProjectType {
	return v.value
}

func (v *NullablePiFundMarketDataConstantsProjectType) Set(val *PiFundMarketDataConstantsProjectType) {
	v.value = val
	v.isSet = true
}

func (v NullablePiFundMarketDataConstantsProjectType) IsSet() bool {
	return v.isSet
}

func (v *NullablePiFundMarketDataConstantsProjectType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePiFundMarketDataConstantsProjectType(val *PiFundMarketDataConstantsProjectType) *NullablePiFundMarketDataConstantsProjectType {
	return &NullablePiFundMarketDataConstantsProjectType{value: val, isSet: true}
}

func (v NullablePiFundMarketDataConstantsProjectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePiFundMarketDataConstantsProjectType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
