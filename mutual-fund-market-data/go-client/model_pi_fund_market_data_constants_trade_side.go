/*
Pi.FundMarketData.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"encoding/json"
	"fmt"
)

// PiFundMarketDataConstantsTradeSide the model 'PiFundMarketDataConstantsTradeSide'
type PiFundMarketDataConstantsTradeSide string

// List of PiFundMarketDataConstantsTradeSide
const (
	PIFUNDMARKETDATACONSTANTSTRADESIDE_BUY    PiFundMarketDataConstantsTradeSide = "Buy"
	PIFUNDMARKETDATACONSTANTSTRADESIDE_SELL   PiFundMarketDataConstantsTradeSide = "Sell"
	PIFUNDMARKETDATACONSTANTSTRADESIDE_SWITCH PiFundMarketDataConstantsTradeSide = "Switch"
)

// All allowed values of PiFundMarketDataConstantsTradeSide enum
var AllowedPiFundMarketDataConstantsTradeSideEnumValues = []PiFundMarketDataConstantsTradeSide{
	"Buy",
	"Sell",
	"Switch",
}

func (v *PiFundMarketDataConstantsTradeSide) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PiFundMarketDataConstantsTradeSide(value)
	for _, existing := range AllowedPiFundMarketDataConstantsTradeSideEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PiFundMarketDataConstantsTradeSide", value)
}

// NewPiFundMarketDataConstantsTradeSideFromValue returns a pointer to a valid PiFundMarketDataConstantsTradeSide
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPiFundMarketDataConstantsTradeSideFromValue(v string) (*PiFundMarketDataConstantsTradeSide, error) {
	ev := PiFundMarketDataConstantsTradeSide(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PiFundMarketDataConstantsTradeSide: valid values are %v", v, AllowedPiFundMarketDataConstantsTradeSideEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PiFundMarketDataConstantsTradeSide) IsValid() bool {
	for _, existing := range AllowedPiFundMarketDataConstantsTradeSideEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PiFundMarketDataConstantsTradeSide value
func (v PiFundMarketDataConstantsTradeSide) Ptr() *PiFundMarketDataConstantsTradeSide {
	return &v
}

type NullablePiFundMarketDataConstantsTradeSide struct {
	value *PiFundMarketDataConstantsTradeSide
	isSet bool
}

func (v NullablePiFundMarketDataConstantsTradeSide) Get() *PiFundMarketDataConstantsTradeSide {
	return v.value
}

func (v *NullablePiFundMarketDataConstantsTradeSide) Set(val *PiFundMarketDataConstantsTradeSide) {
	v.value = val
	v.isSet = true
}

func (v NullablePiFundMarketDataConstantsTradeSide) IsSet() bool {
	return v.isSet
}

func (v *NullablePiFundMarketDataConstantsTradeSide) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePiFundMarketDataConstantsTradeSide(val *PiFundMarketDataConstantsTradeSide) *NullablePiFundMarketDataConstantsTradeSide {
	return &NullablePiFundMarketDataConstantsTradeSide{value: val, isSet: true}
}

func (v NullablePiFundMarketDataConstantsTradeSide) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePiFundMarketDataConstantsTradeSide) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
