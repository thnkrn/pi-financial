/*
Pi.FundMarketData.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"encoding/json"
	"fmt"
)

// PiFundMarketDataConstantsInterval the model 'PiFundMarketDataConstantsInterval'
type PiFundMarketDataConstantsInterval string

// List of PiFundMarketDataConstantsInterval
const (
	PIFUNDMARKETDATACONSTANTSINTERVAL_OVER3_MONTHS    PiFundMarketDataConstantsInterval = "Over3Months"
	PIFUNDMARKETDATACONSTANTSINTERVAL_OVER6_MONTHS    PiFundMarketDataConstantsInterval = "Over6Months"
	PIFUNDMARKETDATACONSTANTSINTERVAL_OVER1_YEAR      PiFundMarketDataConstantsInterval = "Over1Year"
	PIFUNDMARKETDATACONSTANTSINTERVAL_OVER3_YEARS     PiFundMarketDataConstantsInterval = "Over3Years"
	PIFUNDMARKETDATACONSTANTSINTERVAL_OVER5_YEARS     PiFundMarketDataConstantsInterval = "Over5Years"
	PIFUNDMARKETDATACONSTANTSINTERVAL_YEAR_TO_DATE    PiFundMarketDataConstantsInterval = "YearToDate"
	PIFUNDMARKETDATACONSTANTSINTERVAL_SINCE_INCEPTION PiFundMarketDataConstantsInterval = "SinceInception"
)

// All allowed values of PiFundMarketDataConstantsInterval enum
var AllowedPiFundMarketDataConstantsIntervalEnumValues = []PiFundMarketDataConstantsInterval{
	"Over3Months",
	"Over6Months",
	"Over1Year",
	"Over3Years",
	"Over5Years",
	"YearToDate",
	"SinceInception",
}

func (v *PiFundMarketDataConstantsInterval) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PiFundMarketDataConstantsInterval(value)
	for _, existing := range AllowedPiFundMarketDataConstantsIntervalEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PiFundMarketDataConstantsInterval", value)
}

// NewPiFundMarketDataConstantsIntervalFromValue returns a pointer to a valid PiFundMarketDataConstantsInterval
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPiFundMarketDataConstantsIntervalFromValue(v string) (*PiFundMarketDataConstantsInterval, error) {
	ev := PiFundMarketDataConstantsInterval(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PiFundMarketDataConstantsInterval: valid values are %v", v, AllowedPiFundMarketDataConstantsIntervalEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PiFundMarketDataConstantsInterval) IsValid() bool {
	for _, existing := range AllowedPiFundMarketDataConstantsIntervalEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PiFundMarketDataConstantsInterval value
func (v PiFundMarketDataConstantsInterval) Ptr() *PiFundMarketDataConstantsInterval {
	return &v
}

type NullablePiFundMarketDataConstantsInterval struct {
	value *PiFundMarketDataConstantsInterval
	isSet bool
}

func (v NullablePiFundMarketDataConstantsInterval) Get() *PiFundMarketDataConstantsInterval {
	return v.value
}

func (v *NullablePiFundMarketDataConstantsInterval) Set(val *PiFundMarketDataConstantsInterval) {
	v.value = val
	v.isSet = true
}

func (v NullablePiFundMarketDataConstantsInterval) IsSet() bool {
	return v.isSet
}

func (v *NullablePiFundMarketDataConstantsInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePiFundMarketDataConstantsInterval(val *PiFundMarketDataConstantsInterval) *NullablePiFundMarketDataConstantsInterval {
	return &NullablePiFundMarketDataConstantsInterval{value: val, isSet: true}
}

func (v NullablePiFundMarketDataConstantsInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePiFundMarketDataConstantsInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
