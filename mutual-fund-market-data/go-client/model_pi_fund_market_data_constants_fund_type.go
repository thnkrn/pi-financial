/*
Pi.FundMarketData.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"encoding/json"
	"fmt"
)

// PiFundMarketDataConstantsFundType the model 'PiFundMarketDataConstantsFundType'
type PiFundMarketDataConstantsFundType string

// List of PiFundMarketDataConstantsFundType
const (
	PIFUNDMARKETDATACONSTANTSFUNDTYPE_UNKNOWN PiFundMarketDataConstantsFundType = "Unknown"
	PIFUNDMARKETDATACONSTANTSFUNDTYPE_PLAIN   PiFundMarketDataConstantsFundType = "Plain"
	PIFUNDMARKETDATACONSTANTSFUNDTYPE_COMPLEX PiFundMarketDataConstantsFundType = "Complex"
)

// All allowed values of PiFundMarketDataConstantsFundType enum
var AllowedPiFundMarketDataConstantsFundTypeEnumValues = []PiFundMarketDataConstantsFundType{
	"Unknown",
	"Plain",
	"Complex",
}

func (v *PiFundMarketDataConstantsFundType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PiFundMarketDataConstantsFundType(value)
	for _, existing := range AllowedPiFundMarketDataConstantsFundTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PiFundMarketDataConstantsFundType", value)
}

// NewPiFundMarketDataConstantsFundTypeFromValue returns a pointer to a valid PiFundMarketDataConstantsFundType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPiFundMarketDataConstantsFundTypeFromValue(v string) (*PiFundMarketDataConstantsFundType, error) {
	ev := PiFundMarketDataConstantsFundType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PiFundMarketDataConstantsFundType: valid values are %v", v, AllowedPiFundMarketDataConstantsFundTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PiFundMarketDataConstantsFundType) IsValid() bool {
	for _, existing := range AllowedPiFundMarketDataConstantsFundTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PiFundMarketDataConstantsFundType value
func (v PiFundMarketDataConstantsFundType) Ptr() *PiFundMarketDataConstantsFundType {
	return &v
}

type NullablePiFundMarketDataConstantsFundType struct {
	value *PiFundMarketDataConstantsFundType
	isSet bool
}

func (v NullablePiFundMarketDataConstantsFundType) Get() *PiFundMarketDataConstantsFundType {
	return v.value
}

func (v *NullablePiFundMarketDataConstantsFundType) Set(val *PiFundMarketDataConstantsFundType) {
	v.value = val
	v.isSet = true
}

func (v NullablePiFundMarketDataConstantsFundType) IsSet() bool {
	return v.isSet
}

func (v *NullablePiFundMarketDataConstantsFundType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePiFundMarketDataConstantsFundType(val *PiFundMarketDataConstantsFundType) *NullablePiFundMarketDataConstantsFundType {
	return &NullablePiFundMarketDataConstantsFundType{value: val, isSet: true}
}

func (v NullablePiFundMarketDataConstantsFundType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePiFundMarketDataConstantsFundType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
