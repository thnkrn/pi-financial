// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/pi-financial/portfolio-srv-v2/config"
	client2 "github.com/pi-financial/portfolio-srv-v2/internal/adapter/client"
	"github.com/pi-financial/portfolio-srv-v2/internal/adapter/http"
	mysql2 "github.com/pi-financial/portfolio-srv-v2/internal/adapter/mysql"
	"github.com/pi-financial/portfolio-srv-v2/internal/core/service"
	"github.com/pi-financial/portfolio-srv-v2/internal/driver/client"
	"github.com/pi-financial/portfolio-srv-v2/internal/driver/log/adapter"
	config2 "github.com/pi-financial/portfolio-srv-v2/internal/driver/log/config"
	"github.com/pi-financial/portfolio-srv-v2/internal/driver/mysql"
	"github.com/pi-financial/portfolio-srv-v2/internal/middleware"
)

// Injectors from wire.go:

func InitializeAPI(cfg config.Config) (*http.ServerHTTP, error) {
	logger, err := config2.ProvideZapLogger()
	if err != nil {
		return nil, err
	}
	zapImplement := adapter.ProvideLogger(logger)
	errorHandler := middleware.NewErrorHandler()
	middlewares := &http.Middlewares{
		ErrorHandler: errorHandler,
	}
	db, err := mysql.ConnectDatabase(cfg)
	if err != nil {
		return nil, err
	}
	assetSummaryRepository := mysql2.NewAssetSummaryRepository(zapImplement, db)
	apiClient := client.CreateUserSrvV2Client(cfg)
	userRepository := client2.NewUserRepository(zapImplement, apiClient)
	portfolioService := service.NewPortfolioService(assetSummaryRepository, userRepository)
	totalPortfolioSummaryHandler := http.NewTotalPortfolioSummaryHandler(portfolioService)
	fundRepository := mysql2.NewFundRepository(zapImplement, db)
	fundService := service.NewFundService(fundRepository)
	fundSummaryHandler := http.NewFundSummaryHandler(fundService)
	bondRepository := mysql2.NewBondRepository(zapImplement, db)
	bondOffshoreRepository := mysql2.NewBondOffshoreRepository(zapImplement, db)
	exchangeRateRepository := mysql2.NewExchangeRateRepository(zapImplement, db)
	bondService := service.NewBondService(bondRepository, bondOffshoreRepository, exchangeRateRepository)
	bondSummaryHandler := http.NewBondSummaryHandler(bondService)
	thaiEquityRepository := mysql2.NewThaiEquityRepository(zapImplement, db)
	thaiEquityService := service.NewThaiEquityService(thaiEquityRepository)
	thaiEquitySummaryHandler := http.NewThaiEquitySummaryHandler(thaiEquityService)
	tfexDailySummaryRepository := mysql2.NewTfexDailySummaryRepository(zapImplement, db)
	tfexDailyRepository := mysql2.NewTfexDailyRepository(zapImplement, db)
	tfexSummaryService := service.NewTfexSummaryService(tfexDailySummaryRepository, tfexDailyRepository)
	tfexSummaryHandler := http.NewTfexSummaryHandler(tfexSummaryService)
	cashRepository := mysql2.NewCashRepository(zapImplement, db)
	cashService := service.NewCashService(cashRepository, exchangeRateRepository)
	cashSummaryHandler := http.NewCashSummaryHandler(cashService)
	geDailyRepository := mysql2.NewGeDailyRepository(zapImplement, db)
	geDepositWithdrawRepository := mysql2.NewGeDepositWithdrawRepository(zapImplement, db)
	geDividendRepository := mysql2.NewGeDividendRepository(zapImplement, db)
	geTradeRepository := mysql2.NewGeTradeRepository(zapImplement, db)
	geOtcRepository := mysql2.NewGeOtcRepository(zapImplement, db)
	geSummaryService := service.NewGeSummaryService(geDailyRepository, exchangeRateRepository, geDepositWithdrawRepository, geDividendRepository, geTradeRepository, geOtcRepository)
	geSummaryHandler := http.NewGeSummaryHandler(geSummaryService)
	structuredProductDailyRepository := mysql2.NewStructuredProductDailyRepository(zapImplement, db)
	structuredProductOnshoreDailyRepository := mysql2.NewStructuredProductOnshoreDailyRepository(zapImplement, db)
	structuredNoteCashMovementRepository := mysql2.NewStructuredNoteCashMovementRepository(zapImplement, db)
	structuredService := service.NewStructuredService(structuredProductDailyRepository, structuredProductOnshoreDailyRepository, structuredNoteCashMovementRepository, exchangeRateRepository)
	structuredHandler := http.NewStructuredHandler(structuredService)
	handlers := http.Handlers{
		TotalPortfolioSummaryHandler: totalPortfolioSummaryHandler,
		FundSummaryHandler:           fundSummaryHandler,
		BondSummaryHandler:           bondSummaryHandler,
		ThaiEquitySummaryHandler:     thaiEquitySummaryHandler,
		TfexSummaryHandler:           tfexSummaryHandler,
		CashSummaryHandler:           cashSummaryHandler,
		GeSummaryHandler:             geSummaryHandler,
		StructuredHandler:            structuredHandler,
	}
	serverHTTP := http.NewServerHTTP(zapImplement, middlewares, handlers, cfg)
	return serverHTTP, nil
}
