// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pi.StructureNotes.Infrastructure.Repositories;

#nullable disable

namespace Pi.StructureNotes.Migrations.Migrations
{
    [DbContext(typeof(SnDbContext))]
    partial class SnDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Pi.StructureNotes.Infrastructure.Repositories.Entities.CashEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("AccountId")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("account_id");

                    b.Property<string>("AccountNo")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("account_no");

                    b.Property<DateTime?>("AsOf")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("as_of");

                    b.Property<decimal?>("CostValue")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("cost_value");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("currency");

                    b.Property<decimal?>("GainInPortfolio")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("gain_in_portfolio");

                    b.Property<decimal?>("MarketValue")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("market_value");

                    b.Property<string>("Symbol")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("symbol");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_cash");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_cash_account_id");

                    b.HasIndex("AccountNo")
                        .HasDatabaseName("ix_cash_account_no");

                    b.HasIndex("Currency")
                        .HasDatabaseName("ix_cash_currency");

                    b.ToTable("cash", (string)null);
                });

            modelBuilder.Entity("Pi.StructureNotes.Infrastructure.Repositories.Entities.NoteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("AccountId")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("account_id");

                    b.Property<string>("AccountNo")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("account_no");

                    b.Property<DateTime?>("AsOf")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("as_of");

                    b.Property<decimal?>("CostValue")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("cost_value");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("currency");

                    b.Property<string>("ISIN")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("isin");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("issue_date");

                    b.Property<string>("Issuer")
                        .HasColumnType("varchar(400)")
                        .HasColumnName("issuer");

                    b.Property<decimal?>("MarketValue")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("market_value");

                    b.Property<decimal?>("Rebate")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("rebate");

                    b.Property<string>("Symbol")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("symbol");

                    b.Property<int?>("Tenors")
                        .HasColumnType("int")
                        .HasColumnName("tenors");

                    b.Property<DateTime>("TradeDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("trade_date");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("type");

                    b.Property<string>("Underlying")
                        .HasColumnType("varchar(400)")
                        .HasColumnName("underlying");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<DateTime>("ValuationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("valuation_date");

                    b.Property<decimal?>("Yield")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("yield");

                    b.HasKey("Id")
                        .HasName("pk_notes");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_notes_account_id");

                    b.HasIndex("AccountNo")
                        .HasDatabaseName("ix_notes_account_no");

                    b.HasIndex("Currency")
                        .HasDatabaseName("ix_notes_currency");

                    b.HasIndex("Symbol")
                        .HasDatabaseName("ix_notes_symbol");

                    b.ToTable("notes", (string)null);
                });

            modelBuilder.Entity("Pi.StructureNotes.Infrastructure.Repositories.Entities.StockEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("AccountId")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("account_id");

                    b.Property<string>("AccountNo")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("account_no");

                    b.Property<DateTime?>("AsOf")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("as_of");

                    b.Property<int?>("Available")
                        .HasColumnType("int")
                        .HasColumnName("available");

                    b.Property<decimal?>("CostPrice")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("cost_price");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("currency");

                    b.Property<string>("Symbol")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("symbol");

                    b.Property<int?>("Units")
                        .HasColumnType("int")
                        .HasColumnName("units");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_stocks");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_stocks_account_id");

                    b.HasIndex("AccountNo")
                        .HasDatabaseName("ix_stocks_account_no");

                    b.HasIndex("Currency")
                        .HasDatabaseName("ix_stocks_currency");

                    b.HasIndex("Symbol")
                        .HasDatabaseName("ix_stocks_symbol");

                    b.ToTable("stocks", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
