/*
Pi.Financial.FundService.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// FundAccountAPIService FundAccountAPI service
type FundAccountAPIService service

type ApiGenerateDocumentRequest struct {
	ctx                                               context.Context
	ApiService                                        *FundAccountAPIService
	piFinancialFundServiceAPIModelsOpenFundAccountDto *PiFinancialFundServiceAPIModelsOpenFundAccountDto
}

func (r ApiGenerateDocumentRequest) PiFinancialFundServiceAPIModelsOpenFundAccountDto(piFinancialFundServiceAPIModelsOpenFundAccountDto PiFinancialFundServiceAPIModelsOpenFundAccountDto) ApiGenerateDocumentRequest {
	r.piFinancialFundServiceAPIModelsOpenFundAccountDto = &piFinancialFundServiceAPIModelsOpenFundAccountDto
	return r
}

func (r ApiGenerateDocumentRequest) Execute() ([]PiFinancialFundServiceAPIModelsGeneratedDocument, *http.Response, error) {
	return r.ApiService.GenerateDocumentExecute(r)
}

/*
GenerateDocument Method for GenerateDocument

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGenerateDocumentRequest
*/
func (a *FundAccountAPIService) GenerateDocument(ctx context.Context) ApiGenerateDocumentRequest {
	return ApiGenerateDocumentRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PiFinancialFundServiceAPIModelsGeneratedDocument
func (a *FundAccountAPIService) GenerateDocumentExecute(r ApiGenerateDocumentRequest) ([]PiFinancialFundServiceAPIModelsGeneratedDocument, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PiFinancialFundServiceAPIModelsGeneratedDocument
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundAccountAPIService.GenerateDocument")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fund-account/document"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.piFinancialFundServiceAPIModelsOpenFundAccountDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAccountOpeningStateRequest struct {
	ctx                 context.Context
	ApiService          *FundAccountAPIService
	requestReceivedDate *string
	ndid                *bool
}

func (r ApiGetAccountOpeningStateRequest) RequestReceivedDate(requestReceivedDate string) ApiGetAccountOpeningStateRequest {
	r.requestReceivedDate = &requestReceivedDate
	return r
}

func (r ApiGetAccountOpeningStateRequest) Ndid(ndid bool) ApiGetAccountOpeningStateRequest {
	r.ndid = &ndid
	return r
}

func (r ApiGetAccountOpeningStateRequest) Execute() ([]PiFinancialFundServiceApplicationQueriesFundAccountOpeningStatus, *http.Response, error) {
	return r.ApiService.GetAccountOpeningStateExecute(r)
}

/*
GetAccountOpeningState Method for GetAccountOpeningState

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAccountOpeningStateRequest
*/
func (a *FundAccountAPIService) GetAccountOpeningState(ctx context.Context) ApiGetAccountOpeningStateRequest {
	return ApiGetAccountOpeningStateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PiFinancialFundServiceApplicationQueriesFundAccountOpeningStatus
func (a *FundAccountAPIService) GetAccountOpeningStateExecute(r ApiGetAccountOpeningStateRequest) ([]PiFinancialFundServiceApplicationQueriesFundAccountOpeningStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PiFinancialFundServiceApplicationQueriesFundAccountOpeningStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundAccountAPIService.GetAccountOpeningState")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fund-accounts/opening-state"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.requestReceivedDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "requestReceivedDate", r.requestReceivedDate, "form", "")
	}
	if r.ndid != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ndid", r.ndid, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInternalGetAccountOpeningStateByCustCodeRequest struct {
	ctx        context.Context
	ApiService *FundAccountAPIService
	custCode   string
}

func (r ApiInternalGetAccountOpeningStateByCustCodeRequest) Execute() (*PiFinancialFundServiceApplicationQueriesFundAccountOpeningStatusIEnumerableApiResponse, *http.Response, error) {
	return r.ApiService.InternalGetAccountOpeningStateByCustCodeExecute(r)
}

/*
InternalGetAccountOpeningStateByCustCode Method for InternalGetAccountOpeningStateByCustCode

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param custCode
	@return ApiInternalGetAccountOpeningStateByCustCodeRequest
*/
func (a *FundAccountAPIService) InternalGetAccountOpeningStateByCustCode(ctx context.Context, custCode string) ApiInternalGetAccountOpeningStateByCustCodeRequest {
	return ApiInternalGetAccountOpeningStateByCustCodeRequest{
		ApiService: a,
		ctx:        ctx,
		custCode:   custCode,
	}
}

// Execute executes the request
//
//	@return PiFinancialFundServiceApplicationQueriesFundAccountOpeningStatusIEnumerableApiResponse
func (a *FundAccountAPIService) InternalGetAccountOpeningStateByCustCodeExecute(r ApiInternalGetAccountOpeningStateByCustCodeRequest) (*PiFinancialFundServiceApplicationQueriesFundAccountOpeningStatusIEnumerableApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiFinancialFundServiceApplicationQueriesFundAccountOpeningStatusIEnumerableApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundAccountAPIService.InternalGetAccountOpeningStateByCustCode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/fund-accounts/opening-state/{CustCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"CustCode"+"}", url.PathEscape(parameterValueToString(r.custCode, "custCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIsFundAccountExistRequest struct {
	ctx                                                        context.Context
	ApiService                                                 *FundAccountAPIService
	piFinancialFundServiceAPIModelsFundAccountExistenceRequest *PiFinancialFundServiceAPIModelsFundAccountExistenceRequest
}

func (r ApiIsFundAccountExistRequest) PiFinancialFundServiceAPIModelsFundAccountExistenceRequest(piFinancialFundServiceAPIModelsFundAccountExistenceRequest PiFinancialFundServiceAPIModelsFundAccountExistenceRequest) ApiIsFundAccountExistRequest {
	r.piFinancialFundServiceAPIModelsFundAccountExistenceRequest = &piFinancialFundServiceAPIModelsFundAccountExistenceRequest
	return r
}

func (r ApiIsFundAccountExistRequest) Execute() (*SystemBooleanApiResponse, *http.Response, error) {
	return r.ApiService.IsFundAccountExistExecute(r)
}

/*
IsFundAccountExist Is Fund Account Exist

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiIsFundAccountExistRequest
*/
func (a *FundAccountAPIService) IsFundAccountExist(ctx context.Context) ApiIsFundAccountExistRequest {
	return ApiIsFundAccountExistRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SystemBooleanApiResponse
func (a *FundAccountAPIService) IsFundAccountExistExecute(r ApiIsFundAccountExistRequest) (*SystemBooleanApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SystemBooleanApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundAccountAPIService.IsFundAccountExist")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fund-account/existence"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.piFinancialFundServiceAPIModelsFundAccountExistenceRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNdidRequest struct {
	ctx        context.Context
	ApiService *FundAccountAPIService
	custCode   *string
}

func (r ApiNdidRequest) CustCode(custCode string) ApiNdidRequest {
	r.custCode = &custCode
	return r
}

func (r ApiNdidRequest) Execute() (*http.Response, error) {
	return r.ApiService.NdidExecute(r)
}

/*
Ndid Open Fund Account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiNdidRequest
*/
func (a *FundAccountAPIService) Ndid(ctx context.Context) ApiNdidRequest {
	return ApiNdidRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *FundAccountAPIService) NdidExecute(r ApiNdidRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundAccountAPIService.Ndid")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ndid"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.custCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "custCode", r.custCode, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiOpenFundAccountRequest struct {
	ctx                                               context.Context
	ApiService                                        *FundAccountAPIService
	piFinancialFundServiceAPIModelsOpenFundAccountDto *PiFinancialFundServiceAPIModelsOpenFundAccountDto
}

func (r ApiOpenFundAccountRequest) PiFinancialFundServiceAPIModelsOpenFundAccountDto(piFinancialFundServiceAPIModelsOpenFundAccountDto PiFinancialFundServiceAPIModelsOpenFundAccountDto) ApiOpenFundAccountRequest {
	r.piFinancialFundServiceAPIModelsOpenFundAccountDto = &piFinancialFundServiceAPIModelsOpenFundAccountDto
	return r
}

func (r ApiOpenFundAccountRequest) Execute() (*PiFinancialFundServiceAPIModelsFundAccountOpeningTicket, *http.Response, error) {
	return r.ApiService.OpenFundAccountExecute(r)
}

/*
OpenFundAccount Open Fund Account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenFundAccountRequest
*/
func (a *FundAccountAPIService) OpenFundAccount(ctx context.Context) ApiOpenFundAccountRequest {
	return ApiOpenFundAccountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiFinancialFundServiceAPIModelsFundAccountOpeningTicket
func (a *FundAccountAPIService) OpenFundAccountExecute(r ApiOpenFundAccountRequest) (*PiFinancialFundServiceAPIModelsFundAccountOpeningTicket, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiFinancialFundServiceAPIModelsFundAccountOpeningTicket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundAccountAPIService.OpenFundAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fund-account"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.piFinancialFundServiceAPIModelsOpenFundAccountDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOpenFundAccountsRequest struct {
	ctx                                               context.Context
	ApiService                                        *FundAccountAPIService
	piFinancialFundServiceAPIModelsOpenFundAccountDto *[]PiFinancialFundServiceAPIModelsOpenFundAccountDto
}

func (r ApiOpenFundAccountsRequest) PiFinancialFundServiceAPIModelsOpenFundAccountDto(piFinancialFundServiceAPIModelsOpenFundAccountDto []PiFinancialFundServiceAPIModelsOpenFundAccountDto) ApiOpenFundAccountsRequest {
	r.piFinancialFundServiceAPIModelsOpenFundAccountDto = &piFinancialFundServiceAPIModelsOpenFundAccountDto
	return r
}

func (r ApiOpenFundAccountsRequest) Execute() ([]PiFinancialFundServiceAPIModelsFundAccountOpeningTicket, *http.Response, error) {
	return r.ApiService.OpenFundAccountsExecute(r)
}

/*
OpenFundAccounts Method for OpenFundAccounts

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiOpenFundAccountsRequest
*/
func (a *FundAccountAPIService) OpenFundAccounts(ctx context.Context) ApiOpenFundAccountsRequest {
	return ApiOpenFundAccountsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PiFinancialFundServiceAPIModelsFundAccountOpeningTicket
func (a *FundAccountAPIService) OpenFundAccountsExecute(r ApiOpenFundAccountsRequest) ([]PiFinancialFundServiceAPIModelsFundAccountOpeningTicket, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PiFinancialFundServiceAPIModelsFundAccountOpeningTicket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundAccountAPIService.OpenFundAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/fund-accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.piFinancialFundServiceAPIModelsOpenFundAccountDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateFundCustomerRequest struct {
	ctx                                                             context.Context
	ApiService                                                      *FundAccountAPIService
	piFinancialClientFundConnextModelCustomerAccountCreateRequestV5 *PiFinancialClientFundConnextModelCustomerAccountCreateRequestV5
}

func (r ApiUpdateFundCustomerRequest) PiFinancialClientFundConnextModelCustomerAccountCreateRequestV5(piFinancialClientFundConnextModelCustomerAccountCreateRequestV5 PiFinancialClientFundConnextModelCustomerAccountCreateRequestV5) ApiUpdateFundCustomerRequest {
	r.piFinancialClientFundConnextModelCustomerAccountCreateRequestV5 = &piFinancialClientFundConnextModelCustomerAccountCreateRequestV5
	return r
}

func (r ApiUpdateFundCustomerRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateFundCustomerExecute(r)
}

/*
UpdateFundCustomer Method for UpdateFundCustomer

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUpdateFundCustomerRequest
*/
func (a *FundAccountAPIService) UpdateFundCustomer(ctx context.Context) ApiUpdateFundCustomerRequest {
	return ApiUpdateFundCustomerRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *FundAccountAPIService) UpdateFundCustomerExecute(r ApiUpdateFundCustomerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPut
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundAccountAPIService.UpdateFundCustomer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/debug/fund-customer/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.piFinancialClientFundConnextModelCustomerAccountCreateRequestV5 == nil {
		return nil, reportError("piFinancialClientFundConnextModelCustomerAccountCreateRequestV5 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.piFinancialClientFundConnextModelCustomerAccountCreateRequestV5
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
