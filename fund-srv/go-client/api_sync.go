/*
Pi.Financial.FundService.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// SyncAPIService SyncAPI service
type SyncAPIService service

type ApiInternalSyncCustomerDataPostRequest struct {
	ctx           context.Context
	ApiService    *SyncAPIService
	customerCode  *string
	correlationId *string
	bankAccountNo *string
}

func (r ApiInternalSyncCustomerDataPostRequest) CustomerCode(customerCode string) ApiInternalSyncCustomerDataPostRequest {
	r.customerCode = &customerCode
	return r
}

func (r ApiInternalSyncCustomerDataPostRequest) CorrelationId(correlationId string) ApiInternalSyncCustomerDataPostRequest {
	r.correlationId = &correlationId
	return r
}

func (r ApiInternalSyncCustomerDataPostRequest) BankAccountNo(bankAccountNo string) ApiInternalSyncCustomerDataPostRequest {
	r.bankAccountNo = &bankAccountNo
	return r
}

func (r ApiInternalSyncCustomerDataPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.InternalSyncCustomerDataPostExecute(r)
}

/*
InternalSyncCustomerDataPost Method for InternalSyncCustomerDataPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalSyncCustomerDataPostRequest
*/
func (a *SyncAPIService) InternalSyncCustomerDataPost(ctx context.Context) ApiInternalSyncCustomerDataPostRequest {
	return ApiInternalSyncCustomerDataPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *SyncAPIService) InternalSyncCustomerDataPostExecute(r ApiInternalSyncCustomerDataPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyncAPIService.InternalSyncCustomerDataPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/sync/customer-data"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.customerCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customerCode", r.customerCode, "form", "")
	}
	if r.correlationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "correlationId", r.correlationId, "form", "")
	}
	if r.bankAccountNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "bankAccountNo", r.bankAccountNo, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInternalSyncFundordersPostRequest struct {
	ctx                context.Context
	ApiService         *SyncAPIService
	effectiveDate      *string
	forceCreateOffline *bool
}

func (r ApiInternalSyncFundordersPostRequest) EffectiveDate(effectiveDate string) ApiInternalSyncFundordersPostRequest {
	r.effectiveDate = &effectiveDate
	return r
}

func (r ApiInternalSyncFundordersPostRequest) ForceCreateOffline(forceCreateOffline bool) ApiInternalSyncFundordersPostRequest {
	r.forceCreateOffline = &forceCreateOffline
	return r
}

func (r ApiInternalSyncFundordersPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.InternalSyncFundordersPostExecute(r)
}

/*
InternalSyncFundordersPost Method for InternalSyncFundordersPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalSyncFundordersPostRequest
*/
func (a *SyncAPIService) InternalSyncFundordersPost(ctx context.Context) ApiInternalSyncFundordersPostRequest {
	return ApiInternalSyncFundordersPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *SyncAPIService) InternalSyncFundordersPostExecute(r ApiInternalSyncFundordersPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyncAPIService.InternalSyncFundordersPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/sync/fundorders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.effectiveDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "effectiveDate", r.effectiveDate, "form", "")
	}
	if r.forceCreateOffline != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "forceCreateOffline", r.forceCreateOffline, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInternalSyncUnitholdersPostRequest struct {
	ctx        context.Context
	ApiService *SyncAPIService
}

func (r ApiInternalSyncUnitholdersPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.InternalSyncUnitholdersPostExecute(r)
}

/*
InternalSyncUnitholdersPost Method for InternalSyncUnitholdersPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalSyncUnitholdersPostRequest
*/
func (a *SyncAPIService) InternalSyncUnitholdersPost(ctx context.Context) ApiInternalSyncUnitholdersPostRequest {
	return ApiInternalSyncUnitholdersPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *SyncAPIService) InternalSyncUnitholdersPostExecute(r ApiInternalSyncUnitholdersPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SyncAPIService.InternalSyncUnitholdersPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/sync/unitholders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
