/*
Pi.Financial.FundService.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// FundTradingAPIService FundTradingAPI service
type FundTradingAPIService service

type ApiInternalAccountsAssetsGetRequest struct {
	ctx              context.Context
	ApiService       *FundTradingAPIService
	userId           *string
	tradingAccountNo *string
}

func (r ApiInternalAccountsAssetsGetRequest) UserId(userId string) ApiInternalAccountsAssetsGetRequest {
	r.userId = &userId
	return r
}

func (r ApiInternalAccountsAssetsGetRequest) TradingAccountNo(tradingAccountNo string) ApiInternalAccountsAssetsGetRequest {
	r.tradingAccountNo = &tradingAccountNo
	return r
}

func (r ApiInternalAccountsAssetsGetRequest) Execute() (*PiFinancialFundServiceAPIModelsInternalFundAssetResponseListApiResponse, *http.Response, error) {
	return r.ApiService.InternalAccountsAssetsGetExecute(r)
}

/*
InternalAccountsAssetsGet Method for InternalAccountsAssetsGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalAccountsAssetsGetRequest
*/
func (a *FundTradingAPIService) InternalAccountsAssetsGet(ctx context.Context) ApiInternalAccountsAssetsGetRequest {
	return ApiInternalAccountsAssetsGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiFinancialFundServiceAPIModelsInternalFundAssetResponseListApiResponse
func (a *FundTradingAPIService) InternalAccountsAssetsGetExecute(r ApiInternalAccountsAssetsGetRequest) (*PiFinancialFundServiceAPIModelsInternalFundAssetResponseListApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiFinancialFundServiceAPIModelsInternalFundAssetResponseListApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundTradingAPIService.InternalAccountsAssetsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/accounts/assets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	if r.tradingAccountNo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tradingAccountNo", r.tradingAccountNo, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInternalAccountsSummariesGetRequest struct {
	ctx        context.Context
	ApiService *FundTradingAPIService
	userId     *string
}

func (r ApiInternalAccountsSummariesGetRequest) UserId(userId string) ApiInternalAccountsSummariesGetRequest {
	r.userId = &userId
	return r
}

func (r ApiInternalAccountsSummariesGetRequest) Execute() (*PiFinancialFundServiceAPIModelsAccountSummaryResponseArrayApiResponse, *http.Response, error) {
	return r.ApiService.InternalAccountsSummariesGetExecute(r)
}

/*
InternalAccountsSummariesGet Method for InternalAccountsSummariesGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalAccountsSummariesGetRequest
*/
func (a *FundTradingAPIService) InternalAccountsSummariesGet(ctx context.Context) ApiInternalAccountsSummariesGetRequest {
	return ApiInternalAccountsSummariesGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiFinancialFundServiceAPIModelsAccountSummaryResponseArrayApiResponse
func (a *FundTradingAPIService) InternalAccountsSummariesGetExecute(r ApiInternalAccountsSummariesGetRequest) (*PiFinancialFundServiceAPIModelsAccountSummaryResponseArrayApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiFinancialFundServiceAPIModelsAccountSummaryResponseArrayApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundTradingAPIService.InternalAccountsSummariesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/accounts/summaries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInternalOrdersBuyPostRequest struct {
	ctx                                                       context.Context
	ApiService                                                *FundTradingAPIService
	userId                                                    *string
	piFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest *PiFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest
}

func (r ApiInternalOrdersBuyPostRequest) UserId(userId string) ApiInternalOrdersBuyPostRequest {
	r.userId = &userId
	return r
}

func (r ApiInternalOrdersBuyPostRequest) PiFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest(piFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest PiFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest) ApiInternalOrdersBuyPostRequest {
	r.piFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest = &piFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest
	return r
}

func (r ApiInternalOrdersBuyPostRequest) Execute() (*PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse, *http.Response, error) {
	return r.ApiService.InternalOrdersBuyPostExecute(r)
}

/*
InternalOrdersBuyPost Subscribes to a fund order from internal DCA, which will contain the full error message.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalOrdersBuyPostRequest
*/
func (a *FundTradingAPIService) InternalOrdersBuyPost(ctx context.Context) ApiInternalOrdersBuyPostRequest {
	return ApiInternalOrdersBuyPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse
func (a *FundTradingAPIService) InternalOrdersBuyPostExecute(r ApiInternalOrdersBuyPostRequest) (*PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundTradingAPIService.InternalOrdersBuyPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/orders/buy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	// body params
	localVarPostBody = r.piFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInternalOrdersDeleteDeleteRequest struct {
	ctx                                               context.Context
	ApiService                                        *FundTradingAPIService
	userId                                            *string
	piFinancialFundServiceAPIModelsDeleteOrderRequest *PiFinancialFundServiceAPIModelsDeleteOrderRequest
}

func (r ApiInternalOrdersDeleteDeleteRequest) UserId(userId string) ApiInternalOrdersDeleteDeleteRequest {
	r.userId = &userId
	return r
}

func (r ApiInternalOrdersDeleteDeleteRequest) PiFinancialFundServiceAPIModelsDeleteOrderRequest(piFinancialFundServiceAPIModelsDeleteOrderRequest PiFinancialFundServiceAPIModelsDeleteOrderRequest) ApiInternalOrdersDeleteDeleteRequest {
	r.piFinancialFundServiceAPIModelsDeleteOrderRequest = &piFinancialFundServiceAPIModelsDeleteOrderRequest
	return r
}

func (r ApiInternalOrdersDeleteDeleteRequest) Execute() (*PiFinancialFundServiceAPIModelsBrokerOrderApiResponse, *http.Response, error) {
	return r.ApiService.InternalOrdersDeleteDeleteExecute(r)
}

/*
InternalOrdersDeleteDelete Method for InternalOrdersDeleteDelete

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalOrdersDeleteDeleteRequest
*/
func (a *FundTradingAPIService) InternalOrdersDeleteDelete(ctx context.Context) ApiInternalOrdersDeleteDeleteRequest {
	return ApiInternalOrdersDeleteDeleteRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiFinancialFundServiceAPIModelsBrokerOrderApiResponse
func (a *FundTradingAPIService) InternalOrdersDeleteDeleteExecute(r ApiInternalOrdersDeleteDeleteRequest) (*PiFinancialFundServiceAPIModelsBrokerOrderApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiFinancialFundServiceAPIModelsBrokerOrderApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundTradingAPIService.InternalOrdersDeleteDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/orders/delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	// body params
	localVarPostBody = r.piFinancialFundServiceAPIModelsDeleteOrderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInternalOrdersHistoriesOrdernoGetRequest struct {
	ctx          context.Context
	ApiService   *FundTradingAPIService
	orderNumbers *string
}

// saOrderReferenceNo
func (r ApiInternalOrdersHistoriesOrdernoGetRequest) OrderNumbers(orderNumbers string) ApiInternalOrdersHistoriesOrdernoGetRequest {
	r.orderNumbers = &orderNumbers
	return r
}

func (r ApiInternalOrdersHistoriesOrdernoGetRequest) Execute() (*PiFinancialFundServiceAPIModelsSiriusFundOrderHistoryResponseArrayApiResponse, *http.Response, error) {
	return r.ApiService.InternalOrdersHistoriesOrdernoGetExecute(r)
}

/*
InternalOrdersHistoriesOrdernoGet Get orders history by saOrderReferenceNo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalOrdersHistoriesOrdernoGetRequest
*/
func (a *FundTradingAPIService) InternalOrdersHistoriesOrdernoGet(ctx context.Context) ApiInternalOrdersHistoriesOrdernoGetRequest {
	return ApiInternalOrdersHistoriesOrdernoGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiFinancialFundServiceAPIModelsSiriusFundOrderHistoryResponseArrayApiResponse
func (a *FundTradingAPIService) InternalOrdersHistoriesOrdernoGetExecute(r ApiInternalOrdersHistoriesOrdernoGetRequest) (*PiFinancialFundServiceAPIModelsSiriusFundOrderHistoryResponseArrayApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiFinancialFundServiceAPIModelsSiriusFundOrderHistoryResponseArrayApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundTradingAPIService.InternalOrdersHistoriesOrdernoGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/orders/histories/orderno"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.orderNumbers == nil {
		return localVarReturnValue, nil, reportError("orderNumbers is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "orderNumbers", r.orderNumbers, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInternalOrdersRawOrdersGetRequest struct {
	ctx           context.Context
	ApiService    *FundTradingAPIService
	effectiveDate *string
}

func (r ApiInternalOrdersRawOrdersGetRequest) EffectiveDate(effectiveDate string) ApiInternalOrdersRawOrdersGetRequest {
	r.effectiveDate = &effectiveDate
	return r
}

func (r ApiInternalOrdersRawOrdersGetRequest) Execute() (*PiFinancialClientFundConnextModelFundOrderArrayApiResponse, *http.Response, error) {
	return r.ApiService.InternalOrdersRawOrdersGetExecute(r)
}

/*
InternalOrdersRawOrdersGet Method for InternalOrdersRawOrdersGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalOrdersRawOrdersGetRequest
*/
func (a *FundTradingAPIService) InternalOrdersRawOrdersGet(ctx context.Context) ApiInternalOrdersRawOrdersGetRequest {
	return ApiInternalOrdersRawOrdersGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiFinancialClientFundConnextModelFundOrderArrayApiResponse
func (a *FundTradingAPIService) InternalOrdersRawOrdersGetExecute(r ApiInternalOrdersRawOrdersGetRequest) (*PiFinancialClientFundConnextModelFundOrderArrayApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiFinancialClientFundConnextModelFundOrderArrayApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundTradingAPIService.InternalOrdersRawOrdersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/orders/raw-orders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.effectiveDate == nil {
		return localVarReturnValue, nil, reportError("effectiveDate is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "effectiveDate", r.effectiveDate, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSecureAccountsAssetsGetRequest struct {
	ctx              context.Context
	ApiService       *FundTradingAPIService
	userId           *string
	tradingAccountNo *string
}

func (r ApiSecureAccountsAssetsGetRequest) UserId(userId string) ApiSecureAccountsAssetsGetRequest {
	r.userId = &userId
	return r
}

func (r ApiSecureAccountsAssetsGetRequest) TradingAccountNo(tradingAccountNo string) ApiSecureAccountsAssetsGetRequest {
	r.tradingAccountNo = &tradingAccountNo
	return r
}

func (r ApiSecureAccountsAssetsGetRequest) Execute() (*PiFinancialFundServiceAPIModelsSiriusFundAssetResponseArrayApiResponse, *http.Response, error) {
	return r.ApiService.SecureAccountsAssetsGetExecute(r)
}

/*
SecureAccountsAssetsGet Method for SecureAccountsAssetsGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSecureAccountsAssetsGetRequest
*/
func (a *FundTradingAPIService) SecureAccountsAssetsGet(ctx context.Context) ApiSecureAccountsAssetsGetRequest {
	return ApiSecureAccountsAssetsGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiFinancialFundServiceAPIModelsSiriusFundAssetResponseArrayApiResponse
func (a *FundTradingAPIService) SecureAccountsAssetsGetExecute(r ApiSecureAccountsAssetsGetRequest) (*PiFinancialFundServiceAPIModelsSiriusFundAssetResponseArrayApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiFinancialFundServiceAPIModelsSiriusFundAssetResponseArrayApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundTradingAPIService.SecureAccountsAssetsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/secure/accounts/assets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}
	if r.tradingAccountNo == nil {
		return localVarReturnValue, nil, reportError("tradingAccountNo is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tradingAccountNo", r.tradingAccountNo, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSecureAccountsOpenordersGetRequest struct {
	ctx               context.Context
	ApiService        *FundTradingAPIService
	userId            *string
	tradingAccountNo  *string
	effectiveDateFrom *string
	effectiveDateTo   *string
}

func (r ApiSecureAccountsOpenordersGetRequest) UserId(userId string) ApiSecureAccountsOpenordersGetRequest {
	r.userId = &userId
	return r
}

func (r ApiSecureAccountsOpenordersGetRequest) TradingAccountNo(tradingAccountNo string) ApiSecureAccountsOpenordersGetRequest {
	r.tradingAccountNo = &tradingAccountNo
	return r
}

func (r ApiSecureAccountsOpenordersGetRequest) EffectiveDateFrom(effectiveDateFrom string) ApiSecureAccountsOpenordersGetRequest {
	r.effectiveDateFrom = &effectiveDateFrom
	return r
}

func (r ApiSecureAccountsOpenordersGetRequest) EffectiveDateTo(effectiveDateTo string) ApiSecureAccountsOpenordersGetRequest {
	r.effectiveDateTo = &effectiveDateTo
	return r
}

func (r ApiSecureAccountsOpenordersGetRequest) Execute() (*PiFinancialFundServiceAPIModelsSiriusFundOrderResponseArrayApiResponse, *http.Response, error) {
	return r.ApiService.SecureAccountsOpenordersGetExecute(r)
}

/*
SecureAccountsOpenordersGet Method for SecureAccountsOpenordersGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSecureAccountsOpenordersGetRequest
*/
func (a *FundTradingAPIService) SecureAccountsOpenordersGet(ctx context.Context) ApiSecureAccountsOpenordersGetRequest {
	return ApiSecureAccountsOpenordersGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiFinancialFundServiceAPIModelsSiriusFundOrderResponseArrayApiResponse
func (a *FundTradingAPIService) SecureAccountsOpenordersGetExecute(r ApiSecureAccountsOpenordersGetRequest) (*PiFinancialFundServiceAPIModelsSiriusFundOrderResponseArrayApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiFinancialFundServiceAPIModelsSiriusFundOrderResponseArrayApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundTradingAPIService.SecureAccountsOpenordersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/secure/accounts/openorders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}
	if r.tradingAccountNo == nil {
		return localVarReturnValue, nil, reportError("tradingAccountNo is required and must be specified")
	}
	if r.effectiveDateFrom == nil {
		return localVarReturnValue, nil, reportError("effectiveDateFrom is required and must be specified")
	}
	if r.effectiveDateTo == nil {
		return localVarReturnValue, nil, reportError("effectiveDateTo is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tradingAccountNo", r.tradingAccountNo, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "effectiveDateFrom", r.effectiveDateFrom, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "effectiveDateTo", r.effectiveDateTo, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSecureOrdersBuyPostRequest struct {
	ctx                                                       context.Context
	ApiService                                                *FundTradingAPIService
	userId                                                    *string
	piFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest *PiFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest
}

func (r ApiSecureOrdersBuyPostRequest) UserId(userId string) ApiSecureOrdersBuyPostRequest {
	r.userId = &userId
	return r
}

func (r ApiSecureOrdersBuyPostRequest) PiFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest(piFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest PiFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest) ApiSecureOrdersBuyPostRequest {
	r.piFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest = &piFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest
	return r
}

func (r ApiSecureOrdersBuyPostRequest) Execute() (*PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse, *http.Response, error) {
	return r.ApiService.SecureOrdersBuyPostExecute(r)
}

/*
SecureOrdersBuyPost Method for SecureOrdersBuyPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSecureOrdersBuyPostRequest
*/
func (a *FundTradingAPIService) SecureOrdersBuyPost(ctx context.Context) ApiSecureOrdersBuyPostRequest {
	return ApiSecureOrdersBuyPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse
func (a *FundTradingAPIService) SecureOrdersBuyPostExecute(r ApiSecureOrdersBuyPostRequest) (*PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundTradingAPIService.SecureOrdersBuyPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/secure/orders/buy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	// body params
	localVarPostBody = r.piFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSecureOrdersHistoriesGetRequest struct {
	ctx                context.Context
	ApiService         *FundTradingAPIService
	userId             *string
	tradingAccountNo   *string
	orderType          *string
	beginEffectiveDate *string
	endEffectiveDate   *string
}

func (r ApiSecureOrdersHistoriesGetRequest) UserId(userId string) ApiSecureOrdersHistoriesGetRequest {
	r.userId = &userId
	return r
}

func (r ApiSecureOrdersHistoriesGetRequest) TradingAccountNo(tradingAccountNo string) ApiSecureOrdersHistoriesGetRequest {
	r.tradingAccountNo = &tradingAccountNo
	return r
}

func (r ApiSecureOrdersHistoriesGetRequest) OrderType(orderType string) ApiSecureOrdersHistoriesGetRequest {
	r.orderType = &orderType
	return r
}

func (r ApiSecureOrdersHistoriesGetRequest) BeginEffectiveDate(beginEffectiveDate string) ApiSecureOrdersHistoriesGetRequest {
	r.beginEffectiveDate = &beginEffectiveDate
	return r
}

func (r ApiSecureOrdersHistoriesGetRequest) EndEffectiveDate(endEffectiveDate string) ApiSecureOrdersHistoriesGetRequest {
	r.endEffectiveDate = &endEffectiveDate
	return r
}

func (r ApiSecureOrdersHistoriesGetRequest) Execute() (*PiFinancialFundServiceAPIModelsSiriusFundOrderHistoryResponseArrayApiResponse, *http.Response, error) {
	return r.ApiService.SecureOrdersHistoriesGetExecute(r)
}

/*
SecureOrdersHistoriesGet Method for SecureOrdersHistoriesGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSecureOrdersHistoriesGetRequest
*/
func (a *FundTradingAPIService) SecureOrdersHistoriesGet(ctx context.Context) ApiSecureOrdersHistoriesGetRequest {
	return ApiSecureOrdersHistoriesGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiFinancialFundServiceAPIModelsSiriusFundOrderHistoryResponseArrayApiResponse
func (a *FundTradingAPIService) SecureOrdersHistoriesGetExecute(r ApiSecureOrdersHistoriesGetRequest) (*PiFinancialFundServiceAPIModelsSiriusFundOrderHistoryResponseArrayApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiFinancialFundServiceAPIModelsSiriusFundOrderHistoryResponseArrayApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundTradingAPIService.SecureOrdersHistoriesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/secure/orders/histories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}
	if r.tradingAccountNo == nil {
		return localVarReturnValue, nil, reportError("tradingAccountNo is required and must be specified")
	}
	if r.orderType == nil {
		return localVarReturnValue, nil, reportError("orderType is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tradingAccountNo", r.tradingAccountNo, "form", "")
	if r.beginEffectiveDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "beginEffectiveDate", r.beginEffectiveDate, "form", "")
	}
	if r.endEffectiveDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endEffectiveDate", r.endEffectiveDate, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "orderType", r.orderType, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSecureOrdersSellPostRequest struct {
	ctx                                                        context.Context
	ApiService                                                 *FundTradingAPIService
	userId                                                     *string
	piFinancialFundServiceAPIModelsSiriusPlaceSellOrderRequest *PiFinancialFundServiceAPIModelsSiriusPlaceSellOrderRequest
}

func (r ApiSecureOrdersSellPostRequest) UserId(userId string) ApiSecureOrdersSellPostRequest {
	r.userId = &userId
	return r
}

func (r ApiSecureOrdersSellPostRequest) PiFinancialFundServiceAPIModelsSiriusPlaceSellOrderRequest(piFinancialFundServiceAPIModelsSiriusPlaceSellOrderRequest PiFinancialFundServiceAPIModelsSiriusPlaceSellOrderRequest) ApiSecureOrdersSellPostRequest {
	r.piFinancialFundServiceAPIModelsSiriusPlaceSellOrderRequest = &piFinancialFundServiceAPIModelsSiriusPlaceSellOrderRequest
	return r
}

func (r ApiSecureOrdersSellPostRequest) Execute() (*PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse, *http.Response, error) {
	return r.ApiService.SecureOrdersSellPostExecute(r)
}

/*
SecureOrdersSellPost Method for SecureOrdersSellPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSecureOrdersSellPostRequest
*/
func (a *FundTradingAPIService) SecureOrdersSellPost(ctx context.Context) ApiSecureOrdersSellPostRequest {
	return ApiSecureOrdersSellPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse
func (a *FundTradingAPIService) SecureOrdersSellPostExecute(r ApiSecureOrdersSellPostRequest) (*PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundTradingAPIService.SecureOrdersSellPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/secure/orders/sell"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	// body params
	localVarPostBody = r.piFinancialFundServiceAPIModelsSiriusPlaceSellOrderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSecureOrdersSwitchInfoGetRequest struct {
	ctx              context.Context
	ApiService       *FundTradingAPIService
	userId           *string
	tradingAccountNo *string
	symbol           *string
	targetSymbol     *string
}

func (r ApiSecureOrdersSwitchInfoGetRequest) UserId(userId string) ApiSecureOrdersSwitchInfoGetRequest {
	r.userId = &userId
	return r
}

func (r ApiSecureOrdersSwitchInfoGetRequest) TradingAccountNo(tradingAccountNo string) ApiSecureOrdersSwitchInfoGetRequest {
	r.tradingAccountNo = &tradingAccountNo
	return r
}

func (r ApiSecureOrdersSwitchInfoGetRequest) Symbol(symbol string) ApiSecureOrdersSwitchInfoGetRequest {
	r.symbol = &symbol
	return r
}

func (r ApiSecureOrdersSwitchInfoGetRequest) TargetSymbol(targetSymbol string) ApiSecureOrdersSwitchInfoGetRequest {
	r.targetSymbol = &targetSymbol
	return r
}

func (r ApiSecureOrdersSwitchInfoGetRequest) Execute() (*PiFinancialFundServiceApplicationModelsTradingSwitchInfoApiResponse, *http.Response, error) {
	return r.ApiService.SecureOrdersSwitchInfoGetExecute(r)
}

/*
SecureOrdersSwitchInfoGet Method for SecureOrdersSwitchInfoGet

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSecureOrdersSwitchInfoGetRequest
*/
func (a *FundTradingAPIService) SecureOrdersSwitchInfoGet(ctx context.Context) ApiSecureOrdersSwitchInfoGetRequest {
	return ApiSecureOrdersSwitchInfoGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiFinancialFundServiceApplicationModelsTradingSwitchInfoApiResponse
func (a *FundTradingAPIService) SecureOrdersSwitchInfoGetExecute(r ApiSecureOrdersSwitchInfoGetRequest) (*PiFinancialFundServiceApplicationModelsTradingSwitchInfoApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiFinancialFundServiceApplicationModelsTradingSwitchInfoApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundTradingAPIService.SecureOrdersSwitchInfoGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/secure/orders/switch/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}
	if r.tradingAccountNo == nil {
		return localVarReturnValue, nil, reportError("tradingAccountNo is required and must be specified")
	}
	if r.symbol == nil {
		return localVarReturnValue, nil, reportError("symbol is required and must be specified")
	}
	if r.targetSymbol == nil {
		return localVarReturnValue, nil, reportError("targetSymbol is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "TradingAccountNo", r.tradingAccountNo, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "Symbol", r.symbol, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "TargetSymbol", r.targetSymbol, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSecureOrdersSwitchPostRequest struct {
	ctx                                                          context.Context
	ApiService                                                   *FundTradingAPIService
	userId                                                       *string
	piFinancialFundServiceAPIModelsSiriusPlaceSwitchOrderRequest *PiFinancialFundServiceAPIModelsSiriusPlaceSwitchOrderRequest
}

func (r ApiSecureOrdersSwitchPostRequest) UserId(userId string) ApiSecureOrdersSwitchPostRequest {
	r.userId = &userId
	return r
}

func (r ApiSecureOrdersSwitchPostRequest) PiFinancialFundServiceAPIModelsSiriusPlaceSwitchOrderRequest(piFinancialFundServiceAPIModelsSiriusPlaceSwitchOrderRequest PiFinancialFundServiceAPIModelsSiriusPlaceSwitchOrderRequest) ApiSecureOrdersSwitchPostRequest {
	r.piFinancialFundServiceAPIModelsSiriusPlaceSwitchOrderRequest = &piFinancialFundServiceAPIModelsSiriusPlaceSwitchOrderRequest
	return r
}

func (r ApiSecureOrdersSwitchPostRequest) Execute() (*PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse, *http.Response, error) {
	return r.ApiService.SecureOrdersSwitchPostExecute(r)
}

/*
SecureOrdersSwitchPost Method for SecureOrdersSwitchPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSecureOrdersSwitchPostRequest
*/
func (a *FundTradingAPIService) SecureOrdersSwitchPost(ctx context.Context) ApiSecureOrdersSwitchPostRequest {
	return ApiSecureOrdersSwitchPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse
func (a *FundTradingAPIService) SecureOrdersSwitchPostExecute(r ApiSecureOrdersSwitchPostRequest) (*PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundTradingAPIService.SecureOrdersSwitchPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/secure/orders/switch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	// body params
	localVarPostBody = r.piFinancialFundServiceAPIModelsSiriusPlaceSwitchOrderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTradingOrdersBuyPostRequest struct {
	ctx                                                       context.Context
	ApiService                                                *FundTradingAPIService
	userId                                                    *string
	piFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest *PiFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest
}

func (r ApiTradingOrdersBuyPostRequest) UserId(userId string) ApiTradingOrdersBuyPostRequest {
	r.userId = &userId
	return r
}

func (r ApiTradingOrdersBuyPostRequest) PiFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest(piFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest PiFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest) ApiTradingOrdersBuyPostRequest {
	r.piFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest = &piFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest
	return r
}

func (r ApiTradingOrdersBuyPostRequest) Execute() (*PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse, *http.Response, error) {
	return r.ApiService.TradingOrdersBuyPostExecute(r)
}

/*
TradingOrdersBuyPost Method for TradingOrdersBuyPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiTradingOrdersBuyPostRequest
*/
func (a *FundTradingAPIService) TradingOrdersBuyPost(ctx context.Context) ApiTradingOrdersBuyPostRequest {
	return ApiTradingOrdersBuyPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse
func (a *FundTradingAPIService) TradingOrdersBuyPostExecute(r ApiTradingOrdersBuyPostRequest) (*PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundTradingAPIService.TradingOrdersBuyPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trading/orders/buy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	// body params
	localVarPostBody = r.piFinancialFundServiceAPIModelsSiriusPlaceBuyOrderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTradingOrdersSellPostRequest struct {
	ctx                                                        context.Context
	ApiService                                                 *FundTradingAPIService
	userId                                                     *string
	piFinancialFundServiceAPIModelsSiriusPlaceSellOrderRequest *PiFinancialFundServiceAPIModelsSiriusPlaceSellOrderRequest
}

func (r ApiTradingOrdersSellPostRequest) UserId(userId string) ApiTradingOrdersSellPostRequest {
	r.userId = &userId
	return r
}

func (r ApiTradingOrdersSellPostRequest) PiFinancialFundServiceAPIModelsSiriusPlaceSellOrderRequest(piFinancialFundServiceAPIModelsSiriusPlaceSellOrderRequest PiFinancialFundServiceAPIModelsSiriusPlaceSellOrderRequest) ApiTradingOrdersSellPostRequest {
	r.piFinancialFundServiceAPIModelsSiriusPlaceSellOrderRequest = &piFinancialFundServiceAPIModelsSiriusPlaceSellOrderRequest
	return r
}

func (r ApiTradingOrdersSellPostRequest) Execute() (*PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse, *http.Response, error) {
	return r.ApiService.TradingOrdersSellPostExecute(r)
}

/*
TradingOrdersSellPost Method for TradingOrdersSellPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiTradingOrdersSellPostRequest
*/
func (a *FundTradingAPIService) TradingOrdersSellPost(ctx context.Context) ApiTradingOrdersSellPostRequest {
	return ApiTradingOrdersSellPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse
func (a *FundTradingAPIService) TradingOrdersSellPostExecute(r ApiTradingOrdersSellPostRequest) (*PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundTradingAPIService.TradingOrdersSellPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trading/orders/sell"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	// body params
	localVarPostBody = r.piFinancialFundServiceAPIModelsSiriusPlaceSellOrderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTradingOrdersSwitchPostRequest struct {
	ctx                                                          context.Context
	ApiService                                                   *FundTradingAPIService
	userId                                                       *string
	piFinancialFundServiceAPIModelsSiriusPlaceSwitchOrderRequest *PiFinancialFundServiceAPIModelsSiriusPlaceSwitchOrderRequest
}

func (r ApiTradingOrdersSwitchPostRequest) UserId(userId string) ApiTradingOrdersSwitchPostRequest {
	r.userId = &userId
	return r
}

func (r ApiTradingOrdersSwitchPostRequest) PiFinancialFundServiceAPIModelsSiriusPlaceSwitchOrderRequest(piFinancialFundServiceAPIModelsSiriusPlaceSwitchOrderRequest PiFinancialFundServiceAPIModelsSiriusPlaceSwitchOrderRequest) ApiTradingOrdersSwitchPostRequest {
	r.piFinancialFundServiceAPIModelsSiriusPlaceSwitchOrderRequest = &piFinancialFundServiceAPIModelsSiriusPlaceSwitchOrderRequest
	return r
}

func (r ApiTradingOrdersSwitchPostRequest) Execute() (*PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse, *http.Response, error) {
	return r.ApiService.TradingOrdersSwitchPostExecute(r)
}

/*
TradingOrdersSwitchPost Method for TradingOrdersSwitchPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiTradingOrdersSwitchPostRequest
*/
func (a *FundTradingAPIService) TradingOrdersSwitchPost(ctx context.Context) ApiTradingOrdersSwitchPostRequest {
	return ApiTradingOrdersSwitchPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse
func (a *FundTradingAPIService) TradingOrdersSwitchPostExecute(r ApiTradingOrdersSwitchPostRequest) (*PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PiFinancialFundServiceAPIModelsFundOrderPlacedApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FundTradingAPIService.TradingOrdersSwitchPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/trading/orders/switch"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "simple", "")
	// body params
	localVarPostBody = r.piFinancialFundServiceAPIModelsSiriusPlaceSwitchOrderRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v MicrosoftAspNetCoreMvcProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
