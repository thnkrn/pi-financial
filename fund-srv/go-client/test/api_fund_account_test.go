/*
Pi.Financial.FundService.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

Testing FundAccountAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package go_client

import (
	"context"
	"testing"

	openapiclient "github.com/pi-financial/fund-srv/go-client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_go_client_FundAccountAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FundAccountAPIService GenerateDocument", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FundAccountAPI.GenerateDocument(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FundAccountAPIService GetAccountOpeningState", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FundAccountAPI.GetAccountOpeningState(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FundAccountAPIService InternalGetAccountOpeningStateByCustCode", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var custCode string

		resp, httpRes, err := apiClient.FundAccountAPI.InternalGetAccountOpeningStateByCustCode(context.Background(), custCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FundAccountAPIService IsFundAccountExist", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FundAccountAPI.IsFundAccountExist(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FundAccountAPIService Ndid", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.FundAccountAPI.Ndid(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FundAccountAPIService OpenFundAccount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FundAccountAPI.OpenFundAccount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FundAccountAPIService OpenFundAccounts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FundAccountAPI.OpenFundAccounts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FundAccountAPIService UpdateFundCustomer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.FundAccountAPI.UpdateFundCustomer(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
