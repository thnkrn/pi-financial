/*
 * pi-it-backoffice-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Pi.Financial.Client.PiItBackoffice.Client.FileParameter;
using OpenAPIDateConverter = Pi.Financial.Client.PiItBackoffice.Client.OpenAPIDateConverter;

namespace Pi.Financial.Client.PiItBackoffice.Model
{
    /// <summary>
    /// PiGetAum
    /// </summary>
    [DataContract(Name = "pi_get_aum")]
    public partial class PiGetAum : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PiGetAum" /> class.
        /// </summary>
        /// <param name="postDate">postDate.</param>
        /// <param name="xchgMkt">xchgMkt.</param>
        /// <param name="account">account.</param>
        /// <param name="cashBalance">cashBalance.</param>
        /// <param name="arTrade">arTrade.</param>
        /// <param name="apTrade">apTrade.</param>
        /// <param name="marketValue">marketValue.</param>
        public PiGetAum(DateTime postDate = default(DateTime), string xchgMkt = default(string), string account = default(string), double cashBalance = default(double), double arTrade = default(double), double apTrade = default(double), double marketValue = default(double))
        {
            this.PostDate = postDate;
            this.XchgMkt = xchgMkt;
            this.Account = account;
            this.CashBalance = cashBalance;
            this.ArTrade = arTrade;
            this.ApTrade = apTrade;
            this.MarketValue = marketValue;
        }

        /// <summary>
        /// Gets or Sets PostDate
        /// </summary>
        [DataMember(Name = "postDate", EmitDefaultValue = false)]
        public DateTime PostDate { get; set; }

        /// <summary>
        /// Gets or Sets XchgMkt
        /// </summary>
        [DataMember(Name = "xchgMkt", EmitDefaultValue = true)]
        public string XchgMkt { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>
        [DataMember(Name = "account", EmitDefaultValue = true)]
        public string Account { get; set; }

        /// <summary>
        /// Gets or Sets CashBalance
        /// </summary>
        [DataMember(Name = "cashBalance", EmitDefaultValue = false)]
        public double CashBalance { get; set; }

        /// <summary>
        /// Gets or Sets ArTrade
        /// </summary>
        [DataMember(Name = "arTrade", EmitDefaultValue = false)]
        public double ArTrade { get; set; }

        /// <summary>
        /// Gets or Sets ApTrade
        /// </summary>
        [DataMember(Name = "apTrade", EmitDefaultValue = false)]
        public double ApTrade { get; set; }

        /// <summary>
        /// Gets or Sets MarketValue
        /// </summary>
        [DataMember(Name = "marketValue", EmitDefaultValue = false)]
        public double MarketValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PiGetAum {\n");
            sb.Append("  PostDate: ").Append(PostDate).Append("\n");
            sb.Append("  XchgMkt: ").Append(XchgMkt).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  CashBalance: ").Append(CashBalance).Append("\n");
            sb.Append("  ArTrade: ").Append(ArTrade).Append("\n");
            sb.Append("  ApTrade: ").Append(ApTrade).Append("\n");
            sb.Append("  MarketValue: ").Append(MarketValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
