/*
 * pi-it-backoffice-api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Pi.Financial.Client.PiItBackoffice.Client.FileParameter;
using OpenAPIDateConverter = Pi.Financial.Client.PiItBackoffice.Client.OpenAPIDateConverter;

namespace Pi.Financial.Client.PiItBackoffice.Model
{
    /// <summary>
    /// FundTransaction
    /// </summary>
    [DataContract(Name = "FundTransaction")]
    public partial class FundTransaction : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FundTransaction" /> class.
        /// </summary>
        /// <param name="amcCode">amcCode.</param>
        /// <param name="accountID">accountID.</param>
        /// <param name="unitholderID">unitholderID.</param>
        /// <param name="fundCode">fundCode.</param>
        /// <param name="unitBalance">unitBalance.</param>
        /// <param name="amount">amount.</param>
        /// <param name="availableUnitBalance">availableUnitBalance.</param>
        /// <param name="availableAmount">availableAmount.</param>
        /// <param name="pendingUnit">pendingUnit.</param>
        /// <param name="pendingAmount">pendingAmount.</param>
        /// <param name="pledgeUnit">pledgeUnit.</param>
        /// <param name="averageCost">averageCost.</param>
        /// <param name="nav">nav.</param>
        /// <param name="navDate">navDate.</param>
        public FundTransaction(string amcCode = default(string), string accountID = default(string), string unitholderID = default(string), string fundCode = default(string), double? unitBalance = default(double?), double? amount = default(double?), double? availableUnitBalance = default(double?), double? availableAmount = default(double?), double? pendingUnit = default(double?), double? pendingAmount = default(double?), double? pledgeUnit = default(double?), double? averageCost = default(double?), double? nav = default(double?), DateTime? navDate = default(DateTime?))
        {
            this.AmcCode = amcCode;
            this.AccountID = accountID;
            this.UnitholderID = unitholderID;
            this.FundCode = fundCode;
            this.UnitBalance = unitBalance;
            this.Amount = amount;
            this.AvailableUnitBalance = availableUnitBalance;
            this.AvailableAmount = availableAmount;
            this.PendingUnit = pendingUnit;
            this.PendingAmount = pendingAmount;
            this.PledgeUnit = pledgeUnit;
            this.AverageCost = averageCost;
            this.Nav = nav;
            this.NavDate = navDate;
        }

        /// <summary>
        /// Gets or Sets AmcCode
        /// </summary>
        [DataMember(Name = "amcCode", EmitDefaultValue = true)]
        public string AmcCode { get; set; }

        /// <summary>
        /// Gets or Sets AccountID
        /// </summary>
        [DataMember(Name = "accountID", EmitDefaultValue = true)]
        public string AccountID { get; set; }

        /// <summary>
        /// Gets or Sets UnitholderID
        /// </summary>
        [DataMember(Name = "unitholderID", EmitDefaultValue = true)]
        public string UnitholderID { get; set; }

        /// <summary>
        /// Gets or Sets FundCode
        /// </summary>
        [DataMember(Name = "fundCode", EmitDefaultValue = true)]
        public string FundCode { get; set; }

        /// <summary>
        /// Gets or Sets UnitBalance
        /// </summary>
        [DataMember(Name = "unitBalance", EmitDefaultValue = true)]
        public double? UnitBalance { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = true)]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or Sets AvailableUnitBalance
        /// </summary>
        [DataMember(Name = "availableUnitBalance", EmitDefaultValue = true)]
        public double? AvailableUnitBalance { get; set; }

        /// <summary>
        /// Gets or Sets AvailableAmount
        /// </summary>
        [DataMember(Name = "availableAmount", EmitDefaultValue = true)]
        public double? AvailableAmount { get; set; }

        /// <summary>
        /// Gets or Sets PendingUnit
        /// </summary>
        [DataMember(Name = "pendingUnit", EmitDefaultValue = true)]
        public double? PendingUnit { get; set; }

        /// <summary>
        /// Gets or Sets PendingAmount
        /// </summary>
        [DataMember(Name = "pendingAmount", EmitDefaultValue = true)]
        public double? PendingAmount { get; set; }

        /// <summary>
        /// Gets or Sets PledgeUnit
        /// </summary>
        [DataMember(Name = "pledgeUnit", EmitDefaultValue = true)]
        public double? PledgeUnit { get; set; }

        /// <summary>
        /// Gets or Sets AverageCost
        /// </summary>
        [DataMember(Name = "averageCost", EmitDefaultValue = true)]
        public double? AverageCost { get; set; }

        /// <summary>
        /// Gets or Sets Nav
        /// </summary>
        [DataMember(Name = "nav", EmitDefaultValue = true)]
        public double? Nav { get; set; }

        /// <summary>
        /// Gets or Sets NavDate
        /// </summary>
        [DataMember(Name = "navDate", EmitDefaultValue = true)]
        public DateTime? NavDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FundTransaction {\n");
            sb.Append("  AmcCode: ").Append(AmcCode).Append("\n");
            sb.Append("  AccountID: ").Append(AccountID).Append("\n");
            sb.Append("  UnitholderID: ").Append(UnitholderID).Append("\n");
            sb.Append("  FundCode: ").Append(FundCode).Append("\n");
            sb.Append("  UnitBalance: ").Append(UnitBalance).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AvailableUnitBalance: ").Append(AvailableUnitBalance).Append("\n");
            sb.Append("  AvailableAmount: ").Append(AvailableAmount).Append("\n");
            sb.Append("  PendingUnit: ").Append(PendingUnit).Append("\n");
            sb.Append("  PendingAmount: ").Append(PendingAmount).Append("\n");
            sb.Append("  PledgeUnit: ").Append(PledgeUnit).Append("\n");
            sb.Append("  AverageCost: ").Append(AverageCost).Append("\n");
            sb.Append("  Nav: ").Append(Nav).Append("\n");
            sb.Append("  NavDate: ").Append(NavDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
