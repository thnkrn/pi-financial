/*
 * FundConnext
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Pi.Financial.Client.FundConnext.Client;
using Pi.Financial.Client.FundConnext.Model;

namespace Pi.Financial.Client.FundConnext.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFundConnextApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List unit holder balance by account
        /// </summary>
        /// <remarks>
        /// API Account Balances Version 1
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountNo"></param>
        /// <returns>ApiAccountBalancesGet200Response</returns>
        ApiAccountBalancesGet200Response ApiAccountBalancesGet(string xAuthToken, string accountNo);

        /// <summary>
        /// List unit holder balance by account
        /// </summary>
        /// <remarks>
        /// API Account Balances Version 1
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountNo"></param>
        /// <returns>ApiResponse of ApiAccountBalancesGet200Response</returns>
        ApiResponse<ApiAccountBalancesGet200Response> ApiAccountBalancesGetWithHttpInfo(string xAuthToken, string accountNo);
        /// <summary>
        /// Order Inquiry by Account No (This version will be deprecated in Q4/2023.) 
        /// </summary>
        /// <remarks>
        /// Order Inquiry by Account No This version will be deprecated in Q4/2023.)
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNo"></param>
        /// <param name="begEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="endEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <returns>ApiAccountFundOrdersGet200Response</returns>
        [Obsolete]
        ApiAccountFundOrdersGet200Response ApiAccountFundOrdersGet(string accountNo, string begEffectiveDate, string endEffectiveDate);

        /// <summary>
        /// Order Inquiry by Account No (This version will be deprecated in Q4/2023.) 
        /// </summary>
        /// <remarks>
        /// Order Inquiry by Account No This version will be deprecated in Q4/2023.)
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNo"></param>
        /// <param name="begEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="endEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <returns>ApiResponse of ApiAccountFundOrdersGet200Response</returns>
        [Obsolete]
        ApiResponse<ApiAccountFundOrdersGet200Response> ApiAccountFundOrdersGetWithHttpInfo(string accountNo, string begEffectiveDate, string endEffectiveDate);
        /// <summary>
        /// Order Inquiry by Account No Version 2
        /// </summary>
        /// <remarks>
        /// Order Inquiry by Account No Version 2
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountNo"></param>
        /// <param name="begEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="endEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>ApiAccountFundOrdersV2Get200Response</returns>
        ApiAccountFundOrdersV2Get200Response ApiAccountFundOrdersV2Get(string xAuthToken, string accountNo, string begEffectiveDate, string endEffectiveDate, string? status = default(string?), string? page = default(string?));

        /// <summary>
        /// Order Inquiry by Account No Version 2
        /// </summary>
        /// <remarks>
        /// Order Inquiry by Account No Version 2
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountNo"></param>
        /// <param name="begEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="endEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>ApiResponse of ApiAccountFundOrdersV2Get200Response</returns>
        ApiResponse<ApiAccountFundOrdersV2Get200Response> ApiAccountFundOrdersV2GetWithHttpInfo(string xAuthToken, string accountNo, string begEffectiveDate, string endEffectiveDate, string? status = default(string?), string? page = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Authenticate with FundConnext
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRequest">Authenticate Request Body</param>
        /// <returns>AuthenticationSuccessResponse</returns>
        AuthenticationSuccessResponse ApiAuthPost(AuthenticationRequest authenticationRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Authenticate with FundConnext
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRequest">Authenticate Request Body</param>
        /// <returns>ApiResponse of AuthenticationSuccessResponse</returns>
        ApiResponse<AuthenticationSuccessResponse> ApiAuthPostWithHttpInfo(AuthenticationRequest authenticationRequest);
        /// <summary>
        /// Create switching cross amc
        /// </summary>
        /// <remarks>
        /// Create switching cross amc
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCrossAmcSwitchingPostRequest">Example request body for Create switching cross amc (optional)</param>
        /// <returns>ApiCrossAmcSwitchingPost200Response</returns>
        ApiCrossAmcSwitchingPost200Response ApiCrossAmcSwitchingPost(ApiCrossAmcSwitchingPostRequest? apiCrossAmcSwitchingPostRequest = default(ApiCrossAmcSwitchingPostRequest?));

        /// <summary>
        /// Create switching cross amc
        /// </summary>
        /// <remarks>
        /// Create switching cross amc
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCrossAmcSwitchingPostRequest">Example request body for Create switching cross amc (optional)</param>
        /// <returns>ApiResponse of ApiCrossAmcSwitchingPost200Response</returns>
        ApiResponse<ApiCrossAmcSwitchingPost200Response> ApiCrossAmcSwitchingPostWithHttpInfo(ApiCrossAmcSwitchingPostRequest? apiCrossAmcSwitchingPostRequest = default(ApiCrossAmcSwitchingPostRequest?));
        /// <summary>
        /// Cancel cross amc switching order
        /// </summary>
        /// <remarks>
        /// Cancel cross amc switching order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api cross amc switching (optional)</param>
        /// <returns>ApiSubscriptionsTransactionIdDelete200Response</returns>
        ApiSubscriptionsTransactionIdDelete200Response ApiCrossAmcSwitchingTransactionIdDelete(string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?));

        /// <summary>
        /// Cancel cross amc switching order
        /// </summary>
        /// <remarks>
        /// Cancel cross amc switching order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api cross amc switching (optional)</param>
        /// <returns>ApiResponse of ApiSubscriptionsTransactionIdDelete200Response</returns>
        ApiResponse<ApiSubscriptionsTransactionIdDelete200Response> ApiCrossAmcSwitchingTransactionIdDeleteWithHttpInfo(string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?));
        /// <summary>
        /// Approve cross amc switching order
        /// </summary>
        /// <remarks>
        /// Approve cross amc switching order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiCrossAmcSwitchingTransactionIdPatchRequest">Example request body for api approve cross amc switching (optional)</param>
        /// <returns>ApiCrossAmcSwitchingTransactionIdPatch200Response</returns>
        ApiCrossAmcSwitchingTransactionIdPatch200Response ApiCrossAmcSwitchingTransactionIdPatch(string transactionId, ApiCrossAmcSwitchingTransactionIdPatchRequest? apiCrossAmcSwitchingTransactionIdPatchRequest = default(ApiCrossAmcSwitchingTransactionIdPatchRequest?));

        /// <summary>
        /// Approve cross amc switching order
        /// </summary>
        /// <remarks>
        /// Approve cross amc switching order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiCrossAmcSwitchingTransactionIdPatchRequest">Example request body for api approve cross amc switching (optional)</param>
        /// <returns>ApiResponse of ApiCrossAmcSwitchingTransactionIdPatch200Response</returns>
        ApiResponse<ApiCrossAmcSwitchingTransactionIdPatch200Response> ApiCrossAmcSwitchingTransactionIdPatchWithHttpInfo(string transactionId, ApiCrossAmcSwitchingTransactionIdPatchRequest? apiCrossAmcSwitchingTransactionIdPatchRequest = default(ApiCrossAmcSwitchingTransactionIdPatchRequest?));
        /// <summary>
        /// Find Customer Profile By Account
        /// </summary>
        /// <remarks>
        /// Find Customer Profile By Account&lt;br/&gt;This content will be in the same JSON format as in CUSTOMERPROFILE.zip (in yyyyMMdd_SAcode_INDIVIDUAL.json). The example response below is in V5 format. (Please refer to IndividualInvestorV5Response)&lt;br/&gt;Please contact TSD if you want to change version of yyyyMMdd_SAcode_INDIVIDUAL.json in CUSTOMERPROFILE.zip&lt;br&gt; ตั้งแต่วันที่ 09/03/2024 มีการเพิ่มข้อมูลที่เกี่ยวข้องกับ CRS
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountId">Find customer profile by account (optional)</param>
        /// <returns>IndividualInvestorV5Response</returns>
        IndividualInvestorV5Response ApiCustomerAccountGet(string xAuthToken, Object? accountId = default(Object?));

        /// <summary>
        /// Find Customer Profile By Account
        /// </summary>
        /// <remarks>
        /// Find Customer Profile By Account&lt;br/&gt;This content will be in the same JSON format as in CUSTOMERPROFILE.zip (in yyyyMMdd_SAcode_INDIVIDUAL.json). The example response below is in V5 format. (Please refer to IndividualInvestorV5Response)&lt;br/&gt;Please contact TSD if you want to change version of yyyyMMdd_SAcode_INDIVIDUAL.json in CUSTOMERPROFILE.zip&lt;br&gt; ตั้งแต่วันที่ 09/03/2024 มีการเพิ่มข้อมูลที่เกี่ยวข้องกับ CRS
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountId">Find customer profile by account (optional)</param>
        /// <returns>ApiResponse of IndividualInvestorV5Response</returns>
        ApiResponse<IndividualInvestorV5Response> ApiCustomerAccountGetWithHttpInfo(string xAuthToken, Object? accountId = default(Object?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload Individual Account File
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType"></param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="identificationCardType"> (optional)</param>
        /// <param name="passportCountry"> (optional)</param>
        /// <param name="cardNumber"> (optional)</param>
        /// <param name="approved"> (optional)</param>
        /// <returns>string</returns>
        string ApiCustomerIndividualAccountFileTypeUploadPost(string fileType, string? xAuthToken = default(string?), FileParameter? file = default(FileParameter?), string? accountId = default(string?), string? identificationCardType = default(string?), string? passportCountry = default(string?), string? cardNumber = default(string?), bool? approved = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload Individual Account File
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType"></param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="identificationCardType"> (optional)</param>
        /// <param name="passportCountry"> (optional)</param>
        /// <param name="cardNumber"> (optional)</param>
        /// <param name="approved"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiCustomerIndividualAccountFileTypeUploadPostWithHttpInfo(string fileType, string? xAuthToken = default(string?), FileParameter? file = default(FileParameter?), string? accountId = default(string?), string? identificationCardType = default(string?), string? passportCountry = default(string?), string? cardNumber = default(string?), bool? approved = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Individual Account v4
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAccountCreateRequest">Create Individual one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>string</returns>
        string ApiCustomerIndividualAccountV4Post(CustomerAccountCreateRequest customerAccountCreateRequest, string? xAuthToken = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Individual Account v4
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAccountCreateRequest">Create Individual one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiCustomerIndividualAccountV4PostWithHttpInfo(CustomerAccountCreateRequest customerAccountCreateRequest, string? xAuthToken = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Individual Account v4
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAccountUpdateRequest">Update Individual one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>string</returns>
        string ApiCustomerIndividualAccountV4Put(CustomerAccountUpdateRequest customerAccountUpdateRequest, string? xAuthToken = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Individual Account v4
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAccountUpdateRequest">Update Individual one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiCustomerIndividualAccountV4PutWithHttpInfo(CustomerAccountUpdateRequest customerAccountUpdateRequest, string? xAuthToken = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// upload customer document
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType"></param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="identificationCardType"> (optional)</param>
        /// <param name="passportCountry"> (optional)</param>
        /// <param name="cardNumber"> (optional)</param>
        /// <param name="approved"> (optional)</param>
        /// <returns>string</returns>
        string ApiCustomerIndividualFileTypeUploadPost(string fileType, string? xAuthToken = default(string?), FileParameter? file = default(FileParameter?), string? identificationCardType = default(string?), string? passportCountry = default(string?), string? cardNumber = default(string?), bool? approved = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// upload customer document
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType"></param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="identificationCardType"> (optional)</param>
        /// <param name="passportCountry"> (optional)</param>
        /// <param name="cardNumber"> (optional)</param>
        /// <param name="approved"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiCustomerIndividualFileTypeUploadPostWithHttpInfo(string fileType, string? xAuthToken = default(string?), FileParameter? file = default(FileParameter?), string? identificationCardType = default(string?), string? passportCountry = default(string?), string? cardNumber = default(string?), bool? approved = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Partial Individual Customer Profile
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>string</returns>
        string ApiCustomerIndividualPatch(string? xAuthToken = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Partial Individual Customer Profile
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiCustomerIndividualPatchWithHttpInfo(string? xAuthToken = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Individual Customer Profile
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileCreateRequest">Create Individual Customer Profile request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>string</returns>
        string ApiCustomerIndividualV4Post(CustomerProfileCreateRequest customerProfileCreateRequest, string? xAuthToken = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Individual Customer Profile
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileCreateRequest">Create Individual Customer Profile request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiCustomerIndividualV4PostWithHttpInfo(CustomerProfileCreateRequest customerProfileCreateRequest, string? xAuthToken = default(string?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Individual Customer Profile
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileUpdateRequest">Update Individual Customer Profile request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>string</returns>
        string ApiCustomerIndividualV4Put(CustomerProfileUpdateRequest customerProfileUpdateRequest, string? xAuthToken = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Individual Customer Profile
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileUpdateRequest">Update Individual Customer Profile request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiCustomerIndividualV4PutWithHttpInfo(CustomerProfileUpdateRequest customerProfileUpdateRequest, string? xAuthToken = default(string?));
        /// <summary>
        /// Create Individual Customer Profile
        /// </summary>
        /// <remarks>
        /// Create new individual customer v5
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV5">Example request body for creating individual customer profile (optional)</param>
        /// <returns>string</returns>
        string ApiCustomerIndividualV5Post(string? xAuthToken = default(string?), CustomerAccountCreateRequestV5? customerAccountCreateRequestV5 = default(CustomerAccountCreateRequestV5?));

        /// <summary>
        /// Create Individual Customer Profile
        /// </summary>
        /// <remarks>
        /// Create new individual customer v5
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV5">Example request body for creating individual customer profile (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiCustomerIndividualV5PostWithHttpInfo(string? xAuthToken = default(string?), CustomerAccountCreateRequestV5? customerAccountCreateRequestV5 = default(CustomerAccountCreateRequestV5?));
        /// <summary>
        /// Update Individual Customer Profile
        /// </summary>
        /// <remarks>
        /// Update individual customer
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV5">Example request body for updating individual customer profile (optional)</param>
        /// <returns>string</returns>
        string ApiCustomerIndividualV5Put(string? xAuthToken = default(string?), CustomerAccountCreateRequestV5? customerAccountCreateRequestV5 = default(CustomerAccountCreateRequestV5?));

        /// <summary>
        /// Update Individual Customer Profile
        /// </summary>
        /// <remarks>
        /// Update individual customer
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV5">Example request body for updating individual customer profile (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiCustomerIndividualV5PutWithHttpInfo(string? xAuthToken = default(string?), CustomerAccountCreateRequestV5? customerAccountCreateRequestV5 = default(CustomerAccountCreateRequestV5?));
        /// <summary>
        /// Create Individual Customer Profile
        /// </summary>
        /// <remarks>
        /// Create new individual customer v6
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV6">Example request body for creating individual customer profile (optional)</param>
        /// <returns>string</returns>
        string ApiCustomerIndividualV6Post(string? xAuthToken = default(string?), CustomerAccountCreateRequestV6? customerAccountCreateRequestV6 = default(CustomerAccountCreateRequestV6?));

        /// <summary>
        /// Create Individual Customer Profile
        /// </summary>
        /// <remarks>
        /// Create new individual customer v6
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV6">Example request body for creating individual customer profile (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiCustomerIndividualV6PostWithHttpInfo(string? xAuthToken = default(string?), CustomerAccountCreateRequestV6? customerAccountCreateRequestV6 = default(CustomerAccountCreateRequestV6?));
        /// <summary>
        /// Update Individual Customer Profile
        /// </summary>
        /// <remarks>
        /// Update individual customer
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV6">Example request body for updating individual customer profile (optional)</param>
        /// <returns>string</returns>
        string ApiCustomerIndividualV6Put(string? xAuthToken = default(string?), CustomerAccountCreateRequestV6? customerAccountCreateRequestV6 = default(CustomerAccountCreateRequestV6?));

        /// <summary>
        /// Update Individual Customer Profile
        /// </summary>
        /// <remarks>
        /// Update individual customer
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV6">Example request body for updating individual customer profile (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiCustomerIndividualV6PutWithHttpInfo(string? xAuthToken = default(string?), CustomerAccountCreateRequestV6? customerAccountCreateRequestV6 = default(CustomerAccountCreateRequestV6?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Juristic Account v4
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerJuristicAccountUpdateRequest">Update Juristic one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>string</returns>
        string ApiCustomerJuristicAccountV4Put(CustomerJuristicAccountUpdateRequest customerJuristicAccountUpdateRequest, string? xAuthToken = default(string?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Juristic Account v4
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerJuristicAccountUpdateRequest">Update Juristic one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiCustomerJuristicAccountV4PutWithHttpInfo(CustomerJuristicAccountUpdateRequest customerJuristicAccountUpdateRequest, string? xAuthToken = default(string?));
        /// <summary>
        /// Get Juristic Customer Profile
        /// </summary>
        /// <remarks>
        /// Retrieve Juristic Customer Profile and Account (V5)
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="juristicNumber">เลขที่ใบสำคัญการจดทะเบียน เช่น เลขทะเบียนการค้า เป็นต้น (ต้อง unique ภายใต้ SA) (optional)</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>JuristicInvestorV5Response</returns>
        JuristicInvestorV5Response ApiCustomerJuristicInvestorProfileV5Get(string? juristicNumber = default(string?), string? xAuthToken = default(string?));

        /// <summary>
        /// Get Juristic Customer Profile
        /// </summary>
        /// <remarks>
        /// Retrieve Juristic Customer Profile and Account (V5)
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="juristicNumber">เลขที่ใบสำคัญการจดทะเบียน เช่น เลขทะเบียนการค้า เป็นต้น (ต้อง unique ภายใต้ SA) (optional)</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>ApiResponse of JuristicInvestorV5Response</returns>
        ApiResponse<JuristicInvestorV5Response> ApiCustomerJuristicInvestorProfileV5GetWithHttpInfo(string? juristicNumber = default(string?), string? xAuthToken = default(string?));
        /// <summary>
        /// Download files
        /// </summary>
        /// <remarks>
        /// Download file by fileType and businessDate
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessDate">business date (YYYYMMDD)</param>
        /// <param name="fileType">**Master:** PostalCode.zip, BankBranch.zip, AMCCode.zip, SACode.zip, AssetAllocation.zip, TopHolding.zip, SecFundFee.zip&lt;/br&gt;&lt;/br&gt;**AMC:** PaidTransactions.zip, NewAccount.zip, Attachment.zip, AmendmentComparison.zip, EAmendmentComparison.zip, ReconcileMonthlyFee.zip&lt;/br&gt;&lt;/br&gt;**SA Normal:**   * FundMapping.zip  * FundProfile.zip  * FundHoliday.zip  * SwitchingMatrix.zip  * TradeCalendar.zip  * Fee.zip  * FundPerformance.zip  * AccountProfile.zip  * UnitholderMapping.zip  * BankAccountUnitholder.zip  * CustomerProfile.zip  * Nav.zip  * UnitholderBalance.zip  * AllottedTransactions.zip  * LtfBalance.zip  * DividendNews.zip  * DividendTransactions.zip  * ConfirmationNote.zip  * ConfirmationNoteTxt.zip  * MonthlyStatement.zip  * MonthlyStatementTxt.zip  * WithholdingTax.zip  * WithholdingTaxTxt.zip  * SuspendUnitholder.zip  * Pnd2.zip  * Pnd2A.zip  * Pnd53.zip  * FinNetBankMapping.zip  * UnitholderBalanceOffshore.zip  * AllottedTransactionsOffshore.zip  * SidePocket.zip  **SA Passthrough:**   * FundMapping.zip  * FundProfile.zip  * FundHoliday.zip  * SwitchingMatrix.zip  * TradeCalendar.zip  * Fee.zip  * FundPerformance.zip  * Nav.zip  * AllottedTransactions.zip  * UnitholderBalance.zip  * LtfBalance.zip  * DividendNews.zip  * DividendTransactions.zip  * SuspendUnitholder.zip  * AssignUnitholderId.zip  * SidePocket.zip   **Custodian:**   * AllottedTransactions.zip  * OrderTransactions.zip  * Nav.zip  * FundMapping.zip  * DividendTransactions.zip  * UnitholderBalance.zip  *  SidePocket.zip</param>
        /// <param name="part">Only fileType &#x3D; Attachment (optional)</param>
        /// <param name="varVersion">**FileType &#x3D; PaidTransactions** &lt;ul&gt;&lt;li&gt;1 &#x3D; batch round 11:45 am&lt;/li&gt;&lt;li&gt;2 &#x3D; batch round 12:15 pm&lt;/li&gt;&lt;li&gt;3 &#x3D; batch round 12:45 pm&lt;/li&gt;&lt;li&gt;4 &#x3D; batch round 1:15 pm&lt;/li&gt;&lt;li&gt;5 &#x3D; batch round 1:45 pm&lt;/li&gt;&lt;li&gt;6 &#x3D; batch round 2:15 pm&lt;/li&gt;&lt;li&gt;7 &#x3D; batch round 2:45 pm&lt;/li&gt;&lt;li&gt;8 &#x3D; batch round 3:15 pm&lt;/li&gt;&lt;li&gt;9 &#x3D; batch round 3:45 pm&lt;/li&gt;&lt;/ul&gt; &lt;/br&gt; **FileType &#x3D; OrderTransactions** &lt;ul&gt;&lt;li&gt;1 &#x3D; batch round 11:42 am&lt;/li&gt;&lt;li&gt;2 &#x3D; batch round 12:12 pm&lt;/li&gt;&lt;li&gt;3 &#x3D; batch round 12:42 pm&lt;/li&gt;&lt;li&gt;4 &#x3D; batch round 1:12 pm&lt;/li&gt;&lt;li&gt;5 &#x3D; batch round 1:42 pm&lt;/li&gt;&lt;li&gt;6 &#x3D; batch round 2:12 pm&lt;/li&gt;&lt;li&gt;7 &#x3D; batch round 2:42 pm&lt;/li&gt;&lt;li&gt;8 &#x3D; batch round 3:12 pm&lt;/li&gt;&lt;li&gt;9 &#x3D; batch round 3:42 pm&lt;/li&gt;&lt;li&gt;BCP&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <returns>FileParameter</returns>
        FileParameter ApiFilesBusinessDateFileTypeGet(string businessDate, string fileType, int? part = default(int?), ApiFilesBusinessDateFileTypeGetVersionParameter? varVersion = default(ApiFilesBusinessDateFileTypeGetVersionParameter?));

        /// <summary>
        /// Download files
        /// </summary>
        /// <remarks>
        /// Download file by fileType and businessDate
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessDate">business date (YYYYMMDD)</param>
        /// <param name="fileType">**Master:** PostalCode.zip, BankBranch.zip, AMCCode.zip, SACode.zip, AssetAllocation.zip, TopHolding.zip, SecFundFee.zip&lt;/br&gt;&lt;/br&gt;**AMC:** PaidTransactions.zip, NewAccount.zip, Attachment.zip, AmendmentComparison.zip, EAmendmentComparison.zip, ReconcileMonthlyFee.zip&lt;/br&gt;&lt;/br&gt;**SA Normal:**   * FundMapping.zip  * FundProfile.zip  * FundHoliday.zip  * SwitchingMatrix.zip  * TradeCalendar.zip  * Fee.zip  * FundPerformance.zip  * AccountProfile.zip  * UnitholderMapping.zip  * BankAccountUnitholder.zip  * CustomerProfile.zip  * Nav.zip  * UnitholderBalance.zip  * AllottedTransactions.zip  * LtfBalance.zip  * DividendNews.zip  * DividendTransactions.zip  * ConfirmationNote.zip  * ConfirmationNoteTxt.zip  * MonthlyStatement.zip  * MonthlyStatementTxt.zip  * WithholdingTax.zip  * WithholdingTaxTxt.zip  * SuspendUnitholder.zip  * Pnd2.zip  * Pnd2A.zip  * Pnd53.zip  * FinNetBankMapping.zip  * UnitholderBalanceOffshore.zip  * AllottedTransactionsOffshore.zip  * SidePocket.zip  **SA Passthrough:**   * FundMapping.zip  * FundProfile.zip  * FundHoliday.zip  * SwitchingMatrix.zip  * TradeCalendar.zip  * Fee.zip  * FundPerformance.zip  * Nav.zip  * AllottedTransactions.zip  * UnitholderBalance.zip  * LtfBalance.zip  * DividendNews.zip  * DividendTransactions.zip  * SuspendUnitholder.zip  * AssignUnitholderId.zip  * SidePocket.zip   **Custodian:**   * AllottedTransactions.zip  * OrderTransactions.zip  * Nav.zip  * FundMapping.zip  * DividendTransactions.zip  * UnitholderBalance.zip  *  SidePocket.zip</param>
        /// <param name="part">Only fileType &#x3D; Attachment (optional)</param>
        /// <param name="varVersion">**FileType &#x3D; PaidTransactions** &lt;ul&gt;&lt;li&gt;1 &#x3D; batch round 11:45 am&lt;/li&gt;&lt;li&gt;2 &#x3D; batch round 12:15 pm&lt;/li&gt;&lt;li&gt;3 &#x3D; batch round 12:45 pm&lt;/li&gt;&lt;li&gt;4 &#x3D; batch round 1:15 pm&lt;/li&gt;&lt;li&gt;5 &#x3D; batch round 1:45 pm&lt;/li&gt;&lt;li&gt;6 &#x3D; batch round 2:15 pm&lt;/li&gt;&lt;li&gt;7 &#x3D; batch round 2:45 pm&lt;/li&gt;&lt;li&gt;8 &#x3D; batch round 3:15 pm&lt;/li&gt;&lt;li&gt;9 &#x3D; batch round 3:45 pm&lt;/li&gt;&lt;/ul&gt; &lt;/br&gt; **FileType &#x3D; OrderTransactions** &lt;ul&gt;&lt;li&gt;1 &#x3D; batch round 11:42 am&lt;/li&gt;&lt;li&gt;2 &#x3D; batch round 12:12 pm&lt;/li&gt;&lt;li&gt;3 &#x3D; batch round 12:42 pm&lt;/li&gt;&lt;li&gt;4 &#x3D; batch round 1:12 pm&lt;/li&gt;&lt;li&gt;5 &#x3D; batch round 1:42 pm&lt;/li&gt;&lt;li&gt;6 &#x3D; batch round 2:12 pm&lt;/li&gt;&lt;li&gt;7 &#x3D; batch round 2:42 pm&lt;/li&gt;&lt;li&gt;8 &#x3D; batch round 3:12 pm&lt;/li&gt;&lt;li&gt;9 &#x3D; batch round 3:42 pm&lt;/li&gt;&lt;li&gt;BCP&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> ApiFilesBusinessDateFileTypeGetWithHttpInfo(string businessDate, string fileType, int? part = default(int?), ApiFilesBusinessDateFileTypeGetVersionParameter? varVersion = default(ApiFilesBusinessDateFileTypeGetVersionParameter?));
        /// <summary>
        /// API Get QR by transactionCode
        /// </summary>
        /// <remarks>
        /// API Get QR by transactionCode
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <returns>ApiFundOrdersQrTransactionIdGet200Response</returns>
        ApiFundOrdersQrTransactionIdGet200Response ApiFundOrdersQrTransactionIdGet(string transactionId);

        /// <summary>
        /// API Get QR by transactionCode
        /// </summary>
        /// <remarks>
        /// API Get QR by transactionCode
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <returns>ApiResponse of ApiFundOrdersQrTransactionIdGet200Response</returns>
        ApiResponse<ApiFundOrdersQrTransactionIdGet200Response> ApiFundOrdersQrTransactionIdGetWithHttpInfo(string transactionId);
        /// <summary>
        /// Get orders by saOrderReferenceNo
        /// </summary>
        /// <remarks>
        /// Get orders by saOrderReferenceNo 
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="saOrderReferenceNo"></param>
        /// <returns>ApiAccountFundOrdersGet200Response</returns>
        ApiAccountFundOrdersGet200Response ApiFundOrdersSaOrderReferenceNoGet(string xAuthToken, string saOrderReferenceNo);

        /// <summary>
        /// Get orders by saOrderReferenceNo
        /// </summary>
        /// <remarks>
        /// Get orders by saOrderReferenceNo 
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="saOrderReferenceNo"></param>
        /// <returns>ApiResponse of ApiAccountFundOrdersGet200Response</returns>
        ApiResponse<ApiAccountFundOrdersGet200Response> ApiFundOrdersSaOrderReferenceNoGetWithHttpInfo(string xAuthToken, string saOrderReferenceNo);
        /// <summary>
        /// API Order Inquiry Version 2
        /// </summary>
        /// <remarks>
        /// API Order Inquiry Version 2
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="effectiveDate">Format: YYYYMMDD (Mandatory กรณีไม่ใส่ transactionId และ xwtOrderReferenceNo) (optional)</param>
        /// <param name="transactionId">(Mandatory กรณีไม่ใส่ effectiveDate และ xwtOrderReferenceNo) (optional)</param>
        /// <param name="xwtOrderReferenceNo">(Mandatory กรณีไม่ใส่ effectiveDate และ transactionId) (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="channel"> (optional)</param>
        /// <param name="recurringFlag"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>ApiAccountFundOrdersV2Get200Response</returns>
        ApiAccountFundOrdersV2Get200Response ApiFundOrdersV2Get(string xAuthToken, string? effectiveDate = default(string?), string? transactionId = default(string?), string? xwtOrderReferenceNo = default(string?), string? status = default(string?), string? channel = default(string?), string? recurringFlag = default(string?), string? page = default(string?));

        /// <summary>
        /// API Order Inquiry Version 2
        /// </summary>
        /// <remarks>
        /// API Order Inquiry Version 2
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="effectiveDate">Format: YYYYMMDD (Mandatory กรณีไม่ใส่ transactionId และ xwtOrderReferenceNo) (optional)</param>
        /// <param name="transactionId">(Mandatory กรณีไม่ใส่ effectiveDate และ xwtOrderReferenceNo) (optional)</param>
        /// <param name="xwtOrderReferenceNo">(Mandatory กรณีไม่ใส่ effectiveDate และ transactionId) (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="channel"> (optional)</param>
        /// <param name="recurringFlag"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>ApiResponse of ApiAccountFundOrdersV2Get200Response</returns>
        ApiResponse<ApiAccountFundOrdersV2Get200Response> ApiFundOrdersV2GetWithHttpInfo(string xAuthToken, string? effectiveDate = default(string?), string? transactionId = default(string?), string? xwtOrderReferenceNo = default(string?), string? status = default(string?), string? channel = default(string?), string? recurringFlag = default(string?), string? page = default(string?));
        /// <summary>
        /// Download news file
        /// </summary>
        /// <remarks>
        /// Download news file
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkFileId">Link file ID to get the file</param>
        /// <returns>FileParameter</returns>
        FileParameter ApiNewsDownloadLinkFileIdGet(string linkFileId);

        /// <summary>
        /// Download news file
        /// </summary>
        /// <remarks>
        /// Download news file
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkFileId">Link file ID to get the file</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> ApiNewsDownloadLinkFileIdGetWithHttpInfo(string linkFileId);
        /// <summary>
        /// Create offshore subscription order
        /// </summary>
        /// <remarks>
        /// Create new offshore redemption order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreRedemptionsPostRequest">Example request body for creating offshore redemption (optional)</param>
        /// <returns>ApiOffshoreRedemptionsPost200Response</returns>
        ApiOffshoreRedemptionsPost200Response ApiOffshoreRedemptionsPost(ApiOffshoreRedemptionsPostRequest? apiOffshoreRedemptionsPostRequest = default(ApiOffshoreRedemptionsPostRequest?));

        /// <summary>
        /// Create offshore subscription order
        /// </summary>
        /// <remarks>
        /// Create new offshore redemption order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreRedemptionsPostRequest">Example request body for creating offshore redemption (optional)</param>
        /// <returns>ApiResponse of ApiOffshoreRedemptionsPost200Response</returns>
        ApiResponse<ApiOffshoreRedemptionsPost200Response> ApiOffshoreRedemptionsPostWithHttpInfo(ApiOffshoreRedemptionsPostRequest? apiOffshoreRedemptionsPostRequest = default(ApiOffshoreRedemptionsPostRequest?));
        /// <summary>
        /// Approve offshore redemption order
        /// </summary>
        /// <remarks>
        /// Approve offshore redemption order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiOffshoreRedemptionsTransactionIdPatchRequest">Example request body for approve api offshore redemption (optional)</param>
        /// <returns></returns>
        void ApiOffshoreRedemptionsTransactionIdPatch(string transactionId, ApiOffshoreRedemptionsTransactionIdPatchRequest? apiOffshoreRedemptionsTransactionIdPatchRequest = default(ApiOffshoreRedemptionsTransactionIdPatchRequest?));

        /// <summary>
        /// Approve offshore redemption order
        /// </summary>
        /// <remarks>
        /// Approve offshore redemption order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiOffshoreRedemptionsTransactionIdPatchRequest">Example request body for approve api offshore redemption (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiOffshoreRedemptionsTransactionIdPatchWithHttpInfo(string transactionId, ApiOffshoreRedemptionsTransactionIdPatchRequest? apiOffshoreRedemptionsTransactionIdPatchRequest = default(ApiOffshoreRedemptionsTransactionIdPatchRequest?));
        /// <summary>
        /// Create offshore subscription order
        /// </summary>
        /// <remarks>
        /// Create new offshore subscription order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreSubscriptionsPostRequest">Example request body for creating offshore subscription (optional)</param>
        /// <returns>ApiCrossAmcSwitchingPost200Response</returns>
        ApiCrossAmcSwitchingPost200Response ApiOffshoreSubscriptionsPost(ApiOffshoreSubscriptionsPostRequest? apiOffshoreSubscriptionsPostRequest = default(ApiOffshoreSubscriptionsPostRequest?));

        /// <summary>
        /// Create offshore subscription order
        /// </summary>
        /// <remarks>
        /// Create new offshore subscription order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreSubscriptionsPostRequest">Example request body for creating offshore subscription (optional)</param>
        /// <returns>ApiResponse of ApiCrossAmcSwitchingPost200Response</returns>
        ApiResponse<ApiCrossAmcSwitchingPost200Response> ApiOffshoreSubscriptionsPostWithHttpInfo(ApiOffshoreSubscriptionsPostRequest? apiOffshoreSubscriptionsPostRequest = default(ApiOffshoreSubscriptionsPostRequest?));
        /// <summary>
        /// Approve offshore subscription order
        /// </summary>
        /// <remarks>
        /// Approve offshore subscription order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiOffshoreRedemptionsTransactionIdPatchRequest">Example request body for approve api offshore subscription (optional)</param>
        /// <returns></returns>
        void ApiOffshoreSubscriptionsTransactionIdPatch(string transactionId, ApiOffshoreRedemptionsTransactionIdPatchRequest? apiOffshoreRedemptionsTransactionIdPatchRequest = default(ApiOffshoreRedemptionsTransactionIdPatchRequest?));

        /// <summary>
        /// Approve offshore subscription order
        /// </summary>
        /// <remarks>
        /// Approve offshore subscription order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiOffshoreRedemptionsTransactionIdPatchRequest">Example request body for approve api offshore subscription (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiOffshoreSubscriptionsTransactionIdPatchWithHttpInfo(string transactionId, ApiOffshoreRedemptionsTransactionIdPatchRequest? apiOffshoreRedemptionsTransactionIdPatchRequest = default(ApiOffshoreRedemptionsTransactionIdPatchRequest?));
        /// <summary>
        /// Create Offshore Switching
        /// </summary>
        /// <remarks>
        /// Create new offshore switching order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreSwitchingsPostRequest">Example request body for creating offshore switching (optional)</param>
        /// <returns>ApiCrossAmcSwitchingPost200Response</returns>
        ApiCrossAmcSwitchingPost200Response ApiOffshoreSwitchingsPost(ApiOffshoreSwitchingsPostRequest? apiOffshoreSwitchingsPostRequest = default(ApiOffshoreSwitchingsPostRequest?));

        /// <summary>
        /// Create Offshore Switching
        /// </summary>
        /// <remarks>
        /// Create new offshore switching order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreSwitchingsPostRequest">Example request body for creating offshore switching (optional)</param>
        /// <returns>ApiResponse of ApiCrossAmcSwitchingPost200Response</returns>
        ApiResponse<ApiCrossAmcSwitchingPost200Response> ApiOffshoreSwitchingsPostWithHttpInfo(ApiOffshoreSwitchingsPostRequest? apiOffshoreSwitchingsPostRequest = default(ApiOffshoreSwitchingsPostRequest?));
        /// <summary>
        /// Create redemptions order
        /// </summary>
        /// <remarks>
        /// Create new redemption order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiRedemptionsPostRequest">Example request body for creating redemption (optional)</param>
        /// <returns>ApiOffshoreRedemptionsPost200Response</returns>
        ApiOffshoreRedemptionsPost200Response ApiRedemptionsPost(string xAuthToken, ApiRedemptionsPostRequest? apiRedemptionsPostRequest = default(ApiRedemptionsPostRequest?));

        /// <summary>
        /// Create redemptions order
        /// </summary>
        /// <remarks>
        /// Create new redemption order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiRedemptionsPostRequest">Example request body for creating redemption (optional)</param>
        /// <returns>ApiResponse of ApiOffshoreRedemptionsPost200Response</returns>
        ApiResponse<ApiOffshoreRedemptionsPost200Response> ApiRedemptionsPostWithHttpInfo(string xAuthToken, ApiRedemptionsPostRequest? apiRedemptionsPostRequest = default(ApiRedemptionsPostRequest?));
        /// <summary>
        /// Cancel redemption order
        /// </summary>
        /// <remarks>
        /// Cancel redemption order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api redemption (optional)</param>
        /// <returns>ApiSubscriptionsTransactionIdDelete200Response</returns>
        ApiSubscriptionsTransactionIdDelete200Response ApiRedemptionsTransactionIdDelete(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?));

        /// <summary>
        /// Cancel redemption order
        /// </summary>
        /// <remarks>
        /// Cancel redemption order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api redemption (optional)</param>
        /// <returns>ApiResponse of ApiSubscriptionsTransactionIdDelete200Response</returns>
        ApiResponse<ApiSubscriptionsTransactionIdDelete200Response> ApiRedemptionsTransactionIdDeleteWithHttpInfo(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?));
        /// <summary>
        /// Deregister for notification callback
        /// </summary>
        /// <remarks>
        /// Deregister for notification callback
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiSaNotificationDeregisterPostRequest">Example of a request body for a deregister for notification callback. (optional)</param>
        /// <returns></returns>
        void ApiSaNotificationDeregisterPost(ApiSaNotificationDeregisterPostRequest? apiSaNotificationDeregisterPostRequest = default(ApiSaNotificationDeregisterPostRequest?));

        /// <summary>
        /// Deregister for notification callback
        /// </summary>
        /// <remarks>
        /// Deregister for notification callback
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiSaNotificationDeregisterPostRequest">Example of a request body for a deregister for notification callback. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSaNotificationDeregisterPostWithHttpInfo(ApiSaNotificationDeregisterPostRequest? apiSaNotificationDeregisterPostRequest = default(ApiSaNotificationDeregisterPostRequest?));
        /// <summary>
        /// Register for notification callback
        /// </summary>
        /// <remarks>
        /// Register URL and token key for notification callback (all configuration will expire by 02:50 AM by FundConnext)
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiSaNotificationRegisterPostRequest">Example of a request body for a register for notification callback. (optional)</param>
        /// <returns></returns>
        void ApiSaNotificationRegisterPost(ApiSaNotificationRegisterPostRequest? apiSaNotificationRegisterPostRequest = default(ApiSaNotificationRegisterPostRequest?));

        /// <summary>
        /// Register for notification callback
        /// </summary>
        /// <remarks>
        /// Register URL and token key for notification callback (all configuration will expire by 02:50 AM by FundConnext)
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiSaNotificationRegisterPostRequest">Example of a request body for a register for notification callback. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSaNotificationRegisterPostWithHttpInfo(ApiSaNotificationRegisterPostRequest? apiSaNotificationRegisterPostRequest = default(ApiSaNotificationRegisterPostRequest?));
        /// <summary>
        /// SA upload file investment consultant
        /// </summary>
        /// <remarks>
        /// The file in zip format. 
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns></returns>
        void ApiSaUploadInvestmentConsultantPost(FileParameter? file = default(FileParameter?));

        /// <summary>
        /// SA upload file investment consultant
        /// </summary>
        /// <remarks>
        /// The file in zip format. 
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiSaUploadInvestmentConsultantPostWithHttpInfo(FileParameter? file = default(FileParameter?));
        /// <summary>
        /// Failed Recurring Order Inquiry
        /// </summary>
        /// <remarks>
        /// * Remark:&lt;br&gt;1. API must have at least one params. (accountId or effectiveDate or recurringOrderId)&lt;br&gt;2. If no have effectiveDate param, the result of failed recurring order cannot be retrieved back more than 1 year
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account No (optional)</param>
        /// <param name="effectiveDate">Format: YYYYMMDD (optional)</param>
        /// <param name="recurringOrderId">Recurring Transaction ID in FundConnex (optional)</param>
        /// <returns>ApiSubscriptionsRecurringFailOrderGet200Response</returns>
        ApiSubscriptionsRecurringFailOrderGet200Response ApiSubscriptionsRecurringFailOrderGet(string? accountId = default(string?), string? effectiveDate = default(string?), string? recurringOrderId = default(string?));

        /// <summary>
        /// Failed Recurring Order Inquiry
        /// </summary>
        /// <remarks>
        /// * Remark:&lt;br&gt;1. API must have at least one params. (accountId or effectiveDate or recurringOrderId)&lt;br&gt;2. If no have effectiveDate param, the result of failed recurring order cannot be retrieved back more than 1 year
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account No (optional)</param>
        /// <param name="effectiveDate">Format: YYYYMMDD (optional)</param>
        /// <param name="recurringOrderId">Recurring Transaction ID in FundConnex (optional)</param>
        /// <returns>ApiResponse of ApiSubscriptionsRecurringFailOrderGet200Response</returns>
        ApiResponse<ApiSubscriptionsRecurringFailOrderGet200Response> ApiSubscriptionsRecurringFailOrderGetWithHttpInfo(string? accountId = default(string?), string? effectiveDate = default(string?), string? recurringOrderId = default(string?));
        /// <summary>
        /// Cancel subscription order
        /// </summary>
        /// <remarks>
        /// Cancel subscription order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api subscription (optional)</param>
        /// <returns>ApiSubscriptionsTransactionIdDelete200Response</returns>
        ApiSubscriptionsTransactionIdDelete200Response ApiSubscriptionsTransactionIdDelete(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?));

        /// <summary>
        /// Cancel subscription order
        /// </summary>
        /// <remarks>
        /// Cancel subscription order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api subscription (optional)</param>
        /// <returns>ApiResponse of ApiSubscriptionsTransactionIdDelete200Response</returns>
        ApiResponse<ApiSubscriptionsTransactionIdDelete200Response> ApiSubscriptionsTransactionIdDeleteWithHttpInfo(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?));
        /// <summary>
        /// Create subscription order version 2
        /// </summary>
        /// <remarks>
        /// Create new subscription order version 2
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiSubscriptionsV2PostRequest">Example request body for creating subscription order version 2 (optional)</param>
        /// <returns>ApiSubscriptionsV2Post200Response</returns>
        ApiSubscriptionsV2Post200Response ApiSubscriptionsV2Post(string xAuthToken, ApiSubscriptionsV2PostRequest? apiSubscriptionsV2PostRequest = default(ApiSubscriptionsV2PostRequest?));

        /// <summary>
        /// Create subscription order version 2
        /// </summary>
        /// <remarks>
        /// Create new subscription order version 2
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiSubscriptionsV2PostRequest">Example request body for creating subscription order version 2 (optional)</param>
        /// <returns>ApiResponse of ApiSubscriptionsV2Post200Response</returns>
        ApiResponse<ApiSubscriptionsV2Post200Response> ApiSubscriptionsV2PostWithHttpInfo(string xAuthToken, ApiSubscriptionsV2PostRequest? apiSubscriptionsV2PostRequest = default(ApiSubscriptionsV2PostRequest?));
        /// <summary>
        /// Create switchings order
        /// </summary>
        /// <remarks>
        /// Create new switching order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiSwitchingsPostRequest">Example request body for creating switch (optional)</param>
        /// <returns>ApiCrossAmcSwitchingPost200Response</returns>
        ApiCrossAmcSwitchingPost200Response ApiSwitchingsPost(string xAuthToken, ApiSwitchingsPostRequest? apiSwitchingsPostRequest = default(ApiSwitchingsPostRequest?));

        /// <summary>
        /// Create switchings order
        /// </summary>
        /// <remarks>
        /// Create new switching order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiSwitchingsPostRequest">Example request body for creating switch (optional)</param>
        /// <returns>ApiResponse of ApiCrossAmcSwitchingPost200Response</returns>
        ApiResponse<ApiCrossAmcSwitchingPost200Response> ApiSwitchingsPostWithHttpInfo(string xAuthToken, ApiSwitchingsPostRequest? apiSwitchingsPostRequest = default(ApiSwitchingsPostRequest?));
        /// <summary>
        /// Cancel switching order
        /// </summary>
        /// <remarks>
        /// Cancel switching order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api switching order (optional)</param>
        /// <returns>ApiSubscriptionsTransactionIdDelete200Response</returns>
        ApiSubscriptionsTransactionIdDelete200Response ApiSwitchingsTransactionIdDelete(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?));

        /// <summary>
        /// Cancel switching order
        /// </summary>
        /// <remarks>
        /// Cancel switching order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api switching order (optional)</param>
        /// <returns>ApiResponse of ApiSubscriptionsTransactionIdDelete200Response</returns>
        ApiResponse<ApiSubscriptionsTransactionIdDelete200Response> ApiSwitchingsTransactionIdDeleteWithHttpInfo(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?));
        /// <summary>
        /// Validate Point Code
        /// </summary>
        /// <remarks>
        /// Validate Point Code
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiValidatePointCodePostRequest">Example request body for validate point code (optional)</param>
        /// <returns>ApiValidatePointCodePost200Response</returns>
        ApiValidatePointCodePost200Response ApiValidatePointCodePost(ApiValidatePointCodePostRequest? apiValidatePointCodePostRequest = default(ApiValidatePointCodePostRequest?));

        /// <summary>
        /// Validate Point Code
        /// </summary>
        /// <remarks>
        /// Validate Point Code
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiValidatePointCodePostRequest">Example request body for validate point code (optional)</param>
        /// <returns>ApiResponse of ApiValidatePointCodePost200Response</returns>
        ApiResponse<ApiValidatePointCodePost200Response> ApiValidatePointCodePostWithHttpInfo(ApiValidatePointCodePostRequest? apiValidatePointCodePostRequest = default(ApiValidatePointCodePostRequest?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Mock server healthcheck
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object RootGet();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Mock server healthcheck
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RootGetWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFundConnextApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List unit holder balance by account
        /// </summary>
        /// <remarks>
        /// API Account Balances Version 1
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountNo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiAccountBalancesGet200Response</returns>
        System.Threading.Tasks.Task<ApiAccountBalancesGet200Response> ApiAccountBalancesGetAsync(string xAuthToken, string accountNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List unit holder balance by account
        /// </summary>
        /// <remarks>
        /// API Account Balances Version 1
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountNo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiAccountBalancesGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiAccountBalancesGet200Response>> ApiAccountBalancesGetWithHttpInfoAsync(string xAuthToken, string accountNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Order Inquiry by Account No (This version will be deprecated in Q4/2023.) 
        /// </summary>
        /// <remarks>
        /// Order Inquiry by Account No This version will be deprecated in Q4/2023.)
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNo"></param>
        /// <param name="begEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="endEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiAccountFundOrdersGet200Response</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiAccountFundOrdersGet200Response> ApiAccountFundOrdersGetAsync(string accountNo, string begEffectiveDate, string endEffectiveDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Order Inquiry by Account No (This version will be deprecated in Q4/2023.) 
        /// </summary>
        /// <remarks>
        /// Order Inquiry by Account No This version will be deprecated in Q4/2023.)
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNo"></param>
        /// <param name="begEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="endEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiAccountFundOrdersGet200Response)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<ApiAccountFundOrdersGet200Response>> ApiAccountFundOrdersGetWithHttpInfoAsync(string accountNo, string begEffectiveDate, string endEffectiveDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Order Inquiry by Account No Version 2
        /// </summary>
        /// <remarks>
        /// Order Inquiry by Account No Version 2
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountNo"></param>
        /// <param name="begEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="endEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiAccountFundOrdersV2Get200Response</returns>
        System.Threading.Tasks.Task<ApiAccountFundOrdersV2Get200Response> ApiAccountFundOrdersV2GetAsync(string xAuthToken, string accountNo, string begEffectiveDate, string endEffectiveDate, string? status = default(string?), string? page = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Order Inquiry by Account No Version 2
        /// </summary>
        /// <remarks>
        /// Order Inquiry by Account No Version 2
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountNo"></param>
        /// <param name="begEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="endEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiAccountFundOrdersV2Get200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiAccountFundOrdersV2Get200Response>> ApiAccountFundOrdersV2GetWithHttpInfoAsync(string xAuthToken, string accountNo, string begEffectiveDate, string endEffectiveDate, string? status = default(string?), string? page = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Authenticate with FundConnext
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRequest">Authenticate Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticationSuccessResponse</returns>
        System.Threading.Tasks.Task<AuthenticationSuccessResponse> ApiAuthPostAsync(AuthenticationRequest authenticationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Authenticate with FundConnext
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRequest">Authenticate Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticationSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthenticationSuccessResponse>> ApiAuthPostWithHttpInfoAsync(AuthenticationRequest authenticationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create switching cross amc
        /// </summary>
        /// <remarks>
        /// Create switching cross amc
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCrossAmcSwitchingPostRequest">Example request body for Create switching cross amc (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiCrossAmcSwitchingPost200Response</returns>
        System.Threading.Tasks.Task<ApiCrossAmcSwitchingPost200Response> ApiCrossAmcSwitchingPostAsync(ApiCrossAmcSwitchingPostRequest? apiCrossAmcSwitchingPostRequest = default(ApiCrossAmcSwitchingPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create switching cross amc
        /// </summary>
        /// <remarks>
        /// Create switching cross amc
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCrossAmcSwitchingPostRequest">Example request body for Create switching cross amc (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiCrossAmcSwitchingPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiCrossAmcSwitchingPost200Response>> ApiCrossAmcSwitchingPostWithHttpInfoAsync(ApiCrossAmcSwitchingPostRequest? apiCrossAmcSwitchingPostRequest = default(ApiCrossAmcSwitchingPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel cross amc switching order
        /// </summary>
        /// <remarks>
        /// Cancel cross amc switching order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api cross amc switching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiSubscriptionsTransactionIdDelete200Response</returns>
        System.Threading.Tasks.Task<ApiSubscriptionsTransactionIdDelete200Response> ApiCrossAmcSwitchingTransactionIdDeleteAsync(string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel cross amc switching order
        /// </summary>
        /// <remarks>
        /// Cancel cross amc switching order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api cross amc switching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiSubscriptionsTransactionIdDelete200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSubscriptionsTransactionIdDelete200Response>> ApiCrossAmcSwitchingTransactionIdDeleteWithHttpInfoAsync(string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Approve cross amc switching order
        /// </summary>
        /// <remarks>
        /// Approve cross amc switching order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiCrossAmcSwitchingTransactionIdPatchRequest">Example request body for api approve cross amc switching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiCrossAmcSwitchingTransactionIdPatch200Response</returns>
        System.Threading.Tasks.Task<ApiCrossAmcSwitchingTransactionIdPatch200Response> ApiCrossAmcSwitchingTransactionIdPatchAsync(string transactionId, ApiCrossAmcSwitchingTransactionIdPatchRequest? apiCrossAmcSwitchingTransactionIdPatchRequest = default(ApiCrossAmcSwitchingTransactionIdPatchRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Approve cross amc switching order
        /// </summary>
        /// <remarks>
        /// Approve cross amc switching order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiCrossAmcSwitchingTransactionIdPatchRequest">Example request body for api approve cross amc switching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiCrossAmcSwitchingTransactionIdPatch200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiCrossAmcSwitchingTransactionIdPatch200Response>> ApiCrossAmcSwitchingTransactionIdPatchWithHttpInfoAsync(string transactionId, ApiCrossAmcSwitchingTransactionIdPatchRequest? apiCrossAmcSwitchingTransactionIdPatchRequest = default(ApiCrossAmcSwitchingTransactionIdPatchRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Find Customer Profile By Account
        /// </summary>
        /// <remarks>
        /// Find Customer Profile By Account&lt;br/&gt;This content will be in the same JSON format as in CUSTOMERPROFILE.zip (in yyyyMMdd_SAcode_INDIVIDUAL.json). The example response below is in V5 format. (Please refer to IndividualInvestorV5Response)&lt;br/&gt;Please contact TSD if you want to change version of yyyyMMdd_SAcode_INDIVIDUAL.json in CUSTOMERPROFILE.zip&lt;br&gt; ตั้งแต่วันที่ 09/03/2024 มีการเพิ่มข้อมูลที่เกี่ยวข้องกับ CRS
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountId">Find customer profile by account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndividualInvestorV5Response</returns>
        System.Threading.Tasks.Task<IndividualInvestorV5Response> ApiCustomerAccountGetAsync(string xAuthToken, Object? accountId = default(Object?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Find Customer Profile By Account
        /// </summary>
        /// <remarks>
        /// Find Customer Profile By Account&lt;br/&gt;This content will be in the same JSON format as in CUSTOMERPROFILE.zip (in yyyyMMdd_SAcode_INDIVIDUAL.json). The example response below is in V5 format. (Please refer to IndividualInvestorV5Response)&lt;br/&gt;Please contact TSD if you want to change version of yyyyMMdd_SAcode_INDIVIDUAL.json in CUSTOMERPROFILE.zip&lt;br&gt; ตั้งแต่วันที่ 09/03/2024 มีการเพิ่มข้อมูลที่เกี่ยวข้องกับ CRS
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountId">Find customer profile by account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndividualInvestorV5Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<IndividualInvestorV5Response>> ApiCustomerAccountGetWithHttpInfoAsync(string xAuthToken, Object? accountId = default(Object?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload Individual Account File
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType"></param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="identificationCardType"> (optional)</param>
        /// <param name="passportCountry"> (optional)</param>
        /// <param name="cardNumber"> (optional)</param>
        /// <param name="approved"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiCustomerIndividualAccountFileTypeUploadPostAsync(string fileType, string? xAuthToken = default(string?), FileParameter? file = default(FileParameter?), string? accountId = default(string?), string? identificationCardType = default(string?), string? passportCountry = default(string?), string? cardNumber = default(string?), bool? approved = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload Individual Account File
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType"></param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="identificationCardType"> (optional)</param>
        /// <param name="passportCountry"> (optional)</param>
        /// <param name="cardNumber"> (optional)</param>
        /// <param name="approved"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiCustomerIndividualAccountFileTypeUploadPostWithHttpInfoAsync(string fileType, string? xAuthToken = default(string?), FileParameter? file = default(FileParameter?), string? accountId = default(string?), string? identificationCardType = default(string?), string? passportCountry = default(string?), string? cardNumber = default(string?), bool? approved = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Individual Account v4
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAccountCreateRequest">Create Individual one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiCustomerIndividualAccountV4PostAsync(CustomerAccountCreateRequest customerAccountCreateRequest, string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Individual Account v4
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAccountCreateRequest">Create Individual one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiCustomerIndividualAccountV4PostWithHttpInfoAsync(CustomerAccountCreateRequest customerAccountCreateRequest, string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Individual Account v4
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAccountUpdateRequest">Update Individual one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiCustomerIndividualAccountV4PutAsync(CustomerAccountUpdateRequest customerAccountUpdateRequest, string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Individual Account v4
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAccountUpdateRequest">Update Individual one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiCustomerIndividualAccountV4PutWithHttpInfoAsync(CustomerAccountUpdateRequest customerAccountUpdateRequest, string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// upload customer document
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType"></param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="identificationCardType"> (optional)</param>
        /// <param name="passportCountry"> (optional)</param>
        /// <param name="cardNumber"> (optional)</param>
        /// <param name="approved"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiCustomerIndividualFileTypeUploadPostAsync(string fileType, string? xAuthToken = default(string?), FileParameter? file = default(FileParameter?), string? identificationCardType = default(string?), string? passportCountry = default(string?), string? cardNumber = default(string?), bool? approved = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// upload customer document
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType"></param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="identificationCardType"> (optional)</param>
        /// <param name="passportCountry"> (optional)</param>
        /// <param name="cardNumber"> (optional)</param>
        /// <param name="approved"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiCustomerIndividualFileTypeUploadPostWithHttpInfoAsync(string fileType, string? xAuthToken = default(string?), FileParameter? file = default(FileParameter?), string? identificationCardType = default(string?), string? passportCountry = default(string?), string? cardNumber = default(string?), bool? approved = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Partial Individual Customer Profile
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiCustomerIndividualPatchAsync(string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Partial Individual Customer Profile
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiCustomerIndividualPatchWithHttpInfoAsync(string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Individual Customer Profile
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileCreateRequest">Create Individual Customer Profile request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiCustomerIndividualV4PostAsync(CustomerProfileCreateRequest customerProfileCreateRequest, string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create Individual Customer Profile
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileCreateRequest">Create Individual Customer Profile request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiCustomerIndividualV4PostWithHttpInfoAsync(CustomerProfileCreateRequest customerProfileCreateRequest, string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Individual Customer Profile
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileUpdateRequest">Update Individual Customer Profile request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiCustomerIndividualV4PutAsync(CustomerProfileUpdateRequest customerProfileUpdateRequest, string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Individual Customer Profile
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileUpdateRequest">Update Individual Customer Profile request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiCustomerIndividualV4PutWithHttpInfoAsync(CustomerProfileUpdateRequest customerProfileUpdateRequest, string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Individual Customer Profile
        /// </summary>
        /// <remarks>
        /// Create new individual customer v5
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV5">Example request body for creating individual customer profile (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiCustomerIndividualV5PostAsync(string? xAuthToken = default(string?), CustomerAccountCreateRequestV5? customerAccountCreateRequestV5 = default(CustomerAccountCreateRequestV5?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Individual Customer Profile
        /// </summary>
        /// <remarks>
        /// Create new individual customer v5
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV5">Example request body for creating individual customer profile (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiCustomerIndividualV5PostWithHttpInfoAsync(string? xAuthToken = default(string?), CustomerAccountCreateRequestV5? customerAccountCreateRequestV5 = default(CustomerAccountCreateRequestV5?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Individual Customer Profile
        /// </summary>
        /// <remarks>
        /// Update individual customer
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV5">Example request body for updating individual customer profile (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiCustomerIndividualV5PutAsync(string? xAuthToken = default(string?), CustomerAccountCreateRequestV5? customerAccountCreateRequestV5 = default(CustomerAccountCreateRequestV5?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Individual Customer Profile
        /// </summary>
        /// <remarks>
        /// Update individual customer
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV5">Example request body for updating individual customer profile (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiCustomerIndividualV5PutWithHttpInfoAsync(string? xAuthToken = default(string?), CustomerAccountCreateRequestV5? customerAccountCreateRequestV5 = default(CustomerAccountCreateRequestV5?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Individual Customer Profile
        /// </summary>
        /// <remarks>
        /// Create new individual customer v6
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV6">Example request body for creating individual customer profile (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiCustomerIndividualV6PostAsync(string? xAuthToken = default(string?), CustomerAccountCreateRequestV6? customerAccountCreateRequestV6 = default(CustomerAccountCreateRequestV6?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Individual Customer Profile
        /// </summary>
        /// <remarks>
        /// Create new individual customer v6
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV6">Example request body for creating individual customer profile (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiCustomerIndividualV6PostWithHttpInfoAsync(string? xAuthToken = default(string?), CustomerAccountCreateRequestV6? customerAccountCreateRequestV6 = default(CustomerAccountCreateRequestV6?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Individual Customer Profile
        /// </summary>
        /// <remarks>
        /// Update individual customer
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV6">Example request body for updating individual customer profile (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiCustomerIndividualV6PutAsync(string? xAuthToken = default(string?), CustomerAccountCreateRequestV6? customerAccountCreateRequestV6 = default(CustomerAccountCreateRequestV6?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Individual Customer Profile
        /// </summary>
        /// <remarks>
        /// Update individual customer
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV6">Example request body for updating individual customer profile (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiCustomerIndividualV6PutWithHttpInfoAsync(string? xAuthToken = default(string?), CustomerAccountCreateRequestV6? customerAccountCreateRequestV6 = default(CustomerAccountCreateRequestV6?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Juristic Account v4
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerJuristicAccountUpdateRequest">Update Juristic one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiCustomerJuristicAccountV4PutAsync(CustomerJuristicAccountUpdateRequest customerJuristicAccountUpdateRequest, string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update Juristic Account v4
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerJuristicAccountUpdateRequest">Update Juristic one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiCustomerJuristicAccountV4PutWithHttpInfoAsync(CustomerJuristicAccountUpdateRequest customerJuristicAccountUpdateRequest, string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Juristic Customer Profile
        /// </summary>
        /// <remarks>
        /// Retrieve Juristic Customer Profile and Account (V5)
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="juristicNumber">เลขที่ใบสำคัญการจดทะเบียน เช่น เลขทะเบียนการค้า เป็นต้น (ต้อง unique ภายใต้ SA) (optional)</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JuristicInvestorV5Response</returns>
        System.Threading.Tasks.Task<JuristicInvestorV5Response> ApiCustomerJuristicInvestorProfileV5GetAsync(string? juristicNumber = default(string?), string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Juristic Customer Profile
        /// </summary>
        /// <remarks>
        /// Retrieve Juristic Customer Profile and Account (V5)
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="juristicNumber">เลขที่ใบสำคัญการจดทะเบียน เช่น เลขทะเบียนการค้า เป็นต้น (ต้อง unique ภายใต้ SA) (optional)</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JuristicInvestorV5Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<JuristicInvestorV5Response>> ApiCustomerJuristicInvestorProfileV5GetWithHttpInfoAsync(string? juristicNumber = default(string?), string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download files
        /// </summary>
        /// <remarks>
        /// Download file by fileType and businessDate
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessDate">business date (YYYYMMDD)</param>
        /// <param name="fileType">**Master:** PostalCode.zip, BankBranch.zip, AMCCode.zip, SACode.zip, AssetAllocation.zip, TopHolding.zip, SecFundFee.zip&lt;/br&gt;&lt;/br&gt;**AMC:** PaidTransactions.zip, NewAccount.zip, Attachment.zip, AmendmentComparison.zip, EAmendmentComparison.zip, ReconcileMonthlyFee.zip&lt;/br&gt;&lt;/br&gt;**SA Normal:**   * FundMapping.zip  * FundProfile.zip  * FundHoliday.zip  * SwitchingMatrix.zip  * TradeCalendar.zip  * Fee.zip  * FundPerformance.zip  * AccountProfile.zip  * UnitholderMapping.zip  * BankAccountUnitholder.zip  * CustomerProfile.zip  * Nav.zip  * UnitholderBalance.zip  * AllottedTransactions.zip  * LtfBalance.zip  * DividendNews.zip  * DividendTransactions.zip  * ConfirmationNote.zip  * ConfirmationNoteTxt.zip  * MonthlyStatement.zip  * MonthlyStatementTxt.zip  * WithholdingTax.zip  * WithholdingTaxTxt.zip  * SuspendUnitholder.zip  * Pnd2.zip  * Pnd2A.zip  * Pnd53.zip  * FinNetBankMapping.zip  * UnitholderBalanceOffshore.zip  * AllottedTransactionsOffshore.zip  * SidePocket.zip  **SA Passthrough:**   * FundMapping.zip  * FundProfile.zip  * FundHoliday.zip  * SwitchingMatrix.zip  * TradeCalendar.zip  * Fee.zip  * FundPerformance.zip  * Nav.zip  * AllottedTransactions.zip  * UnitholderBalance.zip  * LtfBalance.zip  * DividendNews.zip  * DividendTransactions.zip  * SuspendUnitholder.zip  * AssignUnitholderId.zip  * SidePocket.zip   **Custodian:**   * AllottedTransactions.zip  * OrderTransactions.zip  * Nav.zip  * FundMapping.zip  * DividendTransactions.zip  * UnitholderBalance.zip  *  SidePocket.zip</param>
        /// <param name="part">Only fileType &#x3D; Attachment (optional)</param>
        /// <param name="varVersion">**FileType &#x3D; PaidTransactions** &lt;ul&gt;&lt;li&gt;1 &#x3D; batch round 11:45 am&lt;/li&gt;&lt;li&gt;2 &#x3D; batch round 12:15 pm&lt;/li&gt;&lt;li&gt;3 &#x3D; batch round 12:45 pm&lt;/li&gt;&lt;li&gt;4 &#x3D; batch round 1:15 pm&lt;/li&gt;&lt;li&gt;5 &#x3D; batch round 1:45 pm&lt;/li&gt;&lt;li&gt;6 &#x3D; batch round 2:15 pm&lt;/li&gt;&lt;li&gt;7 &#x3D; batch round 2:45 pm&lt;/li&gt;&lt;li&gt;8 &#x3D; batch round 3:15 pm&lt;/li&gt;&lt;li&gt;9 &#x3D; batch round 3:45 pm&lt;/li&gt;&lt;/ul&gt; &lt;/br&gt; **FileType &#x3D; OrderTransactions** &lt;ul&gt;&lt;li&gt;1 &#x3D; batch round 11:42 am&lt;/li&gt;&lt;li&gt;2 &#x3D; batch round 12:12 pm&lt;/li&gt;&lt;li&gt;3 &#x3D; batch round 12:42 pm&lt;/li&gt;&lt;li&gt;4 &#x3D; batch round 1:12 pm&lt;/li&gt;&lt;li&gt;5 &#x3D; batch round 1:42 pm&lt;/li&gt;&lt;li&gt;6 &#x3D; batch round 2:12 pm&lt;/li&gt;&lt;li&gt;7 &#x3D; batch round 2:42 pm&lt;/li&gt;&lt;li&gt;8 &#x3D; batch round 3:12 pm&lt;/li&gt;&lt;li&gt;9 &#x3D; batch round 3:42 pm&lt;/li&gt;&lt;li&gt;BCP&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> ApiFilesBusinessDateFileTypeGetAsync(string businessDate, string fileType, int? part = default(int?), ApiFilesBusinessDateFileTypeGetVersionParameter? varVersion = default(ApiFilesBusinessDateFileTypeGetVersionParameter?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download files
        /// </summary>
        /// <remarks>
        /// Download file by fileType and businessDate
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessDate">business date (YYYYMMDD)</param>
        /// <param name="fileType">**Master:** PostalCode.zip, BankBranch.zip, AMCCode.zip, SACode.zip, AssetAllocation.zip, TopHolding.zip, SecFundFee.zip&lt;/br&gt;&lt;/br&gt;**AMC:** PaidTransactions.zip, NewAccount.zip, Attachment.zip, AmendmentComparison.zip, EAmendmentComparison.zip, ReconcileMonthlyFee.zip&lt;/br&gt;&lt;/br&gt;**SA Normal:**   * FundMapping.zip  * FundProfile.zip  * FundHoliday.zip  * SwitchingMatrix.zip  * TradeCalendar.zip  * Fee.zip  * FundPerformance.zip  * AccountProfile.zip  * UnitholderMapping.zip  * BankAccountUnitholder.zip  * CustomerProfile.zip  * Nav.zip  * UnitholderBalance.zip  * AllottedTransactions.zip  * LtfBalance.zip  * DividendNews.zip  * DividendTransactions.zip  * ConfirmationNote.zip  * ConfirmationNoteTxt.zip  * MonthlyStatement.zip  * MonthlyStatementTxt.zip  * WithholdingTax.zip  * WithholdingTaxTxt.zip  * SuspendUnitholder.zip  * Pnd2.zip  * Pnd2A.zip  * Pnd53.zip  * FinNetBankMapping.zip  * UnitholderBalanceOffshore.zip  * AllottedTransactionsOffshore.zip  * SidePocket.zip  **SA Passthrough:**   * FundMapping.zip  * FundProfile.zip  * FundHoliday.zip  * SwitchingMatrix.zip  * TradeCalendar.zip  * Fee.zip  * FundPerformance.zip  * Nav.zip  * AllottedTransactions.zip  * UnitholderBalance.zip  * LtfBalance.zip  * DividendNews.zip  * DividendTransactions.zip  * SuspendUnitholder.zip  * AssignUnitholderId.zip  * SidePocket.zip   **Custodian:**   * AllottedTransactions.zip  * OrderTransactions.zip  * Nav.zip  * FundMapping.zip  * DividendTransactions.zip  * UnitholderBalance.zip  *  SidePocket.zip</param>
        /// <param name="part">Only fileType &#x3D; Attachment (optional)</param>
        /// <param name="varVersion">**FileType &#x3D; PaidTransactions** &lt;ul&gt;&lt;li&gt;1 &#x3D; batch round 11:45 am&lt;/li&gt;&lt;li&gt;2 &#x3D; batch round 12:15 pm&lt;/li&gt;&lt;li&gt;3 &#x3D; batch round 12:45 pm&lt;/li&gt;&lt;li&gt;4 &#x3D; batch round 1:15 pm&lt;/li&gt;&lt;li&gt;5 &#x3D; batch round 1:45 pm&lt;/li&gt;&lt;li&gt;6 &#x3D; batch round 2:15 pm&lt;/li&gt;&lt;li&gt;7 &#x3D; batch round 2:45 pm&lt;/li&gt;&lt;li&gt;8 &#x3D; batch round 3:15 pm&lt;/li&gt;&lt;li&gt;9 &#x3D; batch round 3:45 pm&lt;/li&gt;&lt;/ul&gt; &lt;/br&gt; **FileType &#x3D; OrderTransactions** &lt;ul&gt;&lt;li&gt;1 &#x3D; batch round 11:42 am&lt;/li&gt;&lt;li&gt;2 &#x3D; batch round 12:12 pm&lt;/li&gt;&lt;li&gt;3 &#x3D; batch round 12:42 pm&lt;/li&gt;&lt;li&gt;4 &#x3D; batch round 1:12 pm&lt;/li&gt;&lt;li&gt;5 &#x3D; batch round 1:42 pm&lt;/li&gt;&lt;li&gt;6 &#x3D; batch round 2:12 pm&lt;/li&gt;&lt;li&gt;7 &#x3D; batch round 2:42 pm&lt;/li&gt;&lt;li&gt;8 &#x3D; batch round 3:12 pm&lt;/li&gt;&lt;li&gt;9 &#x3D; batch round 3:42 pm&lt;/li&gt;&lt;li&gt;BCP&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> ApiFilesBusinessDateFileTypeGetWithHttpInfoAsync(string businessDate, string fileType, int? part = default(int?), ApiFilesBusinessDateFileTypeGetVersionParameter? varVersion = default(ApiFilesBusinessDateFileTypeGetVersionParameter?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// API Get QR by transactionCode
        /// </summary>
        /// <remarks>
        /// API Get QR by transactionCode
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiFundOrdersQrTransactionIdGet200Response</returns>
        System.Threading.Tasks.Task<ApiFundOrdersQrTransactionIdGet200Response> ApiFundOrdersQrTransactionIdGetAsync(string transactionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// API Get QR by transactionCode
        /// </summary>
        /// <remarks>
        /// API Get QR by transactionCode
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiFundOrdersQrTransactionIdGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiFundOrdersQrTransactionIdGet200Response>> ApiFundOrdersQrTransactionIdGetWithHttpInfoAsync(string transactionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get orders by saOrderReferenceNo
        /// </summary>
        /// <remarks>
        /// Get orders by saOrderReferenceNo 
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="saOrderReferenceNo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiAccountFundOrdersGet200Response</returns>
        System.Threading.Tasks.Task<ApiAccountFundOrdersGet200Response> ApiFundOrdersSaOrderReferenceNoGetAsync(string xAuthToken, string saOrderReferenceNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get orders by saOrderReferenceNo
        /// </summary>
        /// <remarks>
        /// Get orders by saOrderReferenceNo 
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="saOrderReferenceNo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiAccountFundOrdersGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiAccountFundOrdersGet200Response>> ApiFundOrdersSaOrderReferenceNoGetWithHttpInfoAsync(string xAuthToken, string saOrderReferenceNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// API Order Inquiry Version 2
        /// </summary>
        /// <remarks>
        /// API Order Inquiry Version 2
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="effectiveDate">Format: YYYYMMDD (Mandatory กรณีไม่ใส่ transactionId และ xwtOrderReferenceNo) (optional)</param>
        /// <param name="transactionId">(Mandatory กรณีไม่ใส่ effectiveDate และ xwtOrderReferenceNo) (optional)</param>
        /// <param name="xwtOrderReferenceNo">(Mandatory กรณีไม่ใส่ effectiveDate และ transactionId) (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="channel"> (optional)</param>
        /// <param name="recurringFlag"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiAccountFundOrdersV2Get200Response</returns>
        System.Threading.Tasks.Task<ApiAccountFundOrdersV2Get200Response> ApiFundOrdersV2GetAsync(string xAuthToken, string? effectiveDate = default(string?), string? transactionId = default(string?), string? xwtOrderReferenceNo = default(string?), string? status = default(string?), string? channel = default(string?), string? recurringFlag = default(string?), string? page = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// API Order Inquiry Version 2
        /// </summary>
        /// <remarks>
        /// API Order Inquiry Version 2
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="effectiveDate">Format: YYYYMMDD (Mandatory กรณีไม่ใส่ transactionId และ xwtOrderReferenceNo) (optional)</param>
        /// <param name="transactionId">(Mandatory กรณีไม่ใส่ effectiveDate และ xwtOrderReferenceNo) (optional)</param>
        /// <param name="xwtOrderReferenceNo">(Mandatory กรณีไม่ใส่ effectiveDate และ transactionId) (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="channel"> (optional)</param>
        /// <param name="recurringFlag"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiAccountFundOrdersV2Get200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiAccountFundOrdersV2Get200Response>> ApiFundOrdersV2GetWithHttpInfoAsync(string xAuthToken, string? effectiveDate = default(string?), string? transactionId = default(string?), string? xwtOrderReferenceNo = default(string?), string? status = default(string?), string? channel = default(string?), string? recurringFlag = default(string?), string? page = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download news file
        /// </summary>
        /// <remarks>
        /// Download news file
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkFileId">Link file ID to get the file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> ApiNewsDownloadLinkFileIdGetAsync(string linkFileId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download news file
        /// </summary>
        /// <remarks>
        /// Download news file
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkFileId">Link file ID to get the file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> ApiNewsDownloadLinkFileIdGetWithHttpInfoAsync(string linkFileId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create offshore subscription order
        /// </summary>
        /// <remarks>
        /// Create new offshore redemption order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreRedemptionsPostRequest">Example request body for creating offshore redemption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiOffshoreRedemptionsPost200Response</returns>
        System.Threading.Tasks.Task<ApiOffshoreRedemptionsPost200Response> ApiOffshoreRedemptionsPostAsync(ApiOffshoreRedemptionsPostRequest? apiOffshoreRedemptionsPostRequest = default(ApiOffshoreRedemptionsPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create offshore subscription order
        /// </summary>
        /// <remarks>
        /// Create new offshore redemption order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreRedemptionsPostRequest">Example request body for creating offshore redemption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiOffshoreRedemptionsPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiOffshoreRedemptionsPost200Response>> ApiOffshoreRedemptionsPostWithHttpInfoAsync(ApiOffshoreRedemptionsPostRequest? apiOffshoreRedemptionsPostRequest = default(ApiOffshoreRedemptionsPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Approve offshore redemption order
        /// </summary>
        /// <remarks>
        /// Approve offshore redemption order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiOffshoreRedemptionsTransactionIdPatchRequest">Example request body for approve api offshore redemption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiOffshoreRedemptionsTransactionIdPatchAsync(string transactionId, ApiOffshoreRedemptionsTransactionIdPatchRequest? apiOffshoreRedemptionsTransactionIdPatchRequest = default(ApiOffshoreRedemptionsTransactionIdPatchRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Approve offshore redemption order
        /// </summary>
        /// <remarks>
        /// Approve offshore redemption order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiOffshoreRedemptionsTransactionIdPatchRequest">Example request body for approve api offshore redemption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiOffshoreRedemptionsTransactionIdPatchWithHttpInfoAsync(string transactionId, ApiOffshoreRedemptionsTransactionIdPatchRequest? apiOffshoreRedemptionsTransactionIdPatchRequest = default(ApiOffshoreRedemptionsTransactionIdPatchRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create offshore subscription order
        /// </summary>
        /// <remarks>
        /// Create new offshore subscription order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreSubscriptionsPostRequest">Example request body for creating offshore subscription (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiCrossAmcSwitchingPost200Response</returns>
        System.Threading.Tasks.Task<ApiCrossAmcSwitchingPost200Response> ApiOffshoreSubscriptionsPostAsync(ApiOffshoreSubscriptionsPostRequest? apiOffshoreSubscriptionsPostRequest = default(ApiOffshoreSubscriptionsPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create offshore subscription order
        /// </summary>
        /// <remarks>
        /// Create new offshore subscription order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreSubscriptionsPostRequest">Example request body for creating offshore subscription (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiCrossAmcSwitchingPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiCrossAmcSwitchingPost200Response>> ApiOffshoreSubscriptionsPostWithHttpInfoAsync(ApiOffshoreSubscriptionsPostRequest? apiOffshoreSubscriptionsPostRequest = default(ApiOffshoreSubscriptionsPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Approve offshore subscription order
        /// </summary>
        /// <remarks>
        /// Approve offshore subscription order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiOffshoreRedemptionsTransactionIdPatchRequest">Example request body for approve api offshore subscription (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiOffshoreSubscriptionsTransactionIdPatchAsync(string transactionId, ApiOffshoreRedemptionsTransactionIdPatchRequest? apiOffshoreRedemptionsTransactionIdPatchRequest = default(ApiOffshoreRedemptionsTransactionIdPatchRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Approve offshore subscription order
        /// </summary>
        /// <remarks>
        /// Approve offshore subscription order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiOffshoreRedemptionsTransactionIdPatchRequest">Example request body for approve api offshore subscription (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiOffshoreSubscriptionsTransactionIdPatchWithHttpInfoAsync(string transactionId, ApiOffshoreRedemptionsTransactionIdPatchRequest? apiOffshoreRedemptionsTransactionIdPatchRequest = default(ApiOffshoreRedemptionsTransactionIdPatchRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Offshore Switching
        /// </summary>
        /// <remarks>
        /// Create new offshore switching order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreSwitchingsPostRequest">Example request body for creating offshore switching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiCrossAmcSwitchingPost200Response</returns>
        System.Threading.Tasks.Task<ApiCrossAmcSwitchingPost200Response> ApiOffshoreSwitchingsPostAsync(ApiOffshoreSwitchingsPostRequest? apiOffshoreSwitchingsPostRequest = default(ApiOffshoreSwitchingsPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Offshore Switching
        /// </summary>
        /// <remarks>
        /// Create new offshore switching order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreSwitchingsPostRequest">Example request body for creating offshore switching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiCrossAmcSwitchingPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiCrossAmcSwitchingPost200Response>> ApiOffshoreSwitchingsPostWithHttpInfoAsync(ApiOffshoreSwitchingsPostRequest? apiOffshoreSwitchingsPostRequest = default(ApiOffshoreSwitchingsPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create redemptions order
        /// </summary>
        /// <remarks>
        /// Create new redemption order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiRedemptionsPostRequest">Example request body for creating redemption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiOffshoreRedemptionsPost200Response</returns>
        System.Threading.Tasks.Task<ApiOffshoreRedemptionsPost200Response> ApiRedemptionsPostAsync(string xAuthToken, ApiRedemptionsPostRequest? apiRedemptionsPostRequest = default(ApiRedemptionsPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create redemptions order
        /// </summary>
        /// <remarks>
        /// Create new redemption order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiRedemptionsPostRequest">Example request body for creating redemption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiOffshoreRedemptionsPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiOffshoreRedemptionsPost200Response>> ApiRedemptionsPostWithHttpInfoAsync(string xAuthToken, ApiRedemptionsPostRequest? apiRedemptionsPostRequest = default(ApiRedemptionsPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel redemption order
        /// </summary>
        /// <remarks>
        /// Cancel redemption order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api redemption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiSubscriptionsTransactionIdDelete200Response</returns>
        System.Threading.Tasks.Task<ApiSubscriptionsTransactionIdDelete200Response> ApiRedemptionsTransactionIdDeleteAsync(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel redemption order
        /// </summary>
        /// <remarks>
        /// Cancel redemption order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api redemption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiSubscriptionsTransactionIdDelete200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSubscriptionsTransactionIdDelete200Response>> ApiRedemptionsTransactionIdDeleteWithHttpInfoAsync(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deregister for notification callback
        /// </summary>
        /// <remarks>
        /// Deregister for notification callback
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiSaNotificationDeregisterPostRequest">Example of a request body for a deregister for notification callback. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSaNotificationDeregisterPostAsync(ApiSaNotificationDeregisterPostRequest? apiSaNotificationDeregisterPostRequest = default(ApiSaNotificationDeregisterPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deregister for notification callback
        /// </summary>
        /// <remarks>
        /// Deregister for notification callback
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiSaNotificationDeregisterPostRequest">Example of a request body for a deregister for notification callback. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSaNotificationDeregisterPostWithHttpInfoAsync(ApiSaNotificationDeregisterPostRequest? apiSaNotificationDeregisterPostRequest = default(ApiSaNotificationDeregisterPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Register for notification callback
        /// </summary>
        /// <remarks>
        /// Register URL and token key for notification callback (all configuration will expire by 02:50 AM by FundConnext)
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiSaNotificationRegisterPostRequest">Example of a request body for a register for notification callback. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSaNotificationRegisterPostAsync(ApiSaNotificationRegisterPostRequest? apiSaNotificationRegisterPostRequest = default(ApiSaNotificationRegisterPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Register for notification callback
        /// </summary>
        /// <remarks>
        /// Register URL and token key for notification callback (all configuration will expire by 02:50 AM by FundConnext)
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiSaNotificationRegisterPostRequest">Example of a request body for a register for notification callback. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSaNotificationRegisterPostWithHttpInfoAsync(ApiSaNotificationRegisterPostRequest? apiSaNotificationRegisterPostRequest = default(ApiSaNotificationRegisterPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// SA upload file investment consultant
        /// </summary>
        /// <remarks>
        /// The file in zip format. 
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiSaUploadInvestmentConsultantPostAsync(FileParameter? file = default(FileParameter?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// SA upload file investment consultant
        /// </summary>
        /// <remarks>
        /// The file in zip format. 
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiSaUploadInvestmentConsultantPostWithHttpInfoAsync(FileParameter? file = default(FileParameter?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Failed Recurring Order Inquiry
        /// </summary>
        /// <remarks>
        /// * Remark:&lt;br&gt;1. API must have at least one params. (accountId or effectiveDate or recurringOrderId)&lt;br&gt;2. If no have effectiveDate param, the result of failed recurring order cannot be retrieved back more than 1 year
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account No (optional)</param>
        /// <param name="effectiveDate">Format: YYYYMMDD (optional)</param>
        /// <param name="recurringOrderId">Recurring Transaction ID in FundConnex (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiSubscriptionsRecurringFailOrderGet200Response</returns>
        System.Threading.Tasks.Task<ApiSubscriptionsRecurringFailOrderGet200Response> ApiSubscriptionsRecurringFailOrderGetAsync(string? accountId = default(string?), string? effectiveDate = default(string?), string? recurringOrderId = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Failed Recurring Order Inquiry
        /// </summary>
        /// <remarks>
        /// * Remark:&lt;br&gt;1. API must have at least one params. (accountId or effectiveDate or recurringOrderId)&lt;br&gt;2. If no have effectiveDate param, the result of failed recurring order cannot be retrieved back more than 1 year
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account No (optional)</param>
        /// <param name="effectiveDate">Format: YYYYMMDD (optional)</param>
        /// <param name="recurringOrderId">Recurring Transaction ID in FundConnex (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiSubscriptionsRecurringFailOrderGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSubscriptionsRecurringFailOrderGet200Response>> ApiSubscriptionsRecurringFailOrderGetWithHttpInfoAsync(string? accountId = default(string?), string? effectiveDate = default(string?), string? recurringOrderId = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel subscription order
        /// </summary>
        /// <remarks>
        /// Cancel subscription order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api subscription (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiSubscriptionsTransactionIdDelete200Response</returns>
        System.Threading.Tasks.Task<ApiSubscriptionsTransactionIdDelete200Response> ApiSubscriptionsTransactionIdDeleteAsync(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel subscription order
        /// </summary>
        /// <remarks>
        /// Cancel subscription order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api subscription (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiSubscriptionsTransactionIdDelete200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSubscriptionsTransactionIdDelete200Response>> ApiSubscriptionsTransactionIdDeleteWithHttpInfoAsync(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create subscription order version 2
        /// </summary>
        /// <remarks>
        /// Create new subscription order version 2
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiSubscriptionsV2PostRequest">Example request body for creating subscription order version 2 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiSubscriptionsV2Post200Response</returns>
        System.Threading.Tasks.Task<ApiSubscriptionsV2Post200Response> ApiSubscriptionsV2PostAsync(string xAuthToken, ApiSubscriptionsV2PostRequest? apiSubscriptionsV2PostRequest = default(ApiSubscriptionsV2PostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create subscription order version 2
        /// </summary>
        /// <remarks>
        /// Create new subscription order version 2
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiSubscriptionsV2PostRequest">Example request body for creating subscription order version 2 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiSubscriptionsV2Post200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSubscriptionsV2Post200Response>> ApiSubscriptionsV2PostWithHttpInfoAsync(string xAuthToken, ApiSubscriptionsV2PostRequest? apiSubscriptionsV2PostRequest = default(ApiSubscriptionsV2PostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create switchings order
        /// </summary>
        /// <remarks>
        /// Create new switching order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiSwitchingsPostRequest">Example request body for creating switch (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiCrossAmcSwitchingPost200Response</returns>
        System.Threading.Tasks.Task<ApiCrossAmcSwitchingPost200Response> ApiSwitchingsPostAsync(string xAuthToken, ApiSwitchingsPostRequest? apiSwitchingsPostRequest = default(ApiSwitchingsPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create switchings order
        /// </summary>
        /// <remarks>
        /// Create new switching order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiSwitchingsPostRequest">Example request body for creating switch (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiCrossAmcSwitchingPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiCrossAmcSwitchingPost200Response>> ApiSwitchingsPostWithHttpInfoAsync(string xAuthToken, ApiSwitchingsPostRequest? apiSwitchingsPostRequest = default(ApiSwitchingsPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel switching order
        /// </summary>
        /// <remarks>
        /// Cancel switching order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api switching order (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiSubscriptionsTransactionIdDelete200Response</returns>
        System.Threading.Tasks.Task<ApiSubscriptionsTransactionIdDelete200Response> ApiSwitchingsTransactionIdDeleteAsync(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel switching order
        /// </summary>
        /// <remarks>
        /// Cancel switching order
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api switching order (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiSubscriptionsTransactionIdDelete200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSubscriptionsTransactionIdDelete200Response>> ApiSwitchingsTransactionIdDeleteWithHttpInfoAsync(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Validate Point Code
        /// </summary>
        /// <remarks>
        /// Validate Point Code
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiValidatePointCodePostRequest">Example request body for validate point code (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiValidatePointCodePost200Response</returns>
        System.Threading.Tasks.Task<ApiValidatePointCodePost200Response> ApiValidatePointCodePostAsync(ApiValidatePointCodePostRequest? apiValidatePointCodePostRequest = default(ApiValidatePointCodePostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validate Point Code
        /// </summary>
        /// <remarks>
        /// Validate Point Code
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiValidatePointCodePostRequest">Example request body for validate point code (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiValidatePointCodePost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiValidatePointCodePost200Response>> ApiValidatePointCodePostWithHttpInfoAsync(ApiValidatePointCodePostRequest? apiValidatePointCodePostRequest = default(ApiValidatePointCodePostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Mock server healthcheck
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RootGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Mock server healthcheck
        /// </remarks>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RootGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFundConnextApi : IFundConnextApiSync, IFundConnextApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FundConnextApi : IDisposable, IFundConnextApi
    {
        private Pi.Financial.Client.FundConnext.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FundConnextApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public FundConnextApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FundConnextApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public FundConnextApi(string basePath)
        {
            this.Configuration = Pi.Financial.Client.FundConnext.Client.Configuration.MergeConfigurations(
                Pi.Financial.Client.FundConnext.Client.GlobalConfiguration.Instance,
                new Pi.Financial.Client.FundConnext.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Pi.Financial.Client.FundConnext.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Pi.Financial.Client.FundConnext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FundConnextApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public FundConnextApi(Pi.Financial.Client.FundConnext.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Pi.Financial.Client.FundConnext.Client.Configuration.MergeConfigurations(
                Pi.Financial.Client.FundConnext.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Pi.Financial.Client.FundConnext.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Pi.Financial.Client.FundConnext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FundConnextApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FundConnextApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FundConnextApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FundConnextApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Pi.Financial.Client.FundConnext.Client.Configuration.MergeConfigurations(
                Pi.Financial.Client.FundConnext.Client.GlobalConfiguration.Instance,
                new Pi.Financial.Client.FundConnext.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Pi.Financial.Client.FundConnext.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Pi.Financial.Client.FundConnext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FundConnextApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FundConnextApi(HttpClient client, Pi.Financial.Client.FundConnext.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Pi.Financial.Client.FundConnext.Client.Configuration.MergeConfigurations(
                Pi.Financial.Client.FundConnext.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Pi.Financial.Client.FundConnext.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Pi.Financial.Client.FundConnext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FundConnextApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public FundConnextApi(Pi.Financial.Client.FundConnext.Client.ISynchronousClient client, Pi.Financial.Client.FundConnext.Client.IAsynchronousClient asyncClient, Pi.Financial.Client.FundConnext.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Pi.Financial.Client.FundConnext.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Pi.Financial.Client.FundConnext.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Pi.Financial.Client.FundConnext.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Pi.Financial.Client.FundConnext.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Pi.Financial.Client.FundConnext.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Pi.Financial.Client.FundConnext.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List unit holder balance by account API Account Balances Version 1
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountNo"></param>
        /// <returns>ApiAccountBalancesGet200Response</returns>
        public ApiAccountBalancesGet200Response ApiAccountBalancesGet(string xAuthToken, string accountNo)
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiAccountBalancesGet200Response> localVarResponse = ApiAccountBalancesGetWithHttpInfo(xAuthToken, accountNo);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List unit holder balance by account API Account Balances Version 1
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountNo"></param>
        /// <returns>ApiResponse of ApiAccountBalancesGet200Response</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiAccountBalancesGet200Response> ApiAccountBalancesGetWithHttpInfo(string xAuthToken, string accountNo)
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiAccountBalancesGet");

            // verify the required parameter 'accountNo' is set
            if (accountNo == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'accountNo' when calling FundConnextApi->ApiAccountBalancesGet");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "accountNo", accountNo));
            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiAccountBalancesGet200Response>("/api/account/balances", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountBalancesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List unit holder balance by account API Account Balances Version 1
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountNo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiAccountBalancesGet200Response</returns>
        public async System.Threading.Tasks.Task<ApiAccountBalancesGet200Response> ApiAccountBalancesGetAsync(string xAuthToken, string accountNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiAccountBalancesGet200Response> localVarResponse = await ApiAccountBalancesGetWithHttpInfoAsync(xAuthToken, accountNo, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List unit holder balance by account API Account Balances Version 1
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountNo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiAccountBalancesGet200Response)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiAccountBalancesGet200Response>> ApiAccountBalancesGetWithHttpInfoAsync(string xAuthToken, string accountNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiAccountBalancesGet");

            // verify the required parameter 'accountNo' is set
            if (accountNo == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'accountNo' when calling FundConnextApi->ApiAccountBalancesGet");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "accountNo", accountNo));
            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiAccountBalancesGet200Response>("/api/account/balances", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountBalancesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Order Inquiry by Account No (This version will be deprecated in Q4/2023.)  Order Inquiry by Account No This version will be deprecated in Q4/2023.)
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNo"></param>
        /// <param name="begEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="endEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <returns>ApiAccountFundOrdersGet200Response</returns>
        [Obsolete]
        public ApiAccountFundOrdersGet200Response ApiAccountFundOrdersGet(string accountNo, string begEffectiveDate, string endEffectiveDate)
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiAccountFundOrdersGet200Response> localVarResponse = ApiAccountFundOrdersGetWithHttpInfo(accountNo, begEffectiveDate, endEffectiveDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Order Inquiry by Account No (This version will be deprecated in Q4/2023.)  Order Inquiry by Account No This version will be deprecated in Q4/2023.)
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNo"></param>
        /// <param name="begEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="endEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <returns>ApiResponse of ApiAccountFundOrdersGet200Response</returns>
        [Obsolete]
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiAccountFundOrdersGet200Response> ApiAccountFundOrdersGetWithHttpInfo(string accountNo, string begEffectiveDate, string endEffectiveDate)
        {
            // verify the required parameter 'accountNo' is set
            if (accountNo == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'accountNo' when calling FundConnextApi->ApiAccountFundOrdersGet");

            // verify the required parameter 'begEffectiveDate' is set
            if (begEffectiveDate == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'begEffectiveDate' when calling FundConnextApi->ApiAccountFundOrdersGet");

            // verify the required parameter 'endEffectiveDate' is set
            if (endEffectiveDate == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'endEffectiveDate' when calling FundConnextApi->ApiAccountFundOrdersGet");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "accountNo", accountNo));
            localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "begEffectiveDate", begEffectiveDate));
            localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "endEffectiveDate", endEffectiveDate));


            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiAccountFundOrdersGet200Response>("/api/account/fundOrders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountFundOrdersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Order Inquiry by Account No (This version will be deprecated in Q4/2023.)  Order Inquiry by Account No This version will be deprecated in Q4/2023.)
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNo"></param>
        /// <param name="begEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="endEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiAccountFundOrdersGet200Response</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<ApiAccountFundOrdersGet200Response> ApiAccountFundOrdersGetAsync(string accountNo, string begEffectiveDate, string endEffectiveDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiAccountFundOrdersGet200Response> localVarResponse = await ApiAccountFundOrdersGetWithHttpInfoAsync(accountNo, begEffectiveDate, endEffectiveDate, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Order Inquiry by Account No (This version will be deprecated in Q4/2023.)  Order Inquiry by Account No This version will be deprecated in Q4/2023.)
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountNo"></param>
        /// <param name="begEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="endEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiAccountFundOrdersGet200Response)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiAccountFundOrdersGet200Response>> ApiAccountFundOrdersGetWithHttpInfoAsync(string accountNo, string begEffectiveDate, string endEffectiveDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountNo' is set
            if (accountNo == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'accountNo' when calling FundConnextApi->ApiAccountFundOrdersGet");

            // verify the required parameter 'begEffectiveDate' is set
            if (begEffectiveDate == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'begEffectiveDate' when calling FundConnextApi->ApiAccountFundOrdersGet");

            // verify the required parameter 'endEffectiveDate' is set
            if (endEffectiveDate == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'endEffectiveDate' when calling FundConnextApi->ApiAccountFundOrdersGet");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "accountNo", accountNo));
            localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "begEffectiveDate", begEffectiveDate));
            localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "endEffectiveDate", endEffectiveDate));


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiAccountFundOrdersGet200Response>("/api/account/fundOrders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountFundOrdersGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Order Inquiry by Account No Version 2 Order Inquiry by Account No Version 2
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountNo"></param>
        /// <param name="begEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="endEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>ApiAccountFundOrdersV2Get200Response</returns>
        public ApiAccountFundOrdersV2Get200Response ApiAccountFundOrdersV2Get(string xAuthToken, string accountNo, string begEffectiveDate, string endEffectiveDate, string? status = default(string?), string? page = default(string?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiAccountFundOrdersV2Get200Response> localVarResponse = ApiAccountFundOrdersV2GetWithHttpInfo(xAuthToken, accountNo, begEffectiveDate, endEffectiveDate, status, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Order Inquiry by Account No Version 2 Order Inquiry by Account No Version 2
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountNo"></param>
        /// <param name="begEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="endEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>ApiResponse of ApiAccountFundOrdersV2Get200Response</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiAccountFundOrdersV2Get200Response> ApiAccountFundOrdersV2GetWithHttpInfo(string xAuthToken, string accountNo, string begEffectiveDate, string endEffectiveDate, string? status = default(string?), string? page = default(string?))
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiAccountFundOrdersV2Get");

            // verify the required parameter 'accountNo' is set
            if (accountNo == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'accountNo' when calling FundConnextApi->ApiAccountFundOrdersV2Get");

            // verify the required parameter 'begEffectiveDate' is set
            if (begEffectiveDate == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'begEffectiveDate' when calling FundConnextApi->ApiAccountFundOrdersV2Get");

            // verify the required parameter 'endEffectiveDate' is set
            if (endEffectiveDate == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'endEffectiveDate' when calling FundConnextApi->ApiAccountFundOrdersV2Get");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "accountNo", accountNo));
            localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "begEffectiveDate", begEffectiveDate));
            localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "endEffectiveDate", endEffectiveDate));
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiAccountFundOrdersV2Get200Response>("/api/account/fundOrders/v2", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountFundOrdersV2Get", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Order Inquiry by Account No Version 2 Order Inquiry by Account No Version 2
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountNo"></param>
        /// <param name="begEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="endEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiAccountFundOrdersV2Get200Response</returns>
        public async System.Threading.Tasks.Task<ApiAccountFundOrdersV2Get200Response> ApiAccountFundOrdersV2GetAsync(string xAuthToken, string accountNo, string begEffectiveDate, string endEffectiveDate, string? status = default(string?), string? page = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiAccountFundOrdersV2Get200Response> localVarResponse = await ApiAccountFundOrdersV2GetWithHttpInfoAsync(xAuthToken, accountNo, begEffectiveDate, endEffectiveDate, status, page, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Order Inquiry by Account No Version 2 Order Inquiry by Account No Version 2
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountNo"></param>
        /// <param name="begEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="endEffectiveDate">Format: YYYYMMDD Example: 20160930</param>
        /// <param name="status"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiAccountFundOrdersV2Get200Response)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiAccountFundOrdersV2Get200Response>> ApiAccountFundOrdersV2GetWithHttpInfoAsync(string xAuthToken, string accountNo, string begEffectiveDate, string endEffectiveDate, string? status = default(string?), string? page = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiAccountFundOrdersV2Get");

            // verify the required parameter 'accountNo' is set
            if (accountNo == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'accountNo' when calling FundConnextApi->ApiAccountFundOrdersV2Get");

            // verify the required parameter 'begEffectiveDate' is set
            if (begEffectiveDate == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'begEffectiveDate' when calling FundConnextApi->ApiAccountFundOrdersV2Get");

            // verify the required parameter 'endEffectiveDate' is set
            if (endEffectiveDate == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'endEffectiveDate' when calling FundConnextApi->ApiAccountFundOrdersV2Get");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "accountNo", accountNo));
            localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "begEffectiveDate", begEffectiveDate));
            localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "endEffectiveDate", endEffectiveDate));
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiAccountFundOrdersV2Get200Response>("/api/account/fundOrders/v2", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAccountFundOrdersV2Get", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Authenticate with FundConnext
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRequest">Authenticate Request Body</param>
        /// <returns>AuthenticationSuccessResponse</returns>
        public AuthenticationSuccessResponse ApiAuthPost(AuthenticationRequest authenticationRequest)
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<AuthenticationSuccessResponse> localVarResponse = ApiAuthPostWithHttpInfo(authenticationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Authenticate with FundConnext
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRequest">Authenticate Request Body</param>
        /// <returns>ApiResponse of AuthenticationSuccessResponse</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<AuthenticationSuccessResponse> ApiAuthPostWithHttpInfo(AuthenticationRequest authenticationRequest)
        {
            // verify the required parameter 'authenticationRequest' is set
            if (authenticationRequest == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'authenticationRequest' when calling FundConnextApi->ApiAuthPost");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = authenticationRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthenticationSuccessResponse>("/api/auth", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAuthPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Authenticate with FundConnext
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRequest">Authenticate Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthenticationSuccessResponse</returns>
        public async System.Threading.Tasks.Task<AuthenticationSuccessResponse> ApiAuthPostAsync(AuthenticationRequest authenticationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<AuthenticationSuccessResponse> localVarResponse = await ApiAuthPostWithHttpInfoAsync(authenticationRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Authenticate with FundConnext
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticationRequest">Authenticate Request Body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthenticationSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<AuthenticationSuccessResponse>> ApiAuthPostWithHttpInfoAsync(AuthenticationRequest authenticationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authenticationRequest' is set
            if (authenticationRequest == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'authenticationRequest' when calling FundConnextApi->ApiAuthPost");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = authenticationRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthenticationSuccessResponse>("/api/auth", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAuthPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create switching cross amc Create switching cross amc
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCrossAmcSwitchingPostRequest">Example request body for Create switching cross amc (optional)</param>
        /// <returns>ApiCrossAmcSwitchingPost200Response</returns>
        public ApiCrossAmcSwitchingPost200Response ApiCrossAmcSwitchingPost(ApiCrossAmcSwitchingPostRequest? apiCrossAmcSwitchingPostRequest = default(ApiCrossAmcSwitchingPostRequest?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiCrossAmcSwitchingPost200Response> localVarResponse = ApiCrossAmcSwitchingPostWithHttpInfo(apiCrossAmcSwitchingPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create switching cross amc Create switching cross amc
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCrossAmcSwitchingPostRequest">Example request body for Create switching cross amc (optional)</param>
        /// <returns>ApiResponse of ApiCrossAmcSwitchingPost200Response</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiCrossAmcSwitchingPost200Response> ApiCrossAmcSwitchingPostWithHttpInfo(ApiCrossAmcSwitchingPostRequest? apiCrossAmcSwitchingPostRequest = default(ApiCrossAmcSwitchingPostRequest?))
        {
            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = apiCrossAmcSwitchingPostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiCrossAmcSwitchingPost200Response>("/api/crossAmcSwitching", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCrossAmcSwitchingPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create switching cross amc Create switching cross amc
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCrossAmcSwitchingPostRequest">Example request body for Create switching cross amc (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiCrossAmcSwitchingPost200Response</returns>
        public async System.Threading.Tasks.Task<ApiCrossAmcSwitchingPost200Response> ApiCrossAmcSwitchingPostAsync(ApiCrossAmcSwitchingPostRequest? apiCrossAmcSwitchingPostRequest = default(ApiCrossAmcSwitchingPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiCrossAmcSwitchingPost200Response> localVarResponse = await ApiCrossAmcSwitchingPostWithHttpInfoAsync(apiCrossAmcSwitchingPostRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create switching cross amc Create switching cross amc
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiCrossAmcSwitchingPostRequest">Example request body for Create switching cross amc (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiCrossAmcSwitchingPost200Response)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiCrossAmcSwitchingPost200Response>> ApiCrossAmcSwitchingPostWithHttpInfoAsync(ApiCrossAmcSwitchingPostRequest? apiCrossAmcSwitchingPostRequest = default(ApiCrossAmcSwitchingPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = apiCrossAmcSwitchingPostRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiCrossAmcSwitchingPost200Response>("/api/crossAmcSwitching", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCrossAmcSwitchingPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel cross amc switching order Cancel cross amc switching order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api cross amc switching (optional)</param>
        /// <returns>ApiSubscriptionsTransactionIdDelete200Response</returns>
        public ApiSubscriptionsTransactionIdDelete200Response ApiCrossAmcSwitchingTransactionIdDelete(string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsTransactionIdDelete200Response> localVarResponse = ApiCrossAmcSwitchingTransactionIdDeleteWithHttpInfo(transactionId, apiSubscriptionsTransactionIdDeleteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel cross amc switching order Cancel cross amc switching order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api cross amc switching (optional)</param>
        /// <returns>ApiResponse of ApiSubscriptionsTransactionIdDelete200Response</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsTransactionIdDelete200Response> ApiCrossAmcSwitchingTransactionIdDeleteWithHttpInfo(string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?))
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'transactionId' when calling FundConnextApi->ApiCrossAmcSwitchingTransactionIdDelete");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("transactionId", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(transactionId)); // path parameter
            localVarRequestOptions.Data = apiSubscriptionsTransactionIdDeleteRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiSubscriptionsTransactionIdDelete200Response>("/api/crossAmcSwitching/{transactionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCrossAmcSwitchingTransactionIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel cross amc switching order Cancel cross amc switching order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api cross amc switching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiSubscriptionsTransactionIdDelete200Response</returns>
        public async System.Threading.Tasks.Task<ApiSubscriptionsTransactionIdDelete200Response> ApiCrossAmcSwitchingTransactionIdDeleteAsync(string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsTransactionIdDelete200Response> localVarResponse = await ApiCrossAmcSwitchingTransactionIdDeleteWithHttpInfoAsync(transactionId, apiSubscriptionsTransactionIdDeleteRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel cross amc switching order Cancel cross amc switching order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api cross amc switching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiSubscriptionsTransactionIdDelete200Response)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsTransactionIdDelete200Response>> ApiCrossAmcSwitchingTransactionIdDeleteWithHttpInfoAsync(string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'transactionId' when calling FundConnextApi->ApiCrossAmcSwitchingTransactionIdDelete");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("transactionId", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(transactionId)); // path parameter
            localVarRequestOptions.Data = apiSubscriptionsTransactionIdDeleteRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiSubscriptionsTransactionIdDelete200Response>("/api/crossAmcSwitching/{transactionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCrossAmcSwitchingTransactionIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Approve cross amc switching order Approve cross amc switching order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiCrossAmcSwitchingTransactionIdPatchRequest">Example request body for api approve cross amc switching (optional)</param>
        /// <returns>ApiCrossAmcSwitchingTransactionIdPatch200Response</returns>
        public ApiCrossAmcSwitchingTransactionIdPatch200Response ApiCrossAmcSwitchingTransactionIdPatch(string transactionId, ApiCrossAmcSwitchingTransactionIdPatchRequest? apiCrossAmcSwitchingTransactionIdPatchRequest = default(ApiCrossAmcSwitchingTransactionIdPatchRequest?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiCrossAmcSwitchingTransactionIdPatch200Response> localVarResponse = ApiCrossAmcSwitchingTransactionIdPatchWithHttpInfo(transactionId, apiCrossAmcSwitchingTransactionIdPatchRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Approve cross amc switching order Approve cross amc switching order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiCrossAmcSwitchingTransactionIdPatchRequest">Example request body for api approve cross amc switching (optional)</param>
        /// <returns>ApiResponse of ApiCrossAmcSwitchingTransactionIdPatch200Response</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiCrossAmcSwitchingTransactionIdPatch200Response> ApiCrossAmcSwitchingTransactionIdPatchWithHttpInfo(string transactionId, ApiCrossAmcSwitchingTransactionIdPatchRequest? apiCrossAmcSwitchingTransactionIdPatchRequest = default(ApiCrossAmcSwitchingTransactionIdPatchRequest?))
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'transactionId' when calling FundConnextApi->ApiCrossAmcSwitchingTransactionIdPatch");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("transactionId", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(transactionId)); // path parameter
            localVarRequestOptions.Data = apiCrossAmcSwitchingTransactionIdPatchRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<ApiCrossAmcSwitchingTransactionIdPatch200Response>("/api/crossAmcSwitching/{transactionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCrossAmcSwitchingTransactionIdPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Approve cross amc switching order Approve cross amc switching order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiCrossAmcSwitchingTransactionIdPatchRequest">Example request body for api approve cross amc switching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiCrossAmcSwitchingTransactionIdPatch200Response</returns>
        public async System.Threading.Tasks.Task<ApiCrossAmcSwitchingTransactionIdPatch200Response> ApiCrossAmcSwitchingTransactionIdPatchAsync(string transactionId, ApiCrossAmcSwitchingTransactionIdPatchRequest? apiCrossAmcSwitchingTransactionIdPatchRequest = default(ApiCrossAmcSwitchingTransactionIdPatchRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiCrossAmcSwitchingTransactionIdPatch200Response> localVarResponse = await ApiCrossAmcSwitchingTransactionIdPatchWithHttpInfoAsync(transactionId, apiCrossAmcSwitchingTransactionIdPatchRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Approve cross amc switching order Approve cross amc switching order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiCrossAmcSwitchingTransactionIdPatchRequest">Example request body for api approve cross amc switching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiCrossAmcSwitchingTransactionIdPatch200Response)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiCrossAmcSwitchingTransactionIdPatch200Response>> ApiCrossAmcSwitchingTransactionIdPatchWithHttpInfoAsync(string transactionId, ApiCrossAmcSwitchingTransactionIdPatchRequest? apiCrossAmcSwitchingTransactionIdPatchRequest = default(ApiCrossAmcSwitchingTransactionIdPatchRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'transactionId' when calling FundConnextApi->ApiCrossAmcSwitchingTransactionIdPatch");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("transactionId", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(transactionId)); // path parameter
            localVarRequestOptions.Data = apiCrossAmcSwitchingTransactionIdPatchRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<ApiCrossAmcSwitchingTransactionIdPatch200Response>("/api/crossAmcSwitching/{transactionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCrossAmcSwitchingTransactionIdPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find Customer Profile By Account Find Customer Profile By Account&lt;br/&gt;This content will be in the same JSON format as in CUSTOMERPROFILE.zip (in yyyyMMdd_SAcode_INDIVIDUAL.json). The example response below is in V5 format. (Please refer to IndividualInvestorV5Response)&lt;br/&gt;Please contact TSD if you want to change version of yyyyMMdd_SAcode_INDIVIDUAL.json in CUSTOMERPROFILE.zip&lt;br&gt; ตั้งแต่วันที่ 09/03/2024 มีการเพิ่มข้อมูลที่เกี่ยวข้องกับ CRS
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountId">Find customer profile by account (optional)</param>
        /// <returns>IndividualInvestorV5Response</returns>
        public IndividualInvestorV5Response ApiCustomerAccountGet(string xAuthToken, Object? accountId = default(Object?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<IndividualInvestorV5Response> localVarResponse = ApiCustomerAccountGetWithHttpInfo(xAuthToken, accountId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find Customer Profile By Account Find Customer Profile By Account&lt;br/&gt;This content will be in the same JSON format as in CUSTOMERPROFILE.zip (in yyyyMMdd_SAcode_INDIVIDUAL.json). The example response below is in V5 format. (Please refer to IndividualInvestorV5Response)&lt;br/&gt;Please contact TSD if you want to change version of yyyyMMdd_SAcode_INDIVIDUAL.json in CUSTOMERPROFILE.zip&lt;br&gt; ตั้งแต่วันที่ 09/03/2024 มีการเพิ่มข้อมูลที่เกี่ยวข้องกับ CRS
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountId">Find customer profile by account (optional)</param>
        /// <returns>ApiResponse of IndividualInvestorV5Response</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<IndividualInvestorV5Response> ApiCustomerAccountGetWithHttpInfo(string xAuthToken, Object? accountId = default(Object?))
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiCustomerAccountGet");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "accountId", accountId));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<IndividualInvestorV5Response>("/api/customer/account", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerAccountGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Find Customer Profile By Account Find Customer Profile By Account&lt;br/&gt;This content will be in the same JSON format as in CUSTOMERPROFILE.zip (in yyyyMMdd_SAcode_INDIVIDUAL.json). The example response below is in V5 format. (Please refer to IndividualInvestorV5Response)&lt;br/&gt;Please contact TSD if you want to change version of yyyyMMdd_SAcode_INDIVIDUAL.json in CUSTOMERPROFILE.zip&lt;br&gt; ตั้งแต่วันที่ 09/03/2024 มีการเพิ่มข้อมูลที่เกี่ยวข้องกับ CRS
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountId">Find customer profile by account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IndividualInvestorV5Response</returns>
        public async System.Threading.Tasks.Task<IndividualInvestorV5Response> ApiCustomerAccountGetAsync(string xAuthToken, Object? accountId = default(Object?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<IndividualInvestorV5Response> localVarResponse = await ApiCustomerAccountGetWithHttpInfoAsync(xAuthToken, accountId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Find Customer Profile By Account Find Customer Profile By Account&lt;br/&gt;This content will be in the same JSON format as in CUSTOMERPROFILE.zip (in yyyyMMdd_SAcode_INDIVIDUAL.json). The example response below is in V5 format. (Please refer to IndividualInvestorV5Response)&lt;br/&gt;Please contact TSD if you want to change version of yyyyMMdd_SAcode_INDIVIDUAL.json in CUSTOMERPROFILE.zip&lt;br&gt; ตั้งแต่วันที่ 09/03/2024 มีการเพิ่มข้อมูลที่เกี่ยวข้องกับ CRS
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="accountId">Find customer profile by account (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IndividualInvestorV5Response)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<IndividualInvestorV5Response>> ApiCustomerAccountGetWithHttpInfoAsync(string xAuthToken, Object? accountId = default(Object?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiCustomerAccountGet");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "accountId", accountId));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<IndividualInvestorV5Response>("/api/customer/account", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerAccountGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upload Individual Account File
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType"></param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="identificationCardType"> (optional)</param>
        /// <param name="passportCountry"> (optional)</param>
        /// <param name="cardNumber"> (optional)</param>
        /// <param name="approved"> (optional)</param>
        /// <returns>string</returns>
        public string ApiCustomerIndividualAccountFileTypeUploadPost(string fileType, string? xAuthToken = default(string?), FileParameter? file = default(FileParameter?), string? accountId = default(string?), string? identificationCardType = default(string?), string? passportCountry = default(string?), string? cardNumber = default(string?), bool? approved = default(bool?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = ApiCustomerIndividualAccountFileTypeUploadPostWithHttpInfo(fileType, xAuthToken, file, accountId, identificationCardType, passportCountry, cardNumber, approved);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upload Individual Account File
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType"></param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="identificationCardType"> (optional)</param>
        /// <param name="passportCountry"> (optional)</param>
        /// <param name="cardNumber"> (optional)</param>
        /// <param name="approved"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<string> ApiCustomerIndividualAccountFileTypeUploadPostWithHttpInfo(string fileType, string? xAuthToken = default(string?), FileParameter? file = default(FileParameter?), string? accountId = default(string?), string? identificationCardType = default(string?), string? passportCountry = default(string?), string? cardNumber = default(string?), bool? approved = default(bool?))
        {
            // verify the required parameter 'fileType' is set
            if (fileType == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'fileType' when calling FundConnextApi->ApiCustomerIndividualAccountFileTypeUploadPost");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "multipart/form-data"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("fileType", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(fileType)); // path parameter
            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }
            if (accountId != null)
            {
                localVarRequestOptions.FormParameters.Add("accountId", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(accountId)); // form parameter
            }
            if (identificationCardType != null)
            {
                localVarRequestOptions.FormParameters.Add("identificationCardType", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(identificationCardType)); // form parameter
            }
            if (passportCountry != null)
            {
                localVarRequestOptions.FormParameters.Add("passportCountry", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(passportCountry)); // form parameter
            }
            if (cardNumber != null)
            {
                localVarRequestOptions.FormParameters.Add("cardNumber", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(cardNumber)); // form parameter
            }
            if (approved != null)
            {
                localVarRequestOptions.FormParameters.Add("approved", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(approved)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/customer/individual/account/{fileType}/upload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualAccountFileTypeUploadPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upload Individual Account File
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType"></param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="identificationCardType"> (optional)</param>
        /// <param name="passportCountry"> (optional)</param>
        /// <param name="cardNumber"> (optional)</param>
        /// <param name="approved"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiCustomerIndividualAccountFileTypeUploadPostAsync(string fileType, string? xAuthToken = default(string?), FileParameter? file = default(FileParameter?), string? accountId = default(string?), string? identificationCardType = default(string?), string? passportCountry = default(string?), string? cardNumber = default(string?), bool? approved = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = await ApiCustomerIndividualAccountFileTypeUploadPostWithHttpInfoAsync(fileType, xAuthToken, file, accountId, identificationCardType, passportCountry, cardNumber, approved, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upload Individual Account File
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType"></param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="accountId"> (optional)</param>
        /// <param name="identificationCardType"> (optional)</param>
        /// <param name="passportCountry"> (optional)</param>
        /// <param name="cardNumber"> (optional)</param>
        /// <param name="approved"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<string>> ApiCustomerIndividualAccountFileTypeUploadPostWithHttpInfoAsync(string fileType, string? xAuthToken = default(string?), FileParameter? file = default(FileParameter?), string? accountId = default(string?), string? identificationCardType = default(string?), string? passportCountry = default(string?), string? cardNumber = default(string?), bool? approved = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileType' is set
            if (fileType == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'fileType' when calling FundConnextApi->ApiCustomerIndividualAccountFileTypeUploadPost");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "multipart/form-data"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("fileType", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(fileType)); // path parameter
            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }
            if (accountId != null)
            {
                localVarRequestOptions.FormParameters.Add("accountId", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(accountId)); // form parameter
            }
            if (identificationCardType != null)
            {
                localVarRequestOptions.FormParameters.Add("identificationCardType", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(identificationCardType)); // form parameter
            }
            if (passportCountry != null)
            {
                localVarRequestOptions.FormParameters.Add("passportCountry", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(passportCountry)); // form parameter
            }
            if (cardNumber != null)
            {
                localVarRequestOptions.FormParameters.Add("cardNumber", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(cardNumber)); // form parameter
            }
            if (approved != null)
            {
                localVarRequestOptions.FormParameters.Add("approved", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(approved)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/api/customer/individual/account/{fileType}/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualAccountFileTypeUploadPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create Individual Account v4
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAccountCreateRequest">Create Individual one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>string</returns>
        public string ApiCustomerIndividualAccountV4Post(CustomerAccountCreateRequest customerAccountCreateRequest, string? xAuthToken = default(string?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = ApiCustomerIndividualAccountV4PostWithHttpInfo(customerAccountCreateRequest, xAuthToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create Individual Account v4
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAccountCreateRequest">Create Individual one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<string> ApiCustomerIndividualAccountV4PostWithHttpInfo(CustomerAccountCreateRequest customerAccountCreateRequest, string? xAuthToken = default(string?))
        {
            // verify the required parameter 'customerAccountCreateRequest' is set
            if (customerAccountCreateRequest == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'customerAccountCreateRequest' when calling FundConnextApi->ApiCustomerIndividualAccountV4Post");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            localVarRequestOptions.Data = customerAccountCreateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/customer/individual/account/v4", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualAccountV4Post", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create Individual Account v4
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAccountCreateRequest">Create Individual one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiCustomerIndividualAccountV4PostAsync(CustomerAccountCreateRequest customerAccountCreateRequest, string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = await ApiCustomerIndividualAccountV4PostWithHttpInfoAsync(customerAccountCreateRequest, xAuthToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create Individual Account v4
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAccountCreateRequest">Create Individual one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<string>> ApiCustomerIndividualAccountV4PostWithHttpInfoAsync(CustomerAccountCreateRequest customerAccountCreateRequest, string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerAccountCreateRequest' is set
            if (customerAccountCreateRequest == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'customerAccountCreateRequest' when calling FundConnextApi->ApiCustomerIndividualAccountV4Post");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            localVarRequestOptions.Data = customerAccountCreateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/api/customer/individual/account/v4", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualAccountV4Post", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update Individual Account v4
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAccountUpdateRequest">Update Individual one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>string</returns>
        public string ApiCustomerIndividualAccountV4Put(CustomerAccountUpdateRequest customerAccountUpdateRequest, string? xAuthToken = default(string?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = ApiCustomerIndividualAccountV4PutWithHttpInfo(customerAccountUpdateRequest, xAuthToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update Individual Account v4
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAccountUpdateRequest">Update Individual one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<string> ApiCustomerIndividualAccountV4PutWithHttpInfo(CustomerAccountUpdateRequest customerAccountUpdateRequest, string? xAuthToken = default(string?))
        {
            // verify the required parameter 'customerAccountUpdateRequest' is set
            if (customerAccountUpdateRequest == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'customerAccountUpdateRequest' when calling FundConnextApi->ApiCustomerIndividualAccountV4Put");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            localVarRequestOptions.Data = customerAccountUpdateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<string>("/api/customer/individual/account/v4", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualAccountV4Put", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update Individual Account v4
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAccountUpdateRequest">Update Individual one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiCustomerIndividualAccountV4PutAsync(CustomerAccountUpdateRequest customerAccountUpdateRequest, string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = await ApiCustomerIndividualAccountV4PutWithHttpInfoAsync(customerAccountUpdateRequest, xAuthToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update Individual Account v4
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerAccountUpdateRequest">Update Individual one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<string>> ApiCustomerIndividualAccountV4PutWithHttpInfoAsync(CustomerAccountUpdateRequest customerAccountUpdateRequest, string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerAccountUpdateRequest' is set
            if (customerAccountUpdateRequest == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'customerAccountUpdateRequest' when calling FundConnextApi->ApiCustomerIndividualAccountV4Put");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            localVarRequestOptions.Data = customerAccountUpdateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<string>("/api/customer/individual/account/v4", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualAccountV4Put", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  upload customer document
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType"></param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="identificationCardType"> (optional)</param>
        /// <param name="passportCountry"> (optional)</param>
        /// <param name="cardNumber"> (optional)</param>
        /// <param name="approved"> (optional)</param>
        /// <returns>string</returns>
        public string ApiCustomerIndividualFileTypeUploadPost(string fileType, string? xAuthToken = default(string?), FileParameter? file = default(FileParameter?), string? identificationCardType = default(string?), string? passportCountry = default(string?), string? cardNumber = default(string?), bool? approved = default(bool?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = ApiCustomerIndividualFileTypeUploadPostWithHttpInfo(fileType, xAuthToken, file, identificationCardType, passportCountry, cardNumber, approved);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  upload customer document
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType"></param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="identificationCardType"> (optional)</param>
        /// <param name="passportCountry"> (optional)</param>
        /// <param name="cardNumber"> (optional)</param>
        /// <param name="approved"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<string> ApiCustomerIndividualFileTypeUploadPostWithHttpInfo(string fileType, string? xAuthToken = default(string?), FileParameter? file = default(FileParameter?), string? identificationCardType = default(string?), string? passportCountry = default(string?), string? cardNumber = default(string?), bool? approved = default(bool?))
        {
            // verify the required parameter 'fileType' is set
            if (fileType == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'fileType' when calling FundConnextApi->ApiCustomerIndividualFileTypeUploadPost");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "multipart/form-data"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("fileType", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(fileType)); // path parameter
            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }
            if (identificationCardType != null)
            {
                localVarRequestOptions.FormParameters.Add("identificationCardType", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(identificationCardType)); // form parameter
            }
            if (passportCountry != null)
            {
                localVarRequestOptions.FormParameters.Add("passportCountry", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(passportCountry)); // form parameter
            }
            if (cardNumber != null)
            {
                localVarRequestOptions.FormParameters.Add("cardNumber", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(cardNumber)); // form parameter
            }
            if (approved != null)
            {
                localVarRequestOptions.FormParameters.Add("approved", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(approved)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/customer/individual/{fileType}/upload", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualFileTypeUploadPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  upload customer document
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType"></param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="identificationCardType"> (optional)</param>
        /// <param name="passportCountry"> (optional)</param>
        /// <param name="cardNumber"> (optional)</param>
        /// <param name="approved"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiCustomerIndividualFileTypeUploadPostAsync(string fileType, string? xAuthToken = default(string?), FileParameter? file = default(FileParameter?), string? identificationCardType = default(string?), string? passportCountry = default(string?), string? cardNumber = default(string?), bool? approved = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = await ApiCustomerIndividualFileTypeUploadPostWithHttpInfoAsync(fileType, xAuthToken, file, identificationCardType, passportCountry, cardNumber, approved, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  upload customer document
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileType"></param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="identificationCardType"> (optional)</param>
        /// <param name="passportCountry"> (optional)</param>
        /// <param name="cardNumber"> (optional)</param>
        /// <param name="approved"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<string>> ApiCustomerIndividualFileTypeUploadPostWithHttpInfoAsync(string fileType, string? xAuthToken = default(string?), FileParameter? file = default(FileParameter?), string? identificationCardType = default(string?), string? passportCountry = default(string?), string? cardNumber = default(string?), bool? approved = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileType' is set
            if (fileType == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'fileType' when calling FundConnextApi->ApiCustomerIndividualFileTypeUploadPost");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "multipart/form-data"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("fileType", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(fileType)); // path parameter
            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }
            if (identificationCardType != null)
            {
                localVarRequestOptions.FormParameters.Add("identificationCardType", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(identificationCardType)); // form parameter
            }
            if (passportCountry != null)
            {
                localVarRequestOptions.FormParameters.Add("passportCountry", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(passportCountry)); // form parameter
            }
            if (cardNumber != null)
            {
                localVarRequestOptions.FormParameters.Add("cardNumber", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(cardNumber)); // form parameter
            }
            if (approved != null)
            {
                localVarRequestOptions.FormParameters.Add("approved", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(approved)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/api/customer/individual/{fileType}/upload", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualFileTypeUploadPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update Partial Individual Customer Profile
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>string</returns>
        public string ApiCustomerIndividualPatch(string? xAuthToken = default(string?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = ApiCustomerIndividualPatchWithHttpInfo(xAuthToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update Partial Individual Customer Profile
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<string> ApiCustomerIndividualPatchWithHttpInfo(string? xAuthToken = default(string?))
        {
            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Patch<string>("/api/customer/individual", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update Partial Individual Customer Profile
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiCustomerIndividualPatchAsync(string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = await ApiCustomerIndividualPatchWithHttpInfoAsync(xAuthToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update Partial Individual Customer Profile
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<string>> ApiCustomerIndividualPatchWithHttpInfoAsync(string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<string>("/api/customer/individual", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create Individual Customer Profile
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileCreateRequest">Create Individual Customer Profile request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>string</returns>
        public string ApiCustomerIndividualV4Post(CustomerProfileCreateRequest customerProfileCreateRequest, string? xAuthToken = default(string?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = ApiCustomerIndividualV4PostWithHttpInfo(customerProfileCreateRequest, xAuthToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create Individual Customer Profile
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileCreateRequest">Create Individual Customer Profile request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<string> ApiCustomerIndividualV4PostWithHttpInfo(CustomerProfileCreateRequest customerProfileCreateRequest, string? xAuthToken = default(string?))
        {
            // verify the required parameter 'customerProfileCreateRequest' is set
            if (customerProfileCreateRequest == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'customerProfileCreateRequest' when calling FundConnextApi->ApiCustomerIndividualV4Post");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            localVarRequestOptions.Data = customerProfileCreateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/customer/individual/v4", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualV4Post", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create Individual Customer Profile
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileCreateRequest">Create Individual Customer Profile request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiCustomerIndividualV4PostAsync(CustomerProfileCreateRequest customerProfileCreateRequest, string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = await ApiCustomerIndividualV4PostWithHttpInfoAsync(customerProfileCreateRequest, xAuthToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create Individual Customer Profile
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileCreateRequest">Create Individual Customer Profile request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<string>> ApiCustomerIndividualV4PostWithHttpInfoAsync(CustomerProfileCreateRequest customerProfileCreateRequest, string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerProfileCreateRequest' is set
            if (customerProfileCreateRequest == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'customerProfileCreateRequest' when calling FundConnextApi->ApiCustomerIndividualV4Post");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            localVarRequestOptions.Data = customerProfileCreateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/api/customer/individual/v4", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualV4Post", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update Individual Customer Profile
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileUpdateRequest">Update Individual Customer Profile request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>string</returns>
        public string ApiCustomerIndividualV4Put(CustomerProfileUpdateRequest customerProfileUpdateRequest, string? xAuthToken = default(string?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = ApiCustomerIndividualV4PutWithHttpInfo(customerProfileUpdateRequest, xAuthToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update Individual Customer Profile
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileUpdateRequest">Update Individual Customer Profile request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<string> ApiCustomerIndividualV4PutWithHttpInfo(CustomerProfileUpdateRequest customerProfileUpdateRequest, string? xAuthToken = default(string?))
        {
            // verify the required parameter 'customerProfileUpdateRequest' is set
            if (customerProfileUpdateRequest == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'customerProfileUpdateRequest' when calling FundConnextApi->ApiCustomerIndividualV4Put");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            localVarRequestOptions.Data = customerProfileUpdateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<string>("/api/customer/individual/v4", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualV4Put", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update Individual Customer Profile
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileUpdateRequest">Update Individual Customer Profile request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiCustomerIndividualV4PutAsync(CustomerProfileUpdateRequest customerProfileUpdateRequest, string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = await ApiCustomerIndividualV4PutWithHttpInfoAsync(customerProfileUpdateRequest, xAuthToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update Individual Customer Profile
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerProfileUpdateRequest">Update Individual Customer Profile request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<string>> ApiCustomerIndividualV4PutWithHttpInfoAsync(CustomerProfileUpdateRequest customerProfileUpdateRequest, string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerProfileUpdateRequest' is set
            if (customerProfileUpdateRequest == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'customerProfileUpdateRequest' when calling FundConnextApi->ApiCustomerIndividualV4Put");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            localVarRequestOptions.Data = customerProfileUpdateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<string>("/api/customer/individual/v4", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualV4Put", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Individual Customer Profile Create new individual customer v5
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV5">Example request body for creating individual customer profile (optional)</param>
        /// <returns>string</returns>
        public string ApiCustomerIndividualV5Post(string? xAuthToken = default(string?), CustomerAccountCreateRequestV5? customerAccountCreateRequestV5 = default(CustomerAccountCreateRequestV5?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = ApiCustomerIndividualV5PostWithHttpInfo(xAuthToken, customerAccountCreateRequestV5);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Individual Customer Profile Create new individual customer v5
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV5">Example request body for creating individual customer profile (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<string> ApiCustomerIndividualV5PostWithHttpInfo(string? xAuthToken = default(string?), CustomerAccountCreateRequestV5? customerAccountCreateRequestV5 = default(CustomerAccountCreateRequestV5?))
        {
            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            localVarRequestOptions.Data = customerAccountCreateRequestV5;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/customer/individual/v5", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualV5Post", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Individual Customer Profile Create new individual customer v5
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV5">Example request body for creating individual customer profile (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiCustomerIndividualV5PostAsync(string? xAuthToken = default(string?), CustomerAccountCreateRequestV5? customerAccountCreateRequestV5 = default(CustomerAccountCreateRequestV5?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = await ApiCustomerIndividualV5PostWithHttpInfoAsync(xAuthToken, customerAccountCreateRequestV5, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Individual Customer Profile Create new individual customer v5
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV5">Example request body for creating individual customer profile (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<string>> ApiCustomerIndividualV5PostWithHttpInfoAsync(string? xAuthToken = default(string?), CustomerAccountCreateRequestV5? customerAccountCreateRequestV5 = default(CustomerAccountCreateRequestV5?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            localVarRequestOptions.Data = customerAccountCreateRequestV5;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/api/customer/individual/v5", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualV5Post", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Individual Customer Profile Update individual customer
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV5">Example request body for updating individual customer profile (optional)</param>
        /// <returns>string</returns>
        public string ApiCustomerIndividualV5Put(string? xAuthToken = default(string?), CustomerAccountCreateRequestV5? customerAccountCreateRequestV5 = default(CustomerAccountCreateRequestV5?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = ApiCustomerIndividualV5PutWithHttpInfo(xAuthToken, customerAccountCreateRequestV5);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Individual Customer Profile Update individual customer
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV5">Example request body for updating individual customer profile (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<string> ApiCustomerIndividualV5PutWithHttpInfo(string? xAuthToken = default(string?), CustomerAccountCreateRequestV5? customerAccountCreateRequestV5 = default(CustomerAccountCreateRequestV5?))
        {
            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            localVarRequestOptions.Data = customerAccountCreateRequestV5;


            // make the HTTP request
            var localVarResponse = this.Client.Put<string>("/api/customer/individual/v5", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualV5Put", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Individual Customer Profile Update individual customer
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV5">Example request body for updating individual customer profile (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiCustomerIndividualV5PutAsync(string? xAuthToken = default(string?), CustomerAccountCreateRequestV5? customerAccountCreateRequestV5 = default(CustomerAccountCreateRequestV5?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = await ApiCustomerIndividualV5PutWithHttpInfoAsync(xAuthToken, customerAccountCreateRequestV5, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Individual Customer Profile Update individual customer
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV5">Example request body for updating individual customer profile (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<string>> ApiCustomerIndividualV5PutWithHttpInfoAsync(string? xAuthToken = default(string?), CustomerAccountCreateRequestV5? customerAccountCreateRequestV5 = default(CustomerAccountCreateRequestV5?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            localVarRequestOptions.Data = customerAccountCreateRequestV5;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<string>("/api/customer/individual/v5", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualV5Put", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Individual Customer Profile Create new individual customer v6
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV6">Example request body for creating individual customer profile (optional)</param>
        /// <returns>string</returns>
        public string ApiCustomerIndividualV6Post(string? xAuthToken = default(string?), CustomerAccountCreateRequestV6? customerAccountCreateRequestV6 = default(CustomerAccountCreateRequestV6?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = ApiCustomerIndividualV6PostWithHttpInfo(xAuthToken, customerAccountCreateRequestV6);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Individual Customer Profile Create new individual customer v6
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV6">Example request body for creating individual customer profile (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<string> ApiCustomerIndividualV6PostWithHttpInfo(string? xAuthToken = default(string?), CustomerAccountCreateRequestV6? customerAccountCreateRequestV6 = default(CustomerAccountCreateRequestV6?))
        {
            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            localVarRequestOptions.Data = customerAccountCreateRequestV6;


            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/customer/individual/v6", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualV6Post", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Individual Customer Profile Create new individual customer v6
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV6">Example request body for creating individual customer profile (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiCustomerIndividualV6PostAsync(string? xAuthToken = default(string?), CustomerAccountCreateRequestV6? customerAccountCreateRequestV6 = default(CustomerAccountCreateRequestV6?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = await ApiCustomerIndividualV6PostWithHttpInfoAsync(xAuthToken, customerAccountCreateRequestV6, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Individual Customer Profile Create new individual customer v6
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV6">Example request body for creating individual customer profile (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<string>> ApiCustomerIndividualV6PostWithHttpInfoAsync(string? xAuthToken = default(string?), CustomerAccountCreateRequestV6? customerAccountCreateRequestV6 = default(CustomerAccountCreateRequestV6?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            localVarRequestOptions.Data = customerAccountCreateRequestV6;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/api/customer/individual/v6", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualV6Post", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Individual Customer Profile Update individual customer
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV6">Example request body for updating individual customer profile (optional)</param>
        /// <returns>string</returns>
        public string ApiCustomerIndividualV6Put(string? xAuthToken = default(string?), CustomerAccountCreateRequestV6? customerAccountCreateRequestV6 = default(CustomerAccountCreateRequestV6?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = ApiCustomerIndividualV6PutWithHttpInfo(xAuthToken, customerAccountCreateRequestV6);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Individual Customer Profile Update individual customer
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV6">Example request body for updating individual customer profile (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<string> ApiCustomerIndividualV6PutWithHttpInfo(string? xAuthToken = default(string?), CustomerAccountCreateRequestV6? customerAccountCreateRequestV6 = default(CustomerAccountCreateRequestV6?))
        {
            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            localVarRequestOptions.Data = customerAccountCreateRequestV6;


            // make the HTTP request
            var localVarResponse = this.Client.Put<string>("/api/customer/individual/v6", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualV6Put", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Individual Customer Profile Update individual customer
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV6">Example request body for updating individual customer profile (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiCustomerIndividualV6PutAsync(string? xAuthToken = default(string?), CustomerAccountCreateRequestV6? customerAccountCreateRequestV6 = default(CustomerAccountCreateRequestV6?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = await ApiCustomerIndividualV6PutWithHttpInfoAsync(xAuthToken, customerAccountCreateRequestV6, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Individual Customer Profile Update individual customer
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="customerAccountCreateRequestV6">Example request body for updating individual customer profile (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<string>> ApiCustomerIndividualV6PutWithHttpInfoAsync(string? xAuthToken = default(string?), CustomerAccountCreateRequestV6? customerAccountCreateRequestV6 = default(CustomerAccountCreateRequestV6?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            localVarRequestOptions.Data = customerAccountCreateRequestV6;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<string>("/api/customer/individual/v6", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerIndividualV6Put", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update Juristic Account v4
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerJuristicAccountUpdateRequest">Update Juristic one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>string</returns>
        public string ApiCustomerJuristicAccountV4Put(CustomerJuristicAccountUpdateRequest customerJuristicAccountUpdateRequest, string? xAuthToken = default(string?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = ApiCustomerJuristicAccountV4PutWithHttpInfo(customerJuristicAccountUpdateRequest, xAuthToken);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update Juristic Account v4
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerJuristicAccountUpdateRequest">Update Juristic one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<string> ApiCustomerJuristicAccountV4PutWithHttpInfo(CustomerJuristicAccountUpdateRequest customerJuristicAccountUpdateRequest, string? xAuthToken = default(string?))
        {
            // verify the required parameter 'customerJuristicAccountUpdateRequest' is set
            if (customerJuristicAccountUpdateRequest == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'customerJuristicAccountUpdateRequest' when calling FundConnextApi->ApiCustomerJuristicAccountV4Put");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            localVarRequestOptions.Data = customerJuristicAccountUpdateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Put<string>("/api/customer/juristic/account/v4", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerJuristicAccountV4Put", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update Juristic Account v4
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerJuristicAccountUpdateRequest">Update Juristic one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiCustomerJuristicAccountV4PutAsync(CustomerJuristicAccountUpdateRequest customerJuristicAccountUpdateRequest, string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<string> localVarResponse = await ApiCustomerJuristicAccountV4PutWithHttpInfoAsync(customerJuristicAccountUpdateRequest, xAuthToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Update Juristic Account v4
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerJuristicAccountUpdateRequest">Update Juristic one account per customer per request</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<string>> ApiCustomerJuristicAccountV4PutWithHttpInfoAsync(CustomerJuristicAccountUpdateRequest customerJuristicAccountUpdateRequest, string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'customerJuristicAccountUpdateRequest' is set
            if (customerJuristicAccountUpdateRequest == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'customerJuristicAccountUpdateRequest' when calling FundConnextApi->ApiCustomerJuristicAccountV4Put");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }
            localVarRequestOptions.Data = customerJuristicAccountUpdateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<string>("/api/customer/juristic/account/v4", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerJuristicAccountV4Put", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Juristic Customer Profile Retrieve Juristic Customer Profile and Account (V5)
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="juristicNumber">เลขที่ใบสำคัญการจดทะเบียน เช่น เลขทะเบียนการค้า เป็นต้น (ต้อง unique ภายใต้ SA) (optional)</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>JuristicInvestorV5Response</returns>
        public JuristicInvestorV5Response ApiCustomerJuristicInvestorProfileV5Get(string? juristicNumber = default(string?), string? xAuthToken = default(string?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<JuristicInvestorV5Response> localVarResponse = ApiCustomerJuristicInvestorProfileV5GetWithHttpInfo(juristicNumber, xAuthToken);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Juristic Customer Profile Retrieve Juristic Customer Profile and Account (V5)
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="juristicNumber">เลขที่ใบสำคัญการจดทะเบียน เช่น เลขทะเบียนการค้า เป็นต้น (ต้อง unique ภายใต้ SA) (optional)</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <returns>ApiResponse of JuristicInvestorV5Response</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<JuristicInvestorV5Response> ApiCustomerJuristicInvestorProfileV5GetWithHttpInfo(string? juristicNumber = default(string?), string? xAuthToken = default(string?))
        {
            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (juristicNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "juristicNumber", juristicNumber));
            }
            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<JuristicInvestorV5Response>("/api/customer/juristic/investor/profile/v5", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerJuristicInvestorProfileV5Get", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Juristic Customer Profile Retrieve Juristic Customer Profile and Account (V5)
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="juristicNumber">เลขที่ใบสำคัญการจดทะเบียน เช่น เลขทะเบียนการค้า เป็นต้น (ต้อง unique ภายใต้ SA) (optional)</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JuristicInvestorV5Response</returns>
        public async System.Threading.Tasks.Task<JuristicInvestorV5Response> ApiCustomerJuristicInvestorProfileV5GetAsync(string? juristicNumber = default(string?), string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<JuristicInvestorV5Response> localVarResponse = await ApiCustomerJuristicInvestorProfileV5GetWithHttpInfoAsync(juristicNumber, xAuthToken, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Juristic Customer Profile Retrieve Juristic Customer Profile and Account (V5)
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="juristicNumber">เลขที่ใบสำคัญการจดทะเบียน เช่น เลขทะเบียนการค้า เป็นต้น (ต้อง unique ภายใต้ SA) (optional)</param>
        /// <param name="xAuthToken"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JuristicInvestorV5Response)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<JuristicInvestorV5Response>> ApiCustomerJuristicInvestorProfileV5GetWithHttpInfoAsync(string? juristicNumber = default(string?), string? xAuthToken = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (juristicNumber != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "juristicNumber", juristicNumber));
            }
            if (xAuthToken != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<JuristicInvestorV5Response>("/api/customer/juristic/investor/profile/v5", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiCustomerJuristicInvestorProfileV5Get", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download files Download file by fileType and businessDate
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessDate">business date (YYYYMMDD)</param>
        /// <param name="fileType">**Master:** PostalCode.zip, BankBranch.zip, AMCCode.zip, SACode.zip, AssetAllocation.zip, TopHolding.zip, SecFundFee.zip&lt;/br&gt;&lt;/br&gt;**AMC:** PaidTransactions.zip, NewAccount.zip, Attachment.zip, AmendmentComparison.zip, EAmendmentComparison.zip, ReconcileMonthlyFee.zip&lt;/br&gt;&lt;/br&gt;**SA Normal:**   * FundMapping.zip  * FundProfile.zip  * FundHoliday.zip  * SwitchingMatrix.zip  * TradeCalendar.zip  * Fee.zip  * FundPerformance.zip  * AccountProfile.zip  * UnitholderMapping.zip  * BankAccountUnitholder.zip  * CustomerProfile.zip  * Nav.zip  * UnitholderBalance.zip  * AllottedTransactions.zip  * LtfBalance.zip  * DividendNews.zip  * DividendTransactions.zip  * ConfirmationNote.zip  * ConfirmationNoteTxt.zip  * MonthlyStatement.zip  * MonthlyStatementTxt.zip  * WithholdingTax.zip  * WithholdingTaxTxt.zip  * SuspendUnitholder.zip  * Pnd2.zip  * Pnd2A.zip  * Pnd53.zip  * FinNetBankMapping.zip  * UnitholderBalanceOffshore.zip  * AllottedTransactionsOffshore.zip  * SidePocket.zip  **SA Passthrough:**   * FundMapping.zip  * FundProfile.zip  * FundHoliday.zip  * SwitchingMatrix.zip  * TradeCalendar.zip  * Fee.zip  * FundPerformance.zip  * Nav.zip  * AllottedTransactions.zip  * UnitholderBalance.zip  * LtfBalance.zip  * DividendNews.zip  * DividendTransactions.zip  * SuspendUnitholder.zip  * AssignUnitholderId.zip  * SidePocket.zip   **Custodian:**   * AllottedTransactions.zip  * OrderTransactions.zip  * Nav.zip  * FundMapping.zip  * DividendTransactions.zip  * UnitholderBalance.zip  *  SidePocket.zip</param>
        /// <param name="part">Only fileType &#x3D; Attachment (optional)</param>
        /// <param name="varVersion">**FileType &#x3D; PaidTransactions** &lt;ul&gt;&lt;li&gt;1 &#x3D; batch round 11:45 am&lt;/li&gt;&lt;li&gt;2 &#x3D; batch round 12:15 pm&lt;/li&gt;&lt;li&gt;3 &#x3D; batch round 12:45 pm&lt;/li&gt;&lt;li&gt;4 &#x3D; batch round 1:15 pm&lt;/li&gt;&lt;li&gt;5 &#x3D; batch round 1:45 pm&lt;/li&gt;&lt;li&gt;6 &#x3D; batch round 2:15 pm&lt;/li&gt;&lt;li&gt;7 &#x3D; batch round 2:45 pm&lt;/li&gt;&lt;li&gt;8 &#x3D; batch round 3:15 pm&lt;/li&gt;&lt;li&gt;9 &#x3D; batch round 3:45 pm&lt;/li&gt;&lt;/ul&gt; &lt;/br&gt; **FileType &#x3D; OrderTransactions** &lt;ul&gt;&lt;li&gt;1 &#x3D; batch round 11:42 am&lt;/li&gt;&lt;li&gt;2 &#x3D; batch round 12:12 pm&lt;/li&gt;&lt;li&gt;3 &#x3D; batch round 12:42 pm&lt;/li&gt;&lt;li&gt;4 &#x3D; batch round 1:12 pm&lt;/li&gt;&lt;li&gt;5 &#x3D; batch round 1:42 pm&lt;/li&gt;&lt;li&gt;6 &#x3D; batch round 2:12 pm&lt;/li&gt;&lt;li&gt;7 &#x3D; batch round 2:42 pm&lt;/li&gt;&lt;li&gt;8 &#x3D; batch round 3:12 pm&lt;/li&gt;&lt;li&gt;9 &#x3D; batch round 3:42 pm&lt;/li&gt;&lt;li&gt;BCP&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <returns>FileParameter</returns>
        public FileParameter ApiFilesBusinessDateFileTypeGet(string businessDate, string fileType, int? part = default(int?), ApiFilesBusinessDateFileTypeGetVersionParameter? varVersion = default(ApiFilesBusinessDateFileTypeGetVersionParameter?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<FileParameter> localVarResponse = ApiFilesBusinessDateFileTypeGetWithHttpInfo(businessDate, fileType, part, varVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download files Download file by fileType and businessDate
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessDate">business date (YYYYMMDD)</param>
        /// <param name="fileType">**Master:** PostalCode.zip, BankBranch.zip, AMCCode.zip, SACode.zip, AssetAllocation.zip, TopHolding.zip, SecFundFee.zip&lt;/br&gt;&lt;/br&gt;**AMC:** PaidTransactions.zip, NewAccount.zip, Attachment.zip, AmendmentComparison.zip, EAmendmentComparison.zip, ReconcileMonthlyFee.zip&lt;/br&gt;&lt;/br&gt;**SA Normal:**   * FundMapping.zip  * FundProfile.zip  * FundHoliday.zip  * SwitchingMatrix.zip  * TradeCalendar.zip  * Fee.zip  * FundPerformance.zip  * AccountProfile.zip  * UnitholderMapping.zip  * BankAccountUnitholder.zip  * CustomerProfile.zip  * Nav.zip  * UnitholderBalance.zip  * AllottedTransactions.zip  * LtfBalance.zip  * DividendNews.zip  * DividendTransactions.zip  * ConfirmationNote.zip  * ConfirmationNoteTxt.zip  * MonthlyStatement.zip  * MonthlyStatementTxt.zip  * WithholdingTax.zip  * WithholdingTaxTxt.zip  * SuspendUnitholder.zip  * Pnd2.zip  * Pnd2A.zip  * Pnd53.zip  * FinNetBankMapping.zip  * UnitholderBalanceOffshore.zip  * AllottedTransactionsOffshore.zip  * SidePocket.zip  **SA Passthrough:**   * FundMapping.zip  * FundProfile.zip  * FundHoliday.zip  * SwitchingMatrix.zip  * TradeCalendar.zip  * Fee.zip  * FundPerformance.zip  * Nav.zip  * AllottedTransactions.zip  * UnitholderBalance.zip  * LtfBalance.zip  * DividendNews.zip  * DividendTransactions.zip  * SuspendUnitholder.zip  * AssignUnitholderId.zip  * SidePocket.zip   **Custodian:**   * AllottedTransactions.zip  * OrderTransactions.zip  * Nav.zip  * FundMapping.zip  * DividendTransactions.zip  * UnitholderBalance.zip  *  SidePocket.zip</param>
        /// <param name="part">Only fileType &#x3D; Attachment (optional)</param>
        /// <param name="varVersion">**FileType &#x3D; PaidTransactions** &lt;ul&gt;&lt;li&gt;1 &#x3D; batch round 11:45 am&lt;/li&gt;&lt;li&gt;2 &#x3D; batch round 12:15 pm&lt;/li&gt;&lt;li&gt;3 &#x3D; batch round 12:45 pm&lt;/li&gt;&lt;li&gt;4 &#x3D; batch round 1:15 pm&lt;/li&gt;&lt;li&gt;5 &#x3D; batch round 1:45 pm&lt;/li&gt;&lt;li&gt;6 &#x3D; batch round 2:15 pm&lt;/li&gt;&lt;li&gt;7 &#x3D; batch round 2:45 pm&lt;/li&gt;&lt;li&gt;8 &#x3D; batch round 3:15 pm&lt;/li&gt;&lt;li&gt;9 &#x3D; batch round 3:45 pm&lt;/li&gt;&lt;/ul&gt; &lt;/br&gt; **FileType &#x3D; OrderTransactions** &lt;ul&gt;&lt;li&gt;1 &#x3D; batch round 11:42 am&lt;/li&gt;&lt;li&gt;2 &#x3D; batch round 12:12 pm&lt;/li&gt;&lt;li&gt;3 &#x3D; batch round 12:42 pm&lt;/li&gt;&lt;li&gt;4 &#x3D; batch round 1:12 pm&lt;/li&gt;&lt;li&gt;5 &#x3D; batch round 1:42 pm&lt;/li&gt;&lt;li&gt;6 &#x3D; batch round 2:12 pm&lt;/li&gt;&lt;li&gt;7 &#x3D; batch round 2:42 pm&lt;/li&gt;&lt;li&gt;8 &#x3D; batch round 3:12 pm&lt;/li&gt;&lt;li&gt;9 &#x3D; batch round 3:42 pm&lt;/li&gt;&lt;li&gt;BCP&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<FileParameter> ApiFilesBusinessDateFileTypeGetWithHttpInfo(string businessDate, string fileType, int? part = default(int?), ApiFilesBusinessDateFileTypeGetVersionParameter? varVersion = default(ApiFilesBusinessDateFileTypeGetVersionParameter?))
        {
            // verify the required parameter 'businessDate' is set
            if (businessDate == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'businessDate' when calling FundConnextApi->ApiFilesBusinessDateFileTypeGet");

            // verify the required parameter 'fileType' is set
            if (fileType == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'fileType' when calling FundConnextApi->ApiFilesBusinessDateFileTypeGet");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("businessDate", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(businessDate)); // path parameter
            localVarRequestOptions.PathParameters.Add("fileType", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(fileType)); // path parameter
            if (part != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "part", part));
            }
            if (varVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "version", varVersion));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/api/files/{businessDate}/{fileType}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiFilesBusinessDateFileTypeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download files Download file by fileType and businessDate
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessDate">business date (YYYYMMDD)</param>
        /// <param name="fileType">**Master:** PostalCode.zip, BankBranch.zip, AMCCode.zip, SACode.zip, AssetAllocation.zip, TopHolding.zip, SecFundFee.zip&lt;/br&gt;&lt;/br&gt;**AMC:** PaidTransactions.zip, NewAccount.zip, Attachment.zip, AmendmentComparison.zip, EAmendmentComparison.zip, ReconcileMonthlyFee.zip&lt;/br&gt;&lt;/br&gt;**SA Normal:**   * FundMapping.zip  * FundProfile.zip  * FundHoliday.zip  * SwitchingMatrix.zip  * TradeCalendar.zip  * Fee.zip  * FundPerformance.zip  * AccountProfile.zip  * UnitholderMapping.zip  * BankAccountUnitholder.zip  * CustomerProfile.zip  * Nav.zip  * UnitholderBalance.zip  * AllottedTransactions.zip  * LtfBalance.zip  * DividendNews.zip  * DividendTransactions.zip  * ConfirmationNote.zip  * ConfirmationNoteTxt.zip  * MonthlyStatement.zip  * MonthlyStatementTxt.zip  * WithholdingTax.zip  * WithholdingTaxTxt.zip  * SuspendUnitholder.zip  * Pnd2.zip  * Pnd2A.zip  * Pnd53.zip  * FinNetBankMapping.zip  * UnitholderBalanceOffshore.zip  * AllottedTransactionsOffshore.zip  * SidePocket.zip  **SA Passthrough:**   * FundMapping.zip  * FundProfile.zip  * FundHoliday.zip  * SwitchingMatrix.zip  * TradeCalendar.zip  * Fee.zip  * FundPerformance.zip  * Nav.zip  * AllottedTransactions.zip  * UnitholderBalance.zip  * LtfBalance.zip  * DividendNews.zip  * DividendTransactions.zip  * SuspendUnitholder.zip  * AssignUnitholderId.zip  * SidePocket.zip   **Custodian:**   * AllottedTransactions.zip  * OrderTransactions.zip  * Nav.zip  * FundMapping.zip  * DividendTransactions.zip  * UnitholderBalance.zip  *  SidePocket.zip</param>
        /// <param name="part">Only fileType &#x3D; Attachment (optional)</param>
        /// <param name="varVersion">**FileType &#x3D; PaidTransactions** &lt;ul&gt;&lt;li&gt;1 &#x3D; batch round 11:45 am&lt;/li&gt;&lt;li&gt;2 &#x3D; batch round 12:15 pm&lt;/li&gt;&lt;li&gt;3 &#x3D; batch round 12:45 pm&lt;/li&gt;&lt;li&gt;4 &#x3D; batch round 1:15 pm&lt;/li&gt;&lt;li&gt;5 &#x3D; batch round 1:45 pm&lt;/li&gt;&lt;li&gt;6 &#x3D; batch round 2:15 pm&lt;/li&gt;&lt;li&gt;7 &#x3D; batch round 2:45 pm&lt;/li&gt;&lt;li&gt;8 &#x3D; batch round 3:15 pm&lt;/li&gt;&lt;li&gt;9 &#x3D; batch round 3:45 pm&lt;/li&gt;&lt;/ul&gt; &lt;/br&gt; **FileType &#x3D; OrderTransactions** &lt;ul&gt;&lt;li&gt;1 &#x3D; batch round 11:42 am&lt;/li&gt;&lt;li&gt;2 &#x3D; batch round 12:12 pm&lt;/li&gt;&lt;li&gt;3 &#x3D; batch round 12:42 pm&lt;/li&gt;&lt;li&gt;4 &#x3D; batch round 1:12 pm&lt;/li&gt;&lt;li&gt;5 &#x3D; batch round 1:42 pm&lt;/li&gt;&lt;li&gt;6 &#x3D; batch round 2:12 pm&lt;/li&gt;&lt;li&gt;7 &#x3D; batch round 2:42 pm&lt;/li&gt;&lt;li&gt;8 &#x3D; batch round 3:12 pm&lt;/li&gt;&lt;li&gt;9 &#x3D; batch round 3:42 pm&lt;/li&gt;&lt;li&gt;BCP&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> ApiFilesBusinessDateFileTypeGetAsync(string businessDate, string fileType, int? part = default(int?), ApiFilesBusinessDateFileTypeGetVersionParameter? varVersion = default(ApiFilesBusinessDateFileTypeGetVersionParameter?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<FileParameter> localVarResponse = await ApiFilesBusinessDateFileTypeGetWithHttpInfoAsync(businessDate, fileType, part, varVersion, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download files Download file by fileType and businessDate
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="businessDate">business date (YYYYMMDD)</param>
        /// <param name="fileType">**Master:** PostalCode.zip, BankBranch.zip, AMCCode.zip, SACode.zip, AssetAllocation.zip, TopHolding.zip, SecFundFee.zip&lt;/br&gt;&lt;/br&gt;**AMC:** PaidTransactions.zip, NewAccount.zip, Attachment.zip, AmendmentComparison.zip, EAmendmentComparison.zip, ReconcileMonthlyFee.zip&lt;/br&gt;&lt;/br&gt;**SA Normal:**   * FundMapping.zip  * FundProfile.zip  * FundHoliday.zip  * SwitchingMatrix.zip  * TradeCalendar.zip  * Fee.zip  * FundPerformance.zip  * AccountProfile.zip  * UnitholderMapping.zip  * BankAccountUnitholder.zip  * CustomerProfile.zip  * Nav.zip  * UnitholderBalance.zip  * AllottedTransactions.zip  * LtfBalance.zip  * DividendNews.zip  * DividendTransactions.zip  * ConfirmationNote.zip  * ConfirmationNoteTxt.zip  * MonthlyStatement.zip  * MonthlyStatementTxt.zip  * WithholdingTax.zip  * WithholdingTaxTxt.zip  * SuspendUnitholder.zip  * Pnd2.zip  * Pnd2A.zip  * Pnd53.zip  * FinNetBankMapping.zip  * UnitholderBalanceOffshore.zip  * AllottedTransactionsOffshore.zip  * SidePocket.zip  **SA Passthrough:**   * FundMapping.zip  * FundProfile.zip  * FundHoliday.zip  * SwitchingMatrix.zip  * TradeCalendar.zip  * Fee.zip  * FundPerformance.zip  * Nav.zip  * AllottedTransactions.zip  * UnitholderBalance.zip  * LtfBalance.zip  * DividendNews.zip  * DividendTransactions.zip  * SuspendUnitholder.zip  * AssignUnitholderId.zip  * SidePocket.zip   **Custodian:**   * AllottedTransactions.zip  * OrderTransactions.zip  * Nav.zip  * FundMapping.zip  * DividendTransactions.zip  * UnitholderBalance.zip  *  SidePocket.zip</param>
        /// <param name="part">Only fileType &#x3D; Attachment (optional)</param>
        /// <param name="varVersion">**FileType &#x3D; PaidTransactions** &lt;ul&gt;&lt;li&gt;1 &#x3D; batch round 11:45 am&lt;/li&gt;&lt;li&gt;2 &#x3D; batch round 12:15 pm&lt;/li&gt;&lt;li&gt;3 &#x3D; batch round 12:45 pm&lt;/li&gt;&lt;li&gt;4 &#x3D; batch round 1:15 pm&lt;/li&gt;&lt;li&gt;5 &#x3D; batch round 1:45 pm&lt;/li&gt;&lt;li&gt;6 &#x3D; batch round 2:15 pm&lt;/li&gt;&lt;li&gt;7 &#x3D; batch round 2:45 pm&lt;/li&gt;&lt;li&gt;8 &#x3D; batch round 3:15 pm&lt;/li&gt;&lt;li&gt;9 &#x3D; batch round 3:45 pm&lt;/li&gt;&lt;/ul&gt; &lt;/br&gt; **FileType &#x3D; OrderTransactions** &lt;ul&gt;&lt;li&gt;1 &#x3D; batch round 11:42 am&lt;/li&gt;&lt;li&gt;2 &#x3D; batch round 12:12 pm&lt;/li&gt;&lt;li&gt;3 &#x3D; batch round 12:42 pm&lt;/li&gt;&lt;li&gt;4 &#x3D; batch round 1:12 pm&lt;/li&gt;&lt;li&gt;5 &#x3D; batch round 1:42 pm&lt;/li&gt;&lt;li&gt;6 &#x3D; batch round 2:12 pm&lt;/li&gt;&lt;li&gt;7 &#x3D; batch round 2:42 pm&lt;/li&gt;&lt;li&gt;8 &#x3D; batch round 3:12 pm&lt;/li&gt;&lt;li&gt;9 &#x3D; batch round 3:42 pm&lt;/li&gt;&lt;li&gt;BCP&lt;/li&gt;&lt;/ul&gt; (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<FileParameter>> ApiFilesBusinessDateFileTypeGetWithHttpInfoAsync(string businessDate, string fileType, int? part = default(int?), ApiFilesBusinessDateFileTypeGetVersionParameter? varVersion = default(ApiFilesBusinessDateFileTypeGetVersionParameter?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'businessDate' is set
            if (businessDate == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'businessDate' when calling FundConnextApi->ApiFilesBusinessDateFileTypeGet");

            // verify the required parameter 'fileType' is set
            if (fileType == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'fileType' when calling FundConnextApi->ApiFilesBusinessDateFileTypeGet");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("businessDate", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(businessDate)); // path parameter
            localVarRequestOptions.PathParameters.Add("fileType", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(fileType)); // path parameter
            if (part != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "part", part));
            }
            if (varVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "version", varVersion));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/api/files/{businessDate}/{fileType}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiFilesBusinessDateFileTypeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// API Get QR by transactionCode API Get QR by transactionCode
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <returns>ApiFundOrdersQrTransactionIdGet200Response</returns>
        public ApiFundOrdersQrTransactionIdGet200Response ApiFundOrdersQrTransactionIdGet(string transactionId)
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiFundOrdersQrTransactionIdGet200Response> localVarResponse = ApiFundOrdersQrTransactionIdGetWithHttpInfo(transactionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// API Get QR by transactionCode API Get QR by transactionCode
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <returns>ApiResponse of ApiFundOrdersQrTransactionIdGet200Response</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiFundOrdersQrTransactionIdGet200Response> ApiFundOrdersQrTransactionIdGetWithHttpInfo(string transactionId)
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'transactionId' when calling FundConnextApi->ApiFundOrdersQrTransactionIdGet");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("transactionId", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(transactionId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiFundOrdersQrTransactionIdGet200Response>("/api/fundOrders/qr/{transactionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiFundOrdersQrTransactionIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// API Get QR by transactionCode API Get QR by transactionCode
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiFundOrdersQrTransactionIdGet200Response</returns>
        public async System.Threading.Tasks.Task<ApiFundOrdersQrTransactionIdGet200Response> ApiFundOrdersQrTransactionIdGetAsync(string transactionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiFundOrdersQrTransactionIdGet200Response> localVarResponse = await ApiFundOrdersQrTransactionIdGetWithHttpInfoAsync(transactionId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// API Get QR by transactionCode API Get QR by transactionCode
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiFundOrdersQrTransactionIdGet200Response)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiFundOrdersQrTransactionIdGet200Response>> ApiFundOrdersQrTransactionIdGetWithHttpInfoAsync(string transactionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'transactionId' when calling FundConnextApi->ApiFundOrdersQrTransactionIdGet");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("transactionId", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(transactionId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiFundOrdersQrTransactionIdGet200Response>("/api/fundOrders/qr/{transactionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiFundOrdersQrTransactionIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get orders by saOrderReferenceNo Get orders by saOrderReferenceNo 
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="saOrderReferenceNo"></param>
        /// <returns>ApiAccountFundOrdersGet200Response</returns>
        public ApiAccountFundOrdersGet200Response ApiFundOrdersSaOrderReferenceNoGet(string xAuthToken, string saOrderReferenceNo)
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiAccountFundOrdersGet200Response> localVarResponse = ApiFundOrdersSaOrderReferenceNoGetWithHttpInfo(xAuthToken, saOrderReferenceNo);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get orders by saOrderReferenceNo Get orders by saOrderReferenceNo 
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="saOrderReferenceNo"></param>
        /// <returns>ApiResponse of ApiAccountFundOrdersGet200Response</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiAccountFundOrdersGet200Response> ApiFundOrdersSaOrderReferenceNoGetWithHttpInfo(string xAuthToken, string saOrderReferenceNo)
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiFundOrdersSaOrderReferenceNoGet");

            // verify the required parameter 'saOrderReferenceNo' is set
            if (saOrderReferenceNo == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'saOrderReferenceNo' when calling FundConnextApi->ApiFundOrdersSaOrderReferenceNoGet");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "saOrderReferenceNo", saOrderReferenceNo));
            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiAccountFundOrdersGet200Response>("/api/fundOrders/saOrderReferenceNo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiFundOrdersSaOrderReferenceNoGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get orders by saOrderReferenceNo Get orders by saOrderReferenceNo 
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="saOrderReferenceNo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiAccountFundOrdersGet200Response</returns>
        public async System.Threading.Tasks.Task<ApiAccountFundOrdersGet200Response> ApiFundOrdersSaOrderReferenceNoGetAsync(string xAuthToken, string saOrderReferenceNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiAccountFundOrdersGet200Response> localVarResponse = await ApiFundOrdersSaOrderReferenceNoGetWithHttpInfoAsync(xAuthToken, saOrderReferenceNo, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get orders by saOrderReferenceNo Get orders by saOrderReferenceNo 
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="saOrderReferenceNo"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiAccountFundOrdersGet200Response)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiAccountFundOrdersGet200Response>> ApiFundOrdersSaOrderReferenceNoGetWithHttpInfoAsync(string xAuthToken, string saOrderReferenceNo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiFundOrdersSaOrderReferenceNoGet");

            // verify the required parameter 'saOrderReferenceNo' is set
            if (saOrderReferenceNo == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'saOrderReferenceNo' when calling FundConnextApi->ApiFundOrdersSaOrderReferenceNoGet");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "saOrderReferenceNo", saOrderReferenceNo));
            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiAccountFundOrdersGet200Response>("/api/fundOrders/saOrderReferenceNo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiFundOrdersSaOrderReferenceNoGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// API Order Inquiry Version 2 API Order Inquiry Version 2
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="effectiveDate">Format: YYYYMMDD (Mandatory กรณีไม่ใส่ transactionId และ xwtOrderReferenceNo) (optional)</param>
        /// <param name="transactionId">(Mandatory กรณีไม่ใส่ effectiveDate และ xwtOrderReferenceNo) (optional)</param>
        /// <param name="xwtOrderReferenceNo">(Mandatory กรณีไม่ใส่ effectiveDate และ transactionId) (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="channel"> (optional)</param>
        /// <param name="recurringFlag"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>ApiAccountFundOrdersV2Get200Response</returns>
        public ApiAccountFundOrdersV2Get200Response ApiFundOrdersV2Get(string xAuthToken, string? effectiveDate = default(string?), string? transactionId = default(string?), string? xwtOrderReferenceNo = default(string?), string? status = default(string?), string? channel = default(string?), string? recurringFlag = default(string?), string? page = default(string?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiAccountFundOrdersV2Get200Response> localVarResponse = ApiFundOrdersV2GetWithHttpInfo(xAuthToken, effectiveDate, transactionId, xwtOrderReferenceNo, status, channel, recurringFlag, page);
            return localVarResponse.Data;
        }

        /// <summary>
        /// API Order Inquiry Version 2 API Order Inquiry Version 2
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="effectiveDate">Format: YYYYMMDD (Mandatory กรณีไม่ใส่ transactionId และ xwtOrderReferenceNo) (optional)</param>
        /// <param name="transactionId">(Mandatory กรณีไม่ใส่ effectiveDate และ xwtOrderReferenceNo) (optional)</param>
        /// <param name="xwtOrderReferenceNo">(Mandatory กรณีไม่ใส่ effectiveDate และ transactionId) (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="channel"> (optional)</param>
        /// <param name="recurringFlag"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <returns>ApiResponse of ApiAccountFundOrdersV2Get200Response</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiAccountFundOrdersV2Get200Response> ApiFundOrdersV2GetWithHttpInfo(string xAuthToken, string? effectiveDate = default(string?), string? transactionId = default(string?), string? xwtOrderReferenceNo = default(string?), string? status = default(string?), string? channel = default(string?), string? recurringFlag = default(string?), string? page = default(string?))
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiFundOrdersV2Get");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (effectiveDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "effectiveDate", effectiveDate));
            }
            if (transactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "transactionId", transactionId));
            }
            if (xwtOrderReferenceNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "xwtOrderReferenceNo", xwtOrderReferenceNo));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }
            if (recurringFlag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "recurringFlag", recurringFlag));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiAccountFundOrdersV2Get200Response>("/api/fundOrders/v2", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiFundOrdersV2Get", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// API Order Inquiry Version 2 API Order Inquiry Version 2
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="effectiveDate">Format: YYYYMMDD (Mandatory กรณีไม่ใส่ transactionId และ xwtOrderReferenceNo) (optional)</param>
        /// <param name="transactionId">(Mandatory กรณีไม่ใส่ effectiveDate และ xwtOrderReferenceNo) (optional)</param>
        /// <param name="xwtOrderReferenceNo">(Mandatory กรณีไม่ใส่ effectiveDate และ transactionId) (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="channel"> (optional)</param>
        /// <param name="recurringFlag"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiAccountFundOrdersV2Get200Response</returns>
        public async System.Threading.Tasks.Task<ApiAccountFundOrdersV2Get200Response> ApiFundOrdersV2GetAsync(string xAuthToken, string? effectiveDate = default(string?), string? transactionId = default(string?), string? xwtOrderReferenceNo = default(string?), string? status = default(string?), string? channel = default(string?), string? recurringFlag = default(string?), string? page = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiAccountFundOrdersV2Get200Response> localVarResponse = await ApiFundOrdersV2GetWithHttpInfoAsync(xAuthToken, effectiveDate, transactionId, xwtOrderReferenceNo, status, channel, recurringFlag, page, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// API Order Inquiry Version 2 API Order Inquiry Version 2
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="effectiveDate">Format: YYYYMMDD (Mandatory กรณีไม่ใส่ transactionId และ xwtOrderReferenceNo) (optional)</param>
        /// <param name="transactionId">(Mandatory กรณีไม่ใส่ effectiveDate และ xwtOrderReferenceNo) (optional)</param>
        /// <param name="xwtOrderReferenceNo">(Mandatory กรณีไม่ใส่ effectiveDate และ transactionId) (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="channel"> (optional)</param>
        /// <param name="recurringFlag"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiAccountFundOrdersV2Get200Response)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiAccountFundOrdersV2Get200Response>> ApiFundOrdersV2GetWithHttpInfoAsync(string xAuthToken, string? effectiveDate = default(string?), string? transactionId = default(string?), string? xwtOrderReferenceNo = default(string?), string? status = default(string?), string? channel = default(string?), string? recurringFlag = default(string?), string? page = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiFundOrdersV2Get");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (effectiveDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "effectiveDate", effectiveDate));
            }
            if (transactionId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "transactionId", transactionId));
            }
            if (xwtOrderReferenceNo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "xwtOrderReferenceNo", xwtOrderReferenceNo));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (channel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "channel", channel));
            }
            if (recurringFlag != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "recurringFlag", recurringFlag));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiAccountFundOrdersV2Get200Response>("/api/fundOrders/v2", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiFundOrdersV2Get", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download news file Download news file
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkFileId">Link file ID to get the file</param>
        /// <returns>FileParameter</returns>
        public FileParameter ApiNewsDownloadLinkFileIdGet(string linkFileId)
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<FileParameter> localVarResponse = ApiNewsDownloadLinkFileIdGetWithHttpInfo(linkFileId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download news file Download news file
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkFileId">Link file ID to get the file</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<FileParameter> ApiNewsDownloadLinkFileIdGetWithHttpInfo(string linkFileId)
        {
            // verify the required parameter 'linkFileId' is set
            if (linkFileId == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'linkFileId' when calling FundConnextApi->ApiNewsDownloadLinkFileIdGet");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("linkFileId", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(linkFileId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/api/news/download/{linkFileId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiNewsDownloadLinkFileIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download news file Download news file
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkFileId">Link file ID to get the file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> ApiNewsDownloadLinkFileIdGetAsync(string linkFileId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<FileParameter> localVarResponse = await ApiNewsDownloadLinkFileIdGetWithHttpInfoAsync(linkFileId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download news file Download news file
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="linkFileId">Link file ID to get the file</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<FileParameter>> ApiNewsDownloadLinkFileIdGetWithHttpInfoAsync(string linkFileId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'linkFileId' is set
            if (linkFileId == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'linkFileId' when calling FundConnextApi->ApiNewsDownloadLinkFileIdGet");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("linkFileId", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(linkFileId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/api/news/download/{linkFileId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiNewsDownloadLinkFileIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create offshore subscription order Create new offshore redemption order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreRedemptionsPostRequest">Example request body for creating offshore redemption (optional)</param>
        /// <returns>ApiOffshoreRedemptionsPost200Response</returns>
        public ApiOffshoreRedemptionsPost200Response ApiOffshoreRedemptionsPost(ApiOffshoreRedemptionsPostRequest? apiOffshoreRedemptionsPostRequest = default(ApiOffshoreRedemptionsPostRequest?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiOffshoreRedemptionsPost200Response> localVarResponse = ApiOffshoreRedemptionsPostWithHttpInfo(apiOffshoreRedemptionsPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create offshore subscription order Create new offshore redemption order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreRedemptionsPostRequest">Example request body for creating offshore redemption (optional)</param>
        /// <returns>ApiResponse of ApiOffshoreRedemptionsPost200Response</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiOffshoreRedemptionsPost200Response> ApiOffshoreRedemptionsPostWithHttpInfo(ApiOffshoreRedemptionsPostRequest? apiOffshoreRedemptionsPostRequest = default(ApiOffshoreRedemptionsPostRequest?))
        {
            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = apiOffshoreRedemptionsPostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiOffshoreRedemptionsPost200Response>("/api/offshore/redemptions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOffshoreRedemptionsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create offshore subscription order Create new offshore redemption order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreRedemptionsPostRequest">Example request body for creating offshore redemption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiOffshoreRedemptionsPost200Response</returns>
        public async System.Threading.Tasks.Task<ApiOffshoreRedemptionsPost200Response> ApiOffshoreRedemptionsPostAsync(ApiOffshoreRedemptionsPostRequest? apiOffshoreRedemptionsPostRequest = default(ApiOffshoreRedemptionsPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiOffshoreRedemptionsPost200Response> localVarResponse = await ApiOffshoreRedemptionsPostWithHttpInfoAsync(apiOffshoreRedemptionsPostRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create offshore subscription order Create new offshore redemption order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreRedemptionsPostRequest">Example request body for creating offshore redemption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiOffshoreRedemptionsPost200Response)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiOffshoreRedemptionsPost200Response>> ApiOffshoreRedemptionsPostWithHttpInfoAsync(ApiOffshoreRedemptionsPostRequest? apiOffshoreRedemptionsPostRequest = default(ApiOffshoreRedemptionsPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = apiOffshoreRedemptionsPostRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiOffshoreRedemptionsPost200Response>("/api/offshore/redemptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOffshoreRedemptionsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Approve offshore redemption order Approve offshore redemption order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiOffshoreRedemptionsTransactionIdPatchRequest">Example request body for approve api offshore redemption (optional)</param>
        /// <returns></returns>
        public void ApiOffshoreRedemptionsTransactionIdPatch(string transactionId, ApiOffshoreRedemptionsTransactionIdPatchRequest? apiOffshoreRedemptionsTransactionIdPatchRequest = default(ApiOffshoreRedemptionsTransactionIdPatchRequest?))
        {
            ApiOffshoreRedemptionsTransactionIdPatchWithHttpInfo(transactionId, apiOffshoreRedemptionsTransactionIdPatchRequest);
        }

        /// <summary>
        /// Approve offshore redemption order Approve offshore redemption order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiOffshoreRedemptionsTransactionIdPatchRequest">Example request body for approve api offshore redemption (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<Object> ApiOffshoreRedemptionsTransactionIdPatchWithHttpInfo(string transactionId, ApiOffshoreRedemptionsTransactionIdPatchRequest? apiOffshoreRedemptionsTransactionIdPatchRequest = default(ApiOffshoreRedemptionsTransactionIdPatchRequest?))
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'transactionId' when calling FundConnextApi->ApiOffshoreRedemptionsTransactionIdPatch");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("transactionId", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(transactionId)); // path parameter
            localVarRequestOptions.Data = apiOffshoreRedemptionsTransactionIdPatchRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/api/offshore/redemptions/{transactionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOffshoreRedemptionsTransactionIdPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Approve offshore redemption order Approve offshore redemption order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiOffshoreRedemptionsTransactionIdPatchRequest">Example request body for approve api offshore redemption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiOffshoreRedemptionsTransactionIdPatchAsync(string transactionId, ApiOffshoreRedemptionsTransactionIdPatchRequest? apiOffshoreRedemptionsTransactionIdPatchRequest = default(ApiOffshoreRedemptionsTransactionIdPatchRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiOffshoreRedemptionsTransactionIdPatchWithHttpInfoAsync(transactionId, apiOffshoreRedemptionsTransactionIdPatchRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Approve offshore redemption order Approve offshore redemption order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiOffshoreRedemptionsTransactionIdPatchRequest">Example request body for approve api offshore redemption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<Object>> ApiOffshoreRedemptionsTransactionIdPatchWithHttpInfoAsync(string transactionId, ApiOffshoreRedemptionsTransactionIdPatchRequest? apiOffshoreRedemptionsTransactionIdPatchRequest = default(ApiOffshoreRedemptionsTransactionIdPatchRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'transactionId' when calling FundConnextApi->ApiOffshoreRedemptionsTransactionIdPatch");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("transactionId", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(transactionId)); // path parameter
            localVarRequestOptions.Data = apiOffshoreRedemptionsTransactionIdPatchRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/api/offshore/redemptions/{transactionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOffshoreRedemptionsTransactionIdPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create offshore subscription order Create new offshore subscription order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreSubscriptionsPostRequest">Example request body for creating offshore subscription (optional)</param>
        /// <returns>ApiCrossAmcSwitchingPost200Response</returns>
        public ApiCrossAmcSwitchingPost200Response ApiOffshoreSubscriptionsPost(ApiOffshoreSubscriptionsPostRequest? apiOffshoreSubscriptionsPostRequest = default(ApiOffshoreSubscriptionsPostRequest?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiCrossAmcSwitchingPost200Response> localVarResponse = ApiOffshoreSubscriptionsPostWithHttpInfo(apiOffshoreSubscriptionsPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create offshore subscription order Create new offshore subscription order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreSubscriptionsPostRequest">Example request body for creating offshore subscription (optional)</param>
        /// <returns>ApiResponse of ApiCrossAmcSwitchingPost200Response</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiCrossAmcSwitchingPost200Response> ApiOffshoreSubscriptionsPostWithHttpInfo(ApiOffshoreSubscriptionsPostRequest? apiOffshoreSubscriptionsPostRequest = default(ApiOffshoreSubscriptionsPostRequest?))
        {
            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = apiOffshoreSubscriptionsPostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiCrossAmcSwitchingPost200Response>("/api/offshore/subscriptions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOffshoreSubscriptionsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create offshore subscription order Create new offshore subscription order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreSubscriptionsPostRequest">Example request body for creating offshore subscription (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiCrossAmcSwitchingPost200Response</returns>
        public async System.Threading.Tasks.Task<ApiCrossAmcSwitchingPost200Response> ApiOffshoreSubscriptionsPostAsync(ApiOffshoreSubscriptionsPostRequest? apiOffshoreSubscriptionsPostRequest = default(ApiOffshoreSubscriptionsPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiCrossAmcSwitchingPost200Response> localVarResponse = await ApiOffshoreSubscriptionsPostWithHttpInfoAsync(apiOffshoreSubscriptionsPostRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create offshore subscription order Create new offshore subscription order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreSubscriptionsPostRequest">Example request body for creating offshore subscription (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiCrossAmcSwitchingPost200Response)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiCrossAmcSwitchingPost200Response>> ApiOffshoreSubscriptionsPostWithHttpInfoAsync(ApiOffshoreSubscriptionsPostRequest? apiOffshoreSubscriptionsPostRequest = default(ApiOffshoreSubscriptionsPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = apiOffshoreSubscriptionsPostRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiCrossAmcSwitchingPost200Response>("/api/offshore/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOffshoreSubscriptionsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Approve offshore subscription order Approve offshore subscription order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiOffshoreRedemptionsTransactionIdPatchRequest">Example request body for approve api offshore subscription (optional)</param>
        /// <returns></returns>
        public void ApiOffshoreSubscriptionsTransactionIdPatch(string transactionId, ApiOffshoreRedemptionsTransactionIdPatchRequest? apiOffshoreRedemptionsTransactionIdPatchRequest = default(ApiOffshoreRedemptionsTransactionIdPatchRequest?))
        {
            ApiOffshoreSubscriptionsTransactionIdPatchWithHttpInfo(transactionId, apiOffshoreRedemptionsTransactionIdPatchRequest);
        }

        /// <summary>
        /// Approve offshore subscription order Approve offshore subscription order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiOffshoreRedemptionsTransactionIdPatchRequest">Example request body for approve api offshore subscription (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<Object> ApiOffshoreSubscriptionsTransactionIdPatchWithHttpInfo(string transactionId, ApiOffshoreRedemptionsTransactionIdPatchRequest? apiOffshoreRedemptionsTransactionIdPatchRequest = default(ApiOffshoreRedemptionsTransactionIdPatchRequest?))
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'transactionId' when calling FundConnextApi->ApiOffshoreSubscriptionsTransactionIdPatch");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("transactionId", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(transactionId)); // path parameter
            localVarRequestOptions.Data = apiOffshoreRedemptionsTransactionIdPatchRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/api/offshore/subscriptions/{transactionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOffshoreSubscriptionsTransactionIdPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Approve offshore subscription order Approve offshore subscription order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiOffshoreRedemptionsTransactionIdPatchRequest">Example request body for approve api offshore subscription (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiOffshoreSubscriptionsTransactionIdPatchAsync(string transactionId, ApiOffshoreRedemptionsTransactionIdPatchRequest? apiOffshoreRedemptionsTransactionIdPatchRequest = default(ApiOffshoreRedemptionsTransactionIdPatchRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiOffshoreSubscriptionsTransactionIdPatchWithHttpInfoAsync(transactionId, apiOffshoreRedemptionsTransactionIdPatchRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Approve offshore subscription order Approve offshore subscription order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiOffshoreRedemptionsTransactionIdPatchRequest">Example request body for approve api offshore subscription (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<Object>> ApiOffshoreSubscriptionsTransactionIdPatchWithHttpInfoAsync(string transactionId, ApiOffshoreRedemptionsTransactionIdPatchRequest? apiOffshoreRedemptionsTransactionIdPatchRequest = default(ApiOffshoreRedemptionsTransactionIdPatchRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'transactionId' when calling FundConnextApi->ApiOffshoreSubscriptionsTransactionIdPatch");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("transactionId", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(transactionId)); // path parameter
            localVarRequestOptions.Data = apiOffshoreRedemptionsTransactionIdPatchRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/api/offshore/subscriptions/{transactionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOffshoreSubscriptionsTransactionIdPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Offshore Switching Create new offshore switching order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreSwitchingsPostRequest">Example request body for creating offshore switching (optional)</param>
        /// <returns>ApiCrossAmcSwitchingPost200Response</returns>
        public ApiCrossAmcSwitchingPost200Response ApiOffshoreSwitchingsPost(ApiOffshoreSwitchingsPostRequest? apiOffshoreSwitchingsPostRequest = default(ApiOffshoreSwitchingsPostRequest?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiCrossAmcSwitchingPost200Response> localVarResponse = ApiOffshoreSwitchingsPostWithHttpInfo(apiOffshoreSwitchingsPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Offshore Switching Create new offshore switching order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreSwitchingsPostRequest">Example request body for creating offshore switching (optional)</param>
        /// <returns>ApiResponse of ApiCrossAmcSwitchingPost200Response</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiCrossAmcSwitchingPost200Response> ApiOffshoreSwitchingsPostWithHttpInfo(ApiOffshoreSwitchingsPostRequest? apiOffshoreSwitchingsPostRequest = default(ApiOffshoreSwitchingsPostRequest?))
        {
            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = apiOffshoreSwitchingsPostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiCrossAmcSwitchingPost200Response>("/api/offshore/switchings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOffshoreSwitchingsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Offshore Switching Create new offshore switching order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreSwitchingsPostRequest">Example request body for creating offshore switching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiCrossAmcSwitchingPost200Response</returns>
        public async System.Threading.Tasks.Task<ApiCrossAmcSwitchingPost200Response> ApiOffshoreSwitchingsPostAsync(ApiOffshoreSwitchingsPostRequest? apiOffshoreSwitchingsPostRequest = default(ApiOffshoreSwitchingsPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiCrossAmcSwitchingPost200Response> localVarResponse = await ApiOffshoreSwitchingsPostWithHttpInfoAsync(apiOffshoreSwitchingsPostRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Offshore Switching Create new offshore switching order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiOffshoreSwitchingsPostRequest">Example request body for creating offshore switching (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiCrossAmcSwitchingPost200Response)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiCrossAmcSwitchingPost200Response>> ApiOffshoreSwitchingsPostWithHttpInfoAsync(ApiOffshoreSwitchingsPostRequest? apiOffshoreSwitchingsPostRequest = default(ApiOffshoreSwitchingsPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = apiOffshoreSwitchingsPostRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiCrossAmcSwitchingPost200Response>("/api/offshore/switchings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiOffshoreSwitchingsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create redemptions order Create new redemption order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiRedemptionsPostRequest">Example request body for creating redemption (optional)</param>
        /// <returns>ApiOffshoreRedemptionsPost200Response</returns>
        public ApiOffshoreRedemptionsPost200Response ApiRedemptionsPost(string xAuthToken, ApiRedemptionsPostRequest? apiRedemptionsPostRequest = default(ApiRedemptionsPostRequest?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiOffshoreRedemptionsPost200Response> localVarResponse = ApiRedemptionsPostWithHttpInfo(xAuthToken, apiRedemptionsPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create redemptions order Create new redemption order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiRedemptionsPostRequest">Example request body for creating redemption (optional)</param>
        /// <returns>ApiResponse of ApiOffshoreRedemptionsPost200Response</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiOffshoreRedemptionsPost200Response> ApiRedemptionsPostWithHttpInfo(string xAuthToken, ApiRedemptionsPostRequest? apiRedemptionsPostRequest = default(ApiRedemptionsPostRequest?))
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiRedemptionsPost");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            localVarRequestOptions.Data = apiRedemptionsPostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiOffshoreRedemptionsPost200Response>("/api/redemptions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRedemptionsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create redemptions order Create new redemption order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiRedemptionsPostRequest">Example request body for creating redemption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiOffshoreRedemptionsPost200Response</returns>
        public async System.Threading.Tasks.Task<ApiOffshoreRedemptionsPost200Response> ApiRedemptionsPostAsync(string xAuthToken, ApiRedemptionsPostRequest? apiRedemptionsPostRequest = default(ApiRedemptionsPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiOffshoreRedemptionsPost200Response> localVarResponse = await ApiRedemptionsPostWithHttpInfoAsync(xAuthToken, apiRedemptionsPostRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create redemptions order Create new redemption order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiRedemptionsPostRequest">Example request body for creating redemption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiOffshoreRedemptionsPost200Response)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiOffshoreRedemptionsPost200Response>> ApiRedemptionsPostWithHttpInfoAsync(string xAuthToken, ApiRedemptionsPostRequest? apiRedemptionsPostRequest = default(ApiRedemptionsPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiRedemptionsPost");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            localVarRequestOptions.Data = apiRedemptionsPostRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiOffshoreRedemptionsPost200Response>("/api/redemptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRedemptionsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel redemption order Cancel redemption order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api redemption (optional)</param>
        /// <returns>ApiSubscriptionsTransactionIdDelete200Response</returns>
        public ApiSubscriptionsTransactionIdDelete200Response ApiRedemptionsTransactionIdDelete(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsTransactionIdDelete200Response> localVarResponse = ApiRedemptionsTransactionIdDeleteWithHttpInfo(xAuthToken, transactionId, apiSubscriptionsTransactionIdDeleteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel redemption order Cancel redemption order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api redemption (optional)</param>
        /// <returns>ApiResponse of ApiSubscriptionsTransactionIdDelete200Response</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsTransactionIdDelete200Response> ApiRedemptionsTransactionIdDeleteWithHttpInfo(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?))
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiRedemptionsTransactionIdDelete");

            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'transactionId' when calling FundConnextApi->ApiRedemptionsTransactionIdDelete");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("transactionId", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(transactionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            localVarRequestOptions.Data = apiSubscriptionsTransactionIdDeleteRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiSubscriptionsTransactionIdDelete200Response>("/api/redemptions/{transactionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRedemptionsTransactionIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel redemption order Cancel redemption order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api redemption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiSubscriptionsTransactionIdDelete200Response</returns>
        public async System.Threading.Tasks.Task<ApiSubscriptionsTransactionIdDelete200Response> ApiRedemptionsTransactionIdDeleteAsync(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsTransactionIdDelete200Response> localVarResponse = await ApiRedemptionsTransactionIdDeleteWithHttpInfoAsync(xAuthToken, transactionId, apiSubscriptionsTransactionIdDeleteRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel redemption order Cancel redemption order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api redemption (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiSubscriptionsTransactionIdDelete200Response)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsTransactionIdDelete200Response>> ApiRedemptionsTransactionIdDeleteWithHttpInfoAsync(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiRedemptionsTransactionIdDelete");

            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'transactionId' when calling FundConnextApi->ApiRedemptionsTransactionIdDelete");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("transactionId", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(transactionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            localVarRequestOptions.Data = apiSubscriptionsTransactionIdDeleteRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiSubscriptionsTransactionIdDelete200Response>("/api/redemptions/{transactionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRedemptionsTransactionIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deregister for notification callback Deregister for notification callback
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiSaNotificationDeregisterPostRequest">Example of a request body for a deregister for notification callback. (optional)</param>
        /// <returns></returns>
        public void ApiSaNotificationDeregisterPost(ApiSaNotificationDeregisterPostRequest? apiSaNotificationDeregisterPostRequest = default(ApiSaNotificationDeregisterPostRequest?))
        {
            ApiSaNotificationDeregisterPostWithHttpInfo(apiSaNotificationDeregisterPostRequest);
        }

        /// <summary>
        /// Deregister for notification callback Deregister for notification callback
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiSaNotificationDeregisterPostRequest">Example of a request body for a deregister for notification callback. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<Object> ApiSaNotificationDeregisterPostWithHttpInfo(ApiSaNotificationDeregisterPostRequest? apiSaNotificationDeregisterPostRequest = default(ApiSaNotificationDeregisterPostRequest?))
        {
            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = apiSaNotificationDeregisterPostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/sa/notification/deregister", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSaNotificationDeregisterPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deregister for notification callback Deregister for notification callback
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiSaNotificationDeregisterPostRequest">Example of a request body for a deregister for notification callback. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSaNotificationDeregisterPostAsync(ApiSaNotificationDeregisterPostRequest? apiSaNotificationDeregisterPostRequest = default(ApiSaNotificationDeregisterPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSaNotificationDeregisterPostWithHttpInfoAsync(apiSaNotificationDeregisterPostRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deregister for notification callback Deregister for notification callback
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiSaNotificationDeregisterPostRequest">Example of a request body for a deregister for notification callback. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<Object>> ApiSaNotificationDeregisterPostWithHttpInfoAsync(ApiSaNotificationDeregisterPostRequest? apiSaNotificationDeregisterPostRequest = default(ApiSaNotificationDeregisterPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = apiSaNotificationDeregisterPostRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/sa/notification/deregister", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSaNotificationDeregisterPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register for notification callback Register URL and token key for notification callback (all configuration will expire by 02:50 AM by FundConnext)
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiSaNotificationRegisterPostRequest">Example of a request body for a register for notification callback. (optional)</param>
        /// <returns></returns>
        public void ApiSaNotificationRegisterPost(ApiSaNotificationRegisterPostRequest? apiSaNotificationRegisterPostRequest = default(ApiSaNotificationRegisterPostRequest?))
        {
            ApiSaNotificationRegisterPostWithHttpInfo(apiSaNotificationRegisterPostRequest);
        }

        /// <summary>
        /// Register for notification callback Register URL and token key for notification callback (all configuration will expire by 02:50 AM by FundConnext)
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiSaNotificationRegisterPostRequest">Example of a request body for a register for notification callback. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<Object> ApiSaNotificationRegisterPostWithHttpInfo(ApiSaNotificationRegisterPostRequest? apiSaNotificationRegisterPostRequest = default(ApiSaNotificationRegisterPostRequest?))
        {
            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = apiSaNotificationRegisterPostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/sa/notification/register", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSaNotificationRegisterPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Register for notification callback Register URL and token key for notification callback (all configuration will expire by 02:50 AM by FundConnext)
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiSaNotificationRegisterPostRequest">Example of a request body for a register for notification callback. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSaNotificationRegisterPostAsync(ApiSaNotificationRegisterPostRequest? apiSaNotificationRegisterPostRequest = default(ApiSaNotificationRegisterPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSaNotificationRegisterPostWithHttpInfoAsync(apiSaNotificationRegisterPostRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Register for notification callback Register URL and token key for notification callback (all configuration will expire by 02:50 AM by FundConnext)
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiSaNotificationRegisterPostRequest">Example of a request body for a register for notification callback. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<Object>> ApiSaNotificationRegisterPostWithHttpInfoAsync(ApiSaNotificationRegisterPostRequest? apiSaNotificationRegisterPostRequest = default(ApiSaNotificationRegisterPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = apiSaNotificationRegisterPostRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/sa/notification/register", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSaNotificationRegisterPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// SA upload file investment consultant The file in zip format. 
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns></returns>
        public void ApiSaUploadInvestmentConsultantPost(FileParameter? file = default(FileParameter?))
        {
            ApiSaUploadInvestmentConsultantPostWithHttpInfo(file);
        }

        /// <summary>
        /// SA upload file investment consultant The file in zip format. 
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<Object> ApiSaUploadInvestmentConsultantPostWithHttpInfo(FileParameter? file = default(FileParameter?))
        {
            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/sa/upload/investmentConsultant", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSaUploadInvestmentConsultantPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// SA upload file investment consultant The file in zip format. 
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiSaUploadInvestmentConsultantPostAsync(FileParameter? file = default(FileParameter?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiSaUploadInvestmentConsultantPostWithHttpInfoAsync(file, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// SA upload file investment consultant The file in zip format. 
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<Object>> ApiSaUploadInvestmentConsultantPostWithHttpInfoAsync(FileParameter? file = default(FileParameter?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("file", file);
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/sa/upload/investmentConsultant", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSaUploadInvestmentConsultantPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Failed Recurring Order Inquiry * Remark:&lt;br&gt;1. API must have at least one params. (accountId or effectiveDate or recurringOrderId)&lt;br&gt;2. If no have effectiveDate param, the result of failed recurring order cannot be retrieved back more than 1 year
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account No (optional)</param>
        /// <param name="effectiveDate">Format: YYYYMMDD (optional)</param>
        /// <param name="recurringOrderId">Recurring Transaction ID in FundConnex (optional)</param>
        /// <returns>ApiSubscriptionsRecurringFailOrderGet200Response</returns>
        public ApiSubscriptionsRecurringFailOrderGet200Response ApiSubscriptionsRecurringFailOrderGet(string? accountId = default(string?), string? effectiveDate = default(string?), string? recurringOrderId = default(string?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsRecurringFailOrderGet200Response> localVarResponse = ApiSubscriptionsRecurringFailOrderGetWithHttpInfo(accountId, effectiveDate, recurringOrderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Failed Recurring Order Inquiry * Remark:&lt;br&gt;1. API must have at least one params. (accountId or effectiveDate or recurringOrderId)&lt;br&gt;2. If no have effectiveDate param, the result of failed recurring order cannot be retrieved back more than 1 year
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account No (optional)</param>
        /// <param name="effectiveDate">Format: YYYYMMDD (optional)</param>
        /// <param name="recurringOrderId">Recurring Transaction ID in FundConnex (optional)</param>
        /// <returns>ApiResponse of ApiSubscriptionsRecurringFailOrderGet200Response</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsRecurringFailOrderGet200Response> ApiSubscriptionsRecurringFailOrderGetWithHttpInfo(string? accountId = default(string?), string? effectiveDate = default(string?), string? recurringOrderId = default(string?))
        {
            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "accountId", accountId));
            }
            if (effectiveDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "effectiveDate", effectiveDate));
            }
            if (recurringOrderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "recurringOrderId", recurringOrderId));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<ApiSubscriptionsRecurringFailOrderGet200Response>("/api/subscriptions/recurring/failOrder", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriptionsRecurringFailOrderGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Failed Recurring Order Inquiry * Remark:&lt;br&gt;1. API must have at least one params. (accountId or effectiveDate or recurringOrderId)&lt;br&gt;2. If no have effectiveDate param, the result of failed recurring order cannot be retrieved back more than 1 year
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account No (optional)</param>
        /// <param name="effectiveDate">Format: YYYYMMDD (optional)</param>
        /// <param name="recurringOrderId">Recurring Transaction ID in FundConnex (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiSubscriptionsRecurringFailOrderGet200Response</returns>
        public async System.Threading.Tasks.Task<ApiSubscriptionsRecurringFailOrderGet200Response> ApiSubscriptionsRecurringFailOrderGetAsync(string? accountId = default(string?), string? effectiveDate = default(string?), string? recurringOrderId = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsRecurringFailOrderGet200Response> localVarResponse = await ApiSubscriptionsRecurringFailOrderGetWithHttpInfoAsync(accountId, effectiveDate, recurringOrderId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Failed Recurring Order Inquiry * Remark:&lt;br&gt;1. API must have at least one params. (accountId or effectiveDate or recurringOrderId)&lt;br&gt;2. If no have effectiveDate param, the result of failed recurring order cannot be retrieved back more than 1 year
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId">Account No (optional)</param>
        /// <param name="effectiveDate">Format: YYYYMMDD (optional)</param>
        /// <param name="recurringOrderId">Recurring Transaction ID in FundConnex (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiSubscriptionsRecurringFailOrderGet200Response)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsRecurringFailOrderGet200Response>> ApiSubscriptionsRecurringFailOrderGetWithHttpInfoAsync(string? accountId = default(string?), string? effectiveDate = default(string?), string? recurringOrderId = default(string?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (accountId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "accountId", accountId));
            }
            if (effectiveDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "effectiveDate", effectiveDate));
            }
            if (recurringOrderId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToMultiMap("", "recurringOrderId", recurringOrderId));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ApiSubscriptionsRecurringFailOrderGet200Response>("/api/subscriptions/recurring/failOrder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriptionsRecurringFailOrderGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel subscription order Cancel subscription order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api subscription (optional)</param>
        /// <returns>ApiSubscriptionsTransactionIdDelete200Response</returns>
        public ApiSubscriptionsTransactionIdDelete200Response ApiSubscriptionsTransactionIdDelete(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsTransactionIdDelete200Response> localVarResponse = ApiSubscriptionsTransactionIdDeleteWithHttpInfo(xAuthToken, transactionId, apiSubscriptionsTransactionIdDeleteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel subscription order Cancel subscription order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api subscription (optional)</param>
        /// <returns>ApiResponse of ApiSubscriptionsTransactionIdDelete200Response</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsTransactionIdDelete200Response> ApiSubscriptionsTransactionIdDeleteWithHttpInfo(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?))
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiSubscriptionsTransactionIdDelete");

            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'transactionId' when calling FundConnextApi->ApiSubscriptionsTransactionIdDelete");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("transactionId", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(transactionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            localVarRequestOptions.Data = apiSubscriptionsTransactionIdDeleteRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiSubscriptionsTransactionIdDelete200Response>("/api/subscriptions/{transactionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriptionsTransactionIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel subscription order Cancel subscription order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api subscription (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiSubscriptionsTransactionIdDelete200Response</returns>
        public async System.Threading.Tasks.Task<ApiSubscriptionsTransactionIdDelete200Response> ApiSubscriptionsTransactionIdDeleteAsync(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsTransactionIdDelete200Response> localVarResponse = await ApiSubscriptionsTransactionIdDeleteWithHttpInfoAsync(xAuthToken, transactionId, apiSubscriptionsTransactionIdDeleteRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel subscription order Cancel subscription order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api subscription (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiSubscriptionsTransactionIdDelete200Response)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsTransactionIdDelete200Response>> ApiSubscriptionsTransactionIdDeleteWithHttpInfoAsync(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiSubscriptionsTransactionIdDelete");

            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'transactionId' when calling FundConnextApi->ApiSubscriptionsTransactionIdDelete");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("transactionId", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(transactionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            localVarRequestOptions.Data = apiSubscriptionsTransactionIdDeleteRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiSubscriptionsTransactionIdDelete200Response>("/api/subscriptions/{transactionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriptionsTransactionIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create subscription order version 2 Create new subscription order version 2
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiSubscriptionsV2PostRequest">Example request body for creating subscription order version 2 (optional)</param>
        /// <returns>ApiSubscriptionsV2Post200Response</returns>
        public ApiSubscriptionsV2Post200Response ApiSubscriptionsV2Post(string xAuthToken, ApiSubscriptionsV2PostRequest? apiSubscriptionsV2PostRequest = default(ApiSubscriptionsV2PostRequest?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsV2Post200Response> localVarResponse = ApiSubscriptionsV2PostWithHttpInfo(xAuthToken, apiSubscriptionsV2PostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create subscription order version 2 Create new subscription order version 2
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiSubscriptionsV2PostRequest">Example request body for creating subscription order version 2 (optional)</param>
        /// <returns>ApiResponse of ApiSubscriptionsV2Post200Response</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsV2Post200Response> ApiSubscriptionsV2PostWithHttpInfo(string xAuthToken, ApiSubscriptionsV2PostRequest? apiSubscriptionsV2PostRequest = default(ApiSubscriptionsV2PostRequest?))
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiSubscriptionsV2Post");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            localVarRequestOptions.Data = apiSubscriptionsV2PostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiSubscriptionsV2Post200Response>("/api/subscriptions/v2", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriptionsV2Post", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create subscription order version 2 Create new subscription order version 2
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiSubscriptionsV2PostRequest">Example request body for creating subscription order version 2 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiSubscriptionsV2Post200Response</returns>
        public async System.Threading.Tasks.Task<ApiSubscriptionsV2Post200Response> ApiSubscriptionsV2PostAsync(string xAuthToken, ApiSubscriptionsV2PostRequest? apiSubscriptionsV2PostRequest = default(ApiSubscriptionsV2PostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsV2Post200Response> localVarResponse = await ApiSubscriptionsV2PostWithHttpInfoAsync(xAuthToken, apiSubscriptionsV2PostRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create subscription order version 2 Create new subscription order version 2
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiSubscriptionsV2PostRequest">Example request body for creating subscription order version 2 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiSubscriptionsV2Post200Response)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsV2Post200Response>> ApiSubscriptionsV2PostWithHttpInfoAsync(string xAuthToken, ApiSubscriptionsV2PostRequest? apiSubscriptionsV2PostRequest = default(ApiSubscriptionsV2PostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiSubscriptionsV2Post");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            localVarRequestOptions.Data = apiSubscriptionsV2PostRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiSubscriptionsV2Post200Response>("/api/subscriptions/v2", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSubscriptionsV2Post", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create switchings order Create new switching order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiSwitchingsPostRequest">Example request body for creating switch (optional)</param>
        /// <returns>ApiCrossAmcSwitchingPost200Response</returns>
        public ApiCrossAmcSwitchingPost200Response ApiSwitchingsPost(string xAuthToken, ApiSwitchingsPostRequest? apiSwitchingsPostRequest = default(ApiSwitchingsPostRequest?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiCrossAmcSwitchingPost200Response> localVarResponse = ApiSwitchingsPostWithHttpInfo(xAuthToken, apiSwitchingsPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create switchings order Create new switching order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiSwitchingsPostRequest">Example request body for creating switch (optional)</param>
        /// <returns>ApiResponse of ApiCrossAmcSwitchingPost200Response</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiCrossAmcSwitchingPost200Response> ApiSwitchingsPostWithHttpInfo(string xAuthToken, ApiSwitchingsPostRequest? apiSwitchingsPostRequest = default(ApiSwitchingsPostRequest?))
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiSwitchingsPost");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            localVarRequestOptions.Data = apiSwitchingsPostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiCrossAmcSwitchingPost200Response>("/api/switchings", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSwitchingsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create switchings order Create new switching order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiSwitchingsPostRequest">Example request body for creating switch (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiCrossAmcSwitchingPost200Response</returns>
        public async System.Threading.Tasks.Task<ApiCrossAmcSwitchingPost200Response> ApiSwitchingsPostAsync(string xAuthToken, ApiSwitchingsPostRequest? apiSwitchingsPostRequest = default(ApiSwitchingsPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiCrossAmcSwitchingPost200Response> localVarResponse = await ApiSwitchingsPostWithHttpInfoAsync(xAuthToken, apiSwitchingsPostRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create switchings order Create new switching order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="apiSwitchingsPostRequest">Example request body for creating switch (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiCrossAmcSwitchingPost200Response)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiCrossAmcSwitchingPost200Response>> ApiSwitchingsPostWithHttpInfoAsync(string xAuthToken, ApiSwitchingsPostRequest? apiSwitchingsPostRequest = default(ApiSwitchingsPostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiSwitchingsPost");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            localVarRequestOptions.Data = apiSwitchingsPostRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiCrossAmcSwitchingPost200Response>("/api/switchings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSwitchingsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel switching order Cancel switching order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api switching order (optional)</param>
        /// <returns>ApiSubscriptionsTransactionIdDelete200Response</returns>
        public ApiSubscriptionsTransactionIdDelete200Response ApiSwitchingsTransactionIdDelete(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsTransactionIdDelete200Response> localVarResponse = ApiSwitchingsTransactionIdDeleteWithHttpInfo(xAuthToken, transactionId, apiSubscriptionsTransactionIdDeleteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel switching order Cancel switching order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api switching order (optional)</param>
        /// <returns>ApiResponse of ApiSubscriptionsTransactionIdDelete200Response</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsTransactionIdDelete200Response> ApiSwitchingsTransactionIdDeleteWithHttpInfo(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?))
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiSwitchingsTransactionIdDelete");

            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'transactionId' when calling FundConnextApi->ApiSwitchingsTransactionIdDelete");

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("transactionId", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(transactionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            localVarRequestOptions.Data = apiSubscriptionsTransactionIdDeleteRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiSubscriptionsTransactionIdDelete200Response>("/api/switchings/{transactionId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSwitchingsTransactionIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel switching order Cancel switching order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api switching order (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiSubscriptionsTransactionIdDelete200Response</returns>
        public async System.Threading.Tasks.Task<ApiSubscriptionsTransactionIdDelete200Response> ApiSwitchingsTransactionIdDeleteAsync(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsTransactionIdDelete200Response> localVarResponse = await ApiSwitchingsTransactionIdDeleteWithHttpInfoAsync(xAuthToken, transactionId, apiSubscriptionsTransactionIdDeleteRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel switching order Cancel switching order
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAuthToken"></param>
        /// <param name="transactionId">Transaction Code</param>
        /// <param name="apiSubscriptionsTransactionIdDeleteRequest">Example request body for cancel api switching order (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiSubscriptionsTransactionIdDelete200Response)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiSubscriptionsTransactionIdDelete200Response>> ApiSwitchingsTransactionIdDeleteWithHttpInfoAsync(string xAuthToken, string transactionId, ApiSubscriptionsTransactionIdDeleteRequest? apiSubscriptionsTransactionIdDeleteRequest = default(ApiSubscriptionsTransactionIdDeleteRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAuthToken' is set
            if (xAuthToken == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'xAuthToken' when calling FundConnextApi->ApiSwitchingsTransactionIdDelete");

            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new Pi.Financial.Client.FundConnext.Client.ApiException(400, "Missing required parameter 'transactionId' when calling FundConnextApi->ApiSwitchingsTransactionIdDelete");


            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("transactionId", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(transactionId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Auth-Token", Pi.Financial.Client.FundConnext.Client.ClientUtils.ParameterToString(xAuthToken)); // header parameter
            localVarRequestOptions.Data = apiSubscriptionsTransactionIdDeleteRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiSubscriptionsTransactionIdDelete200Response>("/api/switchings/{transactionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiSwitchingsTransactionIdDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Point Code Validate Point Code
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiValidatePointCodePostRequest">Example request body for validate point code (optional)</param>
        /// <returns>ApiValidatePointCodePost200Response</returns>
        public ApiValidatePointCodePost200Response ApiValidatePointCodePost(ApiValidatePointCodePostRequest? apiValidatePointCodePostRequest = default(ApiValidatePointCodePostRequest?))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiValidatePointCodePost200Response> localVarResponse = ApiValidatePointCodePostWithHttpInfo(apiValidatePointCodePostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate Point Code Validate Point Code
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiValidatePointCodePostRequest">Example request body for validate point code (optional)</param>
        /// <returns>ApiResponse of ApiValidatePointCodePost200Response</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiValidatePointCodePost200Response> ApiValidatePointCodePostWithHttpInfo(ApiValidatePointCodePostRequest? apiValidatePointCodePostRequest = default(ApiValidatePointCodePostRequest?))
        {
            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = apiValidatePointCodePostRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ApiValidatePointCodePost200Response>("/api/validatePointCode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiValidatePointCodePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Point Code Validate Point Code
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiValidatePointCodePostRequest">Example request body for validate point code (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiValidatePointCodePost200Response</returns>
        public async System.Threading.Tasks.Task<ApiValidatePointCodePost200Response> ApiValidatePointCodePostAsync(ApiValidatePointCodePostRequest? apiValidatePointCodePostRequest = default(ApiValidatePointCodePostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiValidatePointCodePost200Response> localVarResponse = await ApiValidatePointCodePostWithHttpInfoAsync(apiValidatePointCodePostRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate Point Code Validate Point Code
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiValidatePointCodePostRequest">Example request body for validate point code (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiValidatePointCodePost200Response)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<ApiValidatePointCodePost200Response>> ApiValidatePointCodePostWithHttpInfoAsync(ApiValidatePointCodePostRequest? apiValidatePointCodePostRequest = default(ApiValidatePointCodePostRequest?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = apiValidatePointCodePostRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiValidatePointCodePost200Response>("/api/validatePointCode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiValidatePointCodePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Mock server healthcheck
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object RootGet()
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<Object> localVarResponse = RootGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Mock server healthcheck
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public Pi.Financial.Client.FundConnext.Client.ApiResponse<Object> RootGetWithHttpInfo()
        {
            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RootGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Mock server healthcheck
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RootGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Pi.Financial.Client.FundConnext.Client.ApiResponse<Object> localVarResponse = await RootGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Mock server healthcheck
        /// </summary>
        /// <exception cref="Pi.Financial.Client.FundConnext.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Pi.Financial.Client.FundConnext.Client.ApiResponse<Object>> RootGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Pi.Financial.Client.FundConnext.Client.RequestOptions localVarRequestOptions = new Pi.Financial.Client.FundConnext.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Pi.Financial.Client.FundConnext.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RootGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
