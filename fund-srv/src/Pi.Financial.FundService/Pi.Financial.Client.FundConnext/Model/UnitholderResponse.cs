/*
 * FundConnext
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Pi.Financial.Client.FundConnext.Client.FileParameter;
using OpenAPIDateConverter = Pi.Financial.Client.FundConnext.Client.OpenAPIDateConverter;

namespace Pi.Financial.Client.FundConnext.Model
{
    /// <summary>
    /// UnitholderResponse
    /// </summary>
    [DataContract(Name = "UnitholderResponse")]
    public partial class UnitholderResponse : IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,

            /// <summary>
            /// Enum CLOSED for value: CLOSED
            /// </summary>
            [EnumMember(Value = "CLOSED")]
            CLOSED = 2,

            /// <summary>
            /// Enum SUSPENDED for value: SUSPENDED
            /// </summary>
            [EnumMember(Value = "SUSPENDED")]
            SUSPENDED = 3
        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UnitholderResponse" /> class.
        /// </summary>
        /// <param name="unitholderId">unitholderId.</param>
        /// <param name="amcCode">amcCode.</param>
        /// <param name="accountId">accountId.</param>
        /// <param name="unitholderType">unitholderType.</param>
        /// <param name="subscriptionBankAccounts">subscriptionBankAccounts.</param>
        /// <param name="redemptionBankAccounts">redemptionBankAccounts.</param>
        /// <param name="approved">approved.</param>
        /// <param name="status">status.</param>
        public UnitholderResponse(string unitholderId = default(string), string amcCode = default(string), string accountId = default(string), string unitholderType = default(string), List<UnitholderSubscriptionBankAccounts> subscriptionBankAccounts = default(List<UnitholderSubscriptionBankAccounts>), List<UnitholderRedemptionBankAccounts> redemptionBankAccounts = default(List<UnitholderRedemptionBankAccounts>), bool approved = default(bool), StatusEnum? status = default(StatusEnum?))
        {
            this.UnitholderId = unitholderId;
            this.AmcCode = amcCode;
            this.AccountId = accountId;
            this.UnitholderType = unitholderType;
            this.SubscriptionBankAccounts = subscriptionBankAccounts;
            this.RedemptionBankAccounts = redemptionBankAccounts;
            this.Approved = approved;
            this.Status = status;
        }

        /// <summary>
        /// Gets or Sets UnitholderId
        /// </summary>
        [DataMember(Name = "unitholderId", EmitDefaultValue = false)]
        public string UnitholderId { get; set; }

        /// <summary>
        /// Gets or Sets AmcCode
        /// </summary>
        [DataMember(Name = "amcCode", EmitDefaultValue = false)]
        public string AmcCode { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets UnitholderType
        /// </summary>
        [DataMember(Name = "unitholderType", EmitDefaultValue = false)]
        public string UnitholderType { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionBankAccounts
        /// </summary>
        [DataMember(Name = "subscriptionBankAccounts", EmitDefaultValue = false)]
        public List<UnitholderSubscriptionBankAccounts> SubscriptionBankAccounts { get; set; }

        /// <summary>
        /// Gets or Sets RedemptionBankAccounts
        /// </summary>
        [DataMember(Name = "redemptionBankAccounts", EmitDefaultValue = false)]
        public List<UnitholderRedemptionBankAccounts> RedemptionBankAccounts { get; set; }

        /// <summary>
        /// Gets or Sets Approved
        /// </summary>
        [DataMember(Name = "approved", EmitDefaultValue = true)]
        public bool Approved { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UnitholderResponse {\n");
            sb.Append("  UnitholderId: ").Append(UnitholderId).Append("\n");
            sb.Append("  AmcCode: ").Append(AmcCode).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  UnitholderType: ").Append(UnitholderType).Append("\n");
            sb.Append("  SubscriptionBankAccounts: ").Append(SubscriptionBankAccounts).Append("\n");
            sb.Append("  RedemptionBankAccounts: ").Append(RedemptionBankAccounts).Append("\n");
            sb.Append("  Approved: ").Append(Approved).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UnitholderId (string) maxLength
            if (this.UnitholderId != null && this.UnitholderId.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitholderId, length must be less than 15.", new[] { "UnitholderId" });
            }

            // AmcCode (string) maxLength
            if (this.AmcCode != null && this.AmcCode.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AmcCode, length must be less than 15.", new[] { "AmcCode" });
            }

            // AccountId (string) maxLength
            if (this.AccountId != null && this.AccountId.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be less than 15.", new[] { "AccountId" });
            }

            // UnitholderType (string) maxLength
            if (this.UnitholderType != null && this.UnitholderType.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitholderType, length must be less than 15.", new[] { "UnitholderType" });
            }

            yield break;
        }
    }

}
