/*
 * FundConnext
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Pi.Financial.Client.FundConnext.Client.FileParameter;
using OpenAPIDateConverter = Pi.Financial.Client.FundConnext.Client.OpenAPIDateConverter;

namespace Pi.Financial.Client.FundConnext.Model
{
    /// <summary>
    /// CustomerAccountCreateRequestV5CrsDetailsInner
    /// </summary>
    [DataContract(Name = "CustomerAccountCreateRequestV5_crsDetails_inner")]
    public partial class CustomerAccountCreateRequestV5CrsDetailsInner : IValidatableObject
    {
        /// <summary>
        /// A - ประเทศที่ผู้ถือบัญชีมีถิ่นที่อยู่ทางภาษี ไม่ได้ออกเลขประจำตัวผู้เสียภาษีให้กับผู้อาศัยอยู่ในประเทศนั้น&lt;/br&gt; B - ผู้ถือบัญชียังไม่ได้รับเลขประจำตัวผู้เสียภาษีที่ออกโดยประเทศนั้น&lt;/br&gt; C - ไม่จำเป็นต้องให้หรือเปิดเผยเลขประจำตัวผู้เสียภาษี
        /// </summary>
        /// <value>A - ประเทศที่ผู้ถือบัญชีมีถิ่นที่อยู่ทางภาษี ไม่ได้ออกเลขประจำตัวผู้เสียภาษีให้กับผู้อาศัยอยู่ในประเทศนั้น&lt;/br&gt; B - ผู้ถือบัญชียังไม่ได้รับเลขประจำตัวผู้เสียภาษีที่ออกโดยประเทศนั้น&lt;/br&gt; C - ไม่จำเป็นต้องให้หรือเปิดเผยเลขประจำตัวผู้เสียภาษี</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonEnum
        {
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 1,

            /// <summary>
            /// Enum B for value: B
            /// </summary>
            [EnumMember(Value = "B")]
            B = 2,

            /// <summary>
            /// Enum C for value: C
            /// </summary>
            [EnumMember(Value = "C")]
            C = 3
        }


        /// <summary>
        /// A - ประเทศที่ผู้ถือบัญชีมีถิ่นที่อยู่ทางภาษี ไม่ได้ออกเลขประจำตัวผู้เสียภาษีให้กับผู้อาศัยอยู่ในประเทศนั้น&lt;/br&gt; B - ผู้ถือบัญชียังไม่ได้รับเลขประจำตัวผู้เสียภาษีที่ออกโดยประเทศนั้น&lt;/br&gt; C - ไม่จำเป็นต้องให้หรือเปิดเผยเลขประจำตัวผู้เสียภาษี
        /// </summary>
        /// <value>A - ประเทศที่ผู้ถือบัญชีมีถิ่นที่อยู่ทางภาษี ไม่ได้ออกเลขประจำตัวผู้เสียภาษีให้กับผู้อาศัยอยู่ในประเทศนั้น&lt;/br&gt; B - ผู้ถือบัญชียังไม่ได้รับเลขประจำตัวผู้เสียภาษีที่ออกโดยประเทศนั้น&lt;/br&gt; C - ไม่จำเป็นต้องให้หรือเปิดเผยเลขประจำตัวผู้เสียภาษี</value>
        [DataMember(Name = "reason", EmitDefaultValue = true)]
        public ReasonEnum? Reason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerAccountCreateRequestV5CrsDetailsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomerAccountCreateRequestV5CrsDetailsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerAccountCreateRequestV5CrsDetailsInner" /> class.
        /// </summary>
        /// <param name="countryOfTaxResidence">อ้างอิง Country ของ FundConnext ตาม Master Data (required).</param>
        /// <param name="tin">tin.</param>
        /// <param name="reason">A - ประเทศที่ผู้ถือบัญชีมีถิ่นที่อยู่ทางภาษี ไม่ได้ออกเลขประจำตัวผู้เสียภาษีให้กับผู้อาศัยอยู่ในประเทศนั้น&lt;/br&gt; B - ผู้ถือบัญชียังไม่ได้รับเลขประจำตัวผู้เสียภาษีที่ออกโดยประเทศนั้น&lt;/br&gt; C - ไม่จำเป็นต้องให้หรือเปิดเผยเลขประจำตัวผู้เสียภาษี.</param>
        /// <param name="reasonDesc">เหตุผล ต้องเป็นภาษาอังกฤษเท่านั้น (ยกเว้น &lt;enter&gt;, |, \&quot;, {, }, [, ]) Regex: ^[A-Za-zÀ-ÿĀ-žЀ-ӿ0-9\\s!#$%&amp;&#39;()*+,-./:;&lt;&#x3D;&gt;?@^_&#x60;~]+$.</param>
        public CustomerAccountCreateRequestV5CrsDetailsInner(string countryOfTaxResidence = default(string), string tin = default(string), ReasonEnum? reason = default(ReasonEnum?), string reasonDesc = default(string))
        {
            // to ensure "countryOfTaxResidence" is required (not null)
            if (countryOfTaxResidence == null)
            {
                throw new ArgumentNullException("countryOfTaxResidence is a required property for CustomerAccountCreateRequestV5CrsDetailsInner and cannot be null");
            }
            this.CountryOfTaxResidence = countryOfTaxResidence;
            this.Tin = tin;
            this.Reason = reason;
            this.ReasonDesc = reasonDesc;
        }

        /// <summary>
        /// อ้างอิง Country ของ FundConnext ตาม Master Data
        /// </summary>
        /// <value>อ้างอิง Country ของ FundConnext ตาม Master Data</value>
        [DataMember(Name = "countryOfTaxResidence", IsRequired = true, EmitDefaultValue = true)]
        public string CountryOfTaxResidence { get; set; }

        /// <summary>
        /// Gets or Sets Tin
        /// </summary>
        [DataMember(Name = "tin", EmitDefaultValue = true)]
        public string Tin { get; set; }

        /// <summary>
        /// เหตุผล ต้องเป็นภาษาอังกฤษเท่านั้น (ยกเว้น &lt;enter&gt;, |, \&quot;, {, }, [, ]) Regex: ^[A-Za-zÀ-ÿĀ-žЀ-ӿ0-9\\s!#$%&amp;&#39;()*+,-./:;&lt;&#x3D;&gt;?@^_&#x60;~]+$
        /// </summary>
        /// <value>เหตุผล ต้องเป็นภาษาอังกฤษเท่านั้น (ยกเว้น &lt;enter&gt;, |, \&quot;, {, }, [, ]) Regex: ^[A-Za-zÀ-ÿĀ-žЀ-ӿ0-9\\s!#$%&amp;&#39;()*+,-./:;&lt;&#x3D;&gt;?@^_&#x60;~]+$</value>
        [DataMember(Name = "reasonDesc", EmitDefaultValue = true)]
        public string ReasonDesc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerAccountCreateRequestV5CrsDetailsInner {\n");
            sb.Append("  CountryOfTaxResidence: ").Append(CountryOfTaxResidence).Append("\n");
            sb.Append("  Tin: ").Append(Tin).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  ReasonDesc: ").Append(ReasonDesc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CountryOfTaxResidence (string) maxLength
            if (this.CountryOfTaxResidence != null && this.CountryOfTaxResidence.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryOfTaxResidence, length must be less than 2.", new[] { "CountryOfTaxResidence" });
            }

            // CountryOfTaxResidence (string) minLength
            if (this.CountryOfTaxResidence != null && this.CountryOfTaxResidence.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryOfTaxResidence, length must be greater than 2.", new[] { "CountryOfTaxResidence" });
            }

            // Tin (string) maxLength
            if (this.Tin != null && this.Tin.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Tin, length must be less than 20.", new[] { "Tin" });
            }

            // ReasonDesc (string) maxLength
            if (this.ReasonDesc != null && this.ReasonDesc.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReasonDesc, length must be less than 100.", new[] { "ReasonDesc" });
            }

            if (this.ReasonDesc != null)
            {
                // ReasonDesc (string) pattern
                Regex regexReasonDesc = new Regex(@"^$|^[A-Za-zÀ-ÿĀ-žЀ-ӿ0-9\s!#$%&'()*+,-./:;<=>?@^_`~ ]+$", RegexOptions.CultureInvariant);
                if (!regexReasonDesc.Match(this.ReasonDesc).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReasonDesc, must match a pattern of " + regexReasonDesc, new[] { "ReasonDesc" });
                }
            }

            yield break;
        }
    }

}
