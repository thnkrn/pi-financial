/*
 * FundConnext
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Pi.Financial.Client.FundConnext.Client.FileParameter;
using OpenAPIDateConverter = Pi.Financial.Client.FundConnext.Client.OpenAPIDateConverter;

namespace Pi.Financial.Client.FundConnext.Model
{
    /// <summary>
    /// AuthorizedSignatoriesCurrent
    /// </summary>
    [DataContract(Name = "AuthorizedSignatories_current")]
    public partial class AuthorizedSignatoriesCurrent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizedSignatoriesCurrent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthorizedSignatoriesCurrent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizedSignatoriesCurrent" /> class.
        /// </summary>
        /// <param name="no">no (required).</param>
        /// <param name="subDistrict">subDistrict (required).</param>
        /// <param name="district">district (required).</param>
        /// <param name="province">province (required).</param>
        /// <param name="postalCode">postalCode (required).</param>
        /// <param name="country">country (required).</param>
        /// <param name="floor">floor.</param>
        /// <param name="building">building.</param>
        /// <param name="roomNo">roomNo.</param>
        /// <param name="soi">soi.</param>
        /// <param name="road">road.</param>
        /// <param name="moo">moo.</param>
        public AuthorizedSignatoriesCurrent(string no = default(string), string subDistrict = default(string), string district = default(string), string province = default(string), string postalCode = default(string), string country = default(string), string floor = default(string), string building = default(string), string roomNo = default(string), string soi = default(string), string road = default(string), string moo = default(string))
        {
            // to ensure "no" is required (not null)
            if (no == null)
            {
                throw new ArgumentNullException("no is a required property for AuthorizedSignatoriesCurrent and cannot be null");
            }
            this.No = no;
            // to ensure "subDistrict" is required (not null)
            if (subDistrict == null)
            {
                throw new ArgumentNullException("subDistrict is a required property for AuthorizedSignatoriesCurrent and cannot be null");
            }
            this.SubDistrict = subDistrict;
            // to ensure "district" is required (not null)
            if (district == null)
            {
                throw new ArgumentNullException("district is a required property for AuthorizedSignatoriesCurrent and cannot be null");
            }
            this.District = district;
            // to ensure "province" is required (not null)
            if (province == null)
            {
                throw new ArgumentNullException("province is a required property for AuthorizedSignatoriesCurrent and cannot be null");
            }
            this.Province = province;
            // to ensure "postalCode" is required (not null)
            if (postalCode == null)
            {
                throw new ArgumentNullException("postalCode is a required property for AuthorizedSignatoriesCurrent and cannot be null");
            }
            this.PostalCode = postalCode;
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new ArgumentNullException("country is a required property for AuthorizedSignatoriesCurrent and cannot be null");
            }
            this.Country = country;
            this.Floor = floor;
            this.Building = building;
            this.RoomNo = roomNo;
            this.Soi = soi;
            this.Road = road;
            this.Moo = moo;
        }

        /// <summary>
        /// Gets or Sets No
        /// </summary>
        [DataMember(Name = "no", IsRequired = true, EmitDefaultValue = true)]
        public string No { get; set; }

        /// <summary>
        /// Gets or Sets SubDistrict
        /// </summary>
        [DataMember(Name = "subDistrict", IsRequired = true, EmitDefaultValue = true)]
        public string SubDistrict { get; set; }

        /// <summary>
        /// Gets or Sets District
        /// </summary>
        [DataMember(Name = "district", IsRequired = true, EmitDefaultValue = true)]
        public string District { get; set; }

        /// <summary>
        /// Gets or Sets Province
        /// </summary>
        [DataMember(Name = "province", IsRequired = true, EmitDefaultValue = true)]
        public string Province { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name = "postalCode", IsRequired = true, EmitDefaultValue = true)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets Floor
        /// </summary>
        [DataMember(Name = "floor", EmitDefaultValue = false)]
        public string Floor { get; set; }

        /// <summary>
        /// Gets or Sets Building
        /// </summary>
        [DataMember(Name = "building", EmitDefaultValue = false)]
        public string Building { get; set; }

        /// <summary>
        /// Gets or Sets RoomNo
        /// </summary>
        [DataMember(Name = "roomNo", EmitDefaultValue = false)]
        public string RoomNo { get; set; }

        /// <summary>
        /// Gets or Sets Soi
        /// </summary>
        [DataMember(Name = "soi", EmitDefaultValue = false)]
        public string Soi { get; set; }

        /// <summary>
        /// Gets or Sets Road
        /// </summary>
        [DataMember(Name = "road", EmitDefaultValue = false)]
        public string Road { get; set; }

        /// <summary>
        /// Gets or Sets Moo
        /// </summary>
        [DataMember(Name = "moo", EmitDefaultValue = false)]
        public string Moo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthorizedSignatoriesCurrent {\n");
            sb.Append("  No: ").Append(No).Append("\n");
            sb.Append("  SubDistrict: ").Append(SubDistrict).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  Province: ").Append(Province).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Floor: ").Append(Floor).Append("\n");
            sb.Append("  Building: ").Append(Building).Append("\n");
            sb.Append("  RoomNo: ").Append(RoomNo).Append("\n");
            sb.Append("  Soi: ").Append(Soi).Append("\n");
            sb.Append("  Road: ").Append(Road).Append("\n");
            sb.Append("  Moo: ").Append(Moo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
