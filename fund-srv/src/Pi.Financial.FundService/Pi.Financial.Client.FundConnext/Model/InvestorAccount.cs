/*
 * FundConnext
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Pi.Financial.Client.FundConnext.Client.FileParameter;
using OpenAPIDateConverter = Pi.Financial.Client.FundConnext.Client.OpenAPIDateConverter;

namespace Pi.Financial.Client.FundConnext.Model
{
    /// <summary>
    /// InvestorAccount
    /// </summary>
    [DataContract(Name = "InvestorAccount")]
    public partial class InvestorAccount : IValidatableObject
    {
        /// <summary>
        /// Defines MailingAddressSameAsFlag
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MailingAddressSameAsFlagEnum
        {
            /// <summary>
            /// Enum IdDocument for value: IdDocument
            /// </summary>
            [EnumMember(Value = "IdDocument")]
            IdDocument = 1,

            /// <summary>
            /// Enum Current for value: Current
            /// </summary>
            [EnumMember(Value = "Current")]
            Current = 2,

            /// <summary>
            /// Enum Work for value: Work
            /// </summary>
            [EnumMember(Value = "Work")]
            Work = 3,

            /// <summary>
            /// Enum JuristicRegistration for value: JuristicRegistration
            /// </summary>
            [EnumMember(Value = "JuristicRegistration")]
            JuristicRegistration = 4
        }


        /// <summary>
        /// Gets or Sets MailingAddressSameAsFlag
        /// </summary>
        [DataMember(Name = "mailingAddressSameAsFlag", EmitDefaultValue = false)]
        public MailingAddressSameAsFlagEnum? MailingAddressSameAsFlag { get; set; }
        /// <summary>
        /// Defines MailingMethod
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MailingMethodEnum
        {
            /// <summary>
            /// Enum Email for value: Email
            /// </summary>
            [EnumMember(Value = "Email")]
            Email = 1,

            /// <summary>
            /// Enum Fax for value: Fax
            /// </summary>
            [EnumMember(Value = "Fax")]
            Fax = 2,

            /// <summary>
            /// Enum Post for value: Post
            /// </summary>
            [EnumMember(Value = "Post")]
            Post = 3
        }


        /// <summary>
        /// Gets or Sets MailingMethod
        /// </summary>
        [DataMember(Name = "mailingMethod", EmitDefaultValue = false)]
        public MailingMethodEnum? MailingMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvestorAccount" /> class.
        /// </summary>
        /// <param name="accountId">accountId.</param>
        /// <param name="icLicense">icLicense.</param>
        /// <param name="accountOpenDate">accountOpenDate.</param>
        /// <param name="mailingAddressSameAsFlag">mailingAddressSameAsFlag.</param>
        /// <param name="mailing">mailing.</param>
        /// <param name="mailingMethod">mailingMethod.</param>
        /// <param name="investmentObjective">investmentObjective.</param>
        /// <param name="investmentObjectiveOther">investmentObjectiveOther.</param>
        /// <param name="redemptionBankAccounts">redemptionBankAccounts.</param>
        /// <param name="subscriptionBankAccounts">subscriptionBankAccounts.</param>
        /// <param name="approvedDate">approvedDate.</param>
        /// <param name="openOmnibusFormFlag">openOmnibusFormFlag.</param>
        public InvestorAccount(string accountId = default(string), string icLicense = default(string), string accountOpenDate = default(string), MailingAddressSameAsFlagEnum? mailingAddressSameAsFlag = default(MailingAddressSameAsFlagEnum?), Address mailing = default(Address), MailingMethodEnum? mailingMethod = default(MailingMethodEnum?), string investmentObjective = default(string), string investmentObjectiveOther = default(string), List<BankAccount> redemptionBankAccounts = default(List<BankAccount>), List<BankAccount> subscriptionBankAccounts = default(List<BankAccount>), string approvedDate = default(string), bool openOmnibusFormFlag = default(bool))
        {
            this.AccountId = accountId;
            this.IcLicense = icLicense;
            this.AccountOpenDate = accountOpenDate;
            this.MailingAddressSameAsFlag = mailingAddressSameAsFlag;
            this.Mailing = mailing;
            this.MailingMethod = mailingMethod;
            this.InvestmentObjective = investmentObjective;
            this.InvestmentObjectiveOther = investmentObjectiveOther;
            this.RedemptionBankAccounts = redemptionBankAccounts;
            this.SubscriptionBankAccounts = subscriptionBankAccounts;
            this.ApprovedDate = approvedDate;
            this.OpenOmnibusFormFlag = openOmnibusFormFlag;
        }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets IcLicense
        /// </summary>
        [DataMember(Name = "icLicense", EmitDefaultValue = false)]
        public string IcLicense { get; set; }

        /// <summary>
        /// Gets or Sets AccountOpenDate
        /// </summary>
        [DataMember(Name = "accountOpenDate", EmitDefaultValue = false)]
        public string AccountOpenDate { get; set; }

        /// <summary>
        /// Gets or Sets Mailing
        /// </summary>
        [DataMember(Name = "mailing", EmitDefaultValue = false)]
        public Address Mailing { get; set; }

        /// <summary>
        /// Gets or Sets InvestmentObjective
        /// </summary>
        [DataMember(Name = "investmentObjective", EmitDefaultValue = false)]
        public string InvestmentObjective { get; set; }

        /// <summary>
        /// Gets or Sets InvestmentObjectiveOther
        /// </summary>
        [DataMember(Name = "investmentObjectiveOther", EmitDefaultValue = false)]
        public string InvestmentObjectiveOther { get; set; }

        /// <summary>
        /// Gets or Sets RedemptionBankAccounts
        /// </summary>
        [DataMember(Name = "redemptionBankAccounts", EmitDefaultValue = false)]
        public List<BankAccount> RedemptionBankAccounts { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionBankAccounts
        /// </summary>
        [DataMember(Name = "subscriptionBankAccounts", EmitDefaultValue = false)]
        public List<BankAccount> SubscriptionBankAccounts { get; set; }

        /// <summary>
        /// Gets or Sets ApprovedDate
        /// </summary>
        [DataMember(Name = "approvedDate", EmitDefaultValue = false)]
        public string ApprovedDate { get; set; }

        /// <summary>
        /// Gets or Sets OpenOmnibusFormFlag
        /// </summary>
        [DataMember(Name = "openOmnibusFormFlag", EmitDefaultValue = true)]
        public bool OpenOmnibusFormFlag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InvestorAccount {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  IcLicense: ").Append(IcLicense).Append("\n");
            sb.Append("  AccountOpenDate: ").Append(AccountOpenDate).Append("\n");
            sb.Append("  MailingAddressSameAsFlag: ").Append(MailingAddressSameAsFlag).Append("\n");
            sb.Append("  Mailing: ").Append(Mailing).Append("\n");
            sb.Append("  MailingMethod: ").Append(MailingMethod).Append("\n");
            sb.Append("  InvestmentObjective: ").Append(InvestmentObjective).Append("\n");
            sb.Append("  InvestmentObjectiveOther: ").Append(InvestmentObjectiveOther).Append("\n");
            sb.Append("  RedemptionBankAccounts: ").Append(RedemptionBankAccounts).Append("\n");
            sb.Append("  SubscriptionBankAccounts: ").Append(SubscriptionBankAccounts).Append("\n");
            sb.Append("  ApprovedDate: ").Append(ApprovedDate).Append("\n");
            sb.Append("  OpenOmnibusFormFlag: ").Append(OpenOmnibusFormFlag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
