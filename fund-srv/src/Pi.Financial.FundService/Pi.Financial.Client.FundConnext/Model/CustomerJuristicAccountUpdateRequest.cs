/*
 * FundConnext
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Pi.Financial.Client.FundConnext.Client.FileParameter;
using OpenAPIDateConverter = Pi.Financial.Client.FundConnext.Client.OpenAPIDateConverter;

namespace Pi.Financial.Client.FundConnext.Model
{
    /// <summary>
    /// CustomerJuristicAccountUpdateRequest
    /// </summary>
    [DataContract(Name = "CustomerJuristicAccountUpdateRequest")]
    public partial class CustomerJuristicAccountUpdateRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerJuristicAccountUpdateRequest" /> class.
        /// </summary>
        /// <param name="juristicNumber">เลขที่ใบสำคัญการจดทะเบียน เช่น เลขทะเบียนการค้า เป็นต้น ต้อง unique ภายใต้ SA .</param>
        /// <param name="accountId">เลขที่บัญชี .</param>
        /// <param name="icLicense">icLicense.</param>
        /// <param name="accountOpenDate">accountOpenDate.</param>
        /// <param name="mailingAddressSameAsFlag">การกำหนดที่อยู่ที่ติดต่อให้เหมือนที่อยู่ที่เคยระบุ JuristicRegistration&#x3D; เหมือนที่อยู่จดทะเบียน .</param>
        /// <param name="mailing">mailing.</param>
        /// <param name="mailingMethod">mailingMethod.</param>
        /// <param name="investmentObjective">investmentObjective.</param>
        /// <param name="investmentObjectiveOther">investmentObjectiveOther.</param>
        /// <param name="redemptionBankAccounts">redemptionBankAccounts.</param>
        /// <param name="subscriptionBankAccounts">subscriptionBankAccounts.</param>
        /// <param name="approved">approved.</param>
        /// <param name="openOmnibusFormFlag">openOmnibusFormFlag.</param>
        public CustomerJuristicAccountUpdateRequest(string juristicNumber = default(string), string accountId = default(string), string icLicense = default(string), string accountOpenDate = default(string), string mailingAddressSameAsFlag = default(string), Address mailing = default(Address), string mailingMethod = default(string), string investmentObjective = default(string), string investmentObjectiveOther = default(string), List<BankAccount> redemptionBankAccounts = default(List<BankAccount>), List<BankAccount> subscriptionBankAccounts = default(List<BankAccount>), bool approved = default(bool), bool openOmnibusFormFlag = default(bool))
        {
            this.JuristicNumber = juristicNumber;
            this.AccountId = accountId;
            this.IcLicense = icLicense;
            this.AccountOpenDate = accountOpenDate;
            this.MailingAddressSameAsFlag = mailingAddressSameAsFlag;
            this.Mailing = mailing;
            this.MailingMethod = mailingMethod;
            this.InvestmentObjective = investmentObjective;
            this.InvestmentObjectiveOther = investmentObjectiveOther;
            this.RedemptionBankAccounts = redemptionBankAccounts;
            this.SubscriptionBankAccounts = subscriptionBankAccounts;
            this.Approved = approved;
            this.OpenOmnibusFormFlag = openOmnibusFormFlag;
        }

        /// <summary>
        /// เลขที่ใบสำคัญการจดทะเบียน เช่น เลขทะเบียนการค้า เป็นต้น ต้อง unique ภายใต้ SA 
        /// </summary>
        /// <value>เลขที่ใบสำคัญการจดทะเบียน เช่น เลขทะเบียนการค้า เป็นต้น ต้อง unique ภายใต้ SA </value>
        [DataMember(Name = "juristicNumber", EmitDefaultValue = false)]
        public string JuristicNumber { get; set; }

        /// <summary>
        /// เลขที่บัญชี 
        /// </summary>
        /// <value>เลขที่บัญชี </value>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets IcLicense
        /// </summary>
        [DataMember(Name = "icLicense", EmitDefaultValue = false)]
        public string IcLicense { get; set; }

        /// <summary>
        /// Gets or Sets AccountOpenDate
        /// </summary>
        [DataMember(Name = "accountOpenDate", EmitDefaultValue = false)]
        public string AccountOpenDate { get; set; }

        /// <summary>
        /// การกำหนดที่อยู่ที่ติดต่อให้เหมือนที่อยู่ที่เคยระบุ JuristicRegistration&#x3D; เหมือนที่อยู่จดทะเบียน 
        /// </summary>
        /// <value>การกำหนดที่อยู่ที่ติดต่อให้เหมือนที่อยู่ที่เคยระบุ JuristicRegistration&#x3D; เหมือนที่อยู่จดทะเบียน </value>
        [DataMember(Name = "mailingAddressSameAsFlag", EmitDefaultValue = true)]
        public string MailingAddressSameAsFlag { get; set; }

        /// <summary>
        /// Gets or Sets Mailing
        /// </summary>
        [DataMember(Name = "mailing", EmitDefaultValue = false)]
        public Address Mailing { get; set; }

        /// <summary>
        /// Gets or Sets MailingMethod
        /// </summary>
        [DataMember(Name = "mailingMethod", EmitDefaultValue = false)]
        public string MailingMethod { get; set; }

        /// <summary>
        /// Gets or Sets InvestmentObjective
        /// </summary>
        [DataMember(Name = "investmentObjective", EmitDefaultValue = false)]
        public string InvestmentObjective { get; set; }

        /// <summary>
        /// Gets or Sets InvestmentObjectiveOther
        /// </summary>
        [DataMember(Name = "investmentObjectiveOther", EmitDefaultValue = false)]
        public string InvestmentObjectiveOther { get; set; }

        /// <summary>
        /// Gets or Sets RedemptionBankAccounts
        /// </summary>
        [DataMember(Name = "redemptionBankAccounts", EmitDefaultValue = false)]
        public List<BankAccount> RedemptionBankAccounts { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionBankAccounts
        /// </summary>
        [DataMember(Name = "subscriptionBankAccounts", EmitDefaultValue = false)]
        public List<BankAccount> SubscriptionBankAccounts { get; set; }

        /// <summary>
        /// Gets or Sets Approved
        /// </summary>
        [DataMember(Name = "approved", EmitDefaultValue = true)]
        public bool Approved { get; set; }

        /// <summary>
        /// Gets or Sets OpenOmnibusFormFlag
        /// </summary>
        [DataMember(Name = "openOmnibusFormFlag", EmitDefaultValue = true)]
        public bool OpenOmnibusFormFlag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerJuristicAccountUpdateRequest {\n");
            sb.Append("  JuristicNumber: ").Append(JuristicNumber).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  IcLicense: ").Append(IcLicense).Append("\n");
            sb.Append("  AccountOpenDate: ").Append(AccountOpenDate).Append("\n");
            sb.Append("  MailingAddressSameAsFlag: ").Append(MailingAddressSameAsFlag).Append("\n");
            sb.Append("  Mailing: ").Append(Mailing).Append("\n");
            sb.Append("  MailingMethod: ").Append(MailingMethod).Append("\n");
            sb.Append("  InvestmentObjective: ").Append(InvestmentObjective).Append("\n");
            sb.Append("  InvestmentObjectiveOther: ").Append(InvestmentObjectiveOther).Append("\n");
            sb.Append("  RedemptionBankAccounts: ").Append(RedemptionBankAccounts).Append("\n");
            sb.Append("  SubscriptionBankAccounts: ").Append(SubscriptionBankAccounts).Append("\n");
            sb.Append("  Approved: ").Append(Approved).Append("\n");
            sb.Append("  OpenOmnibusFormFlag: ").Append(OpenOmnibusFormFlag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // JuristicNumber (string) maxLength
            if (this.JuristicNumber != null && this.JuristicNumber.Length > 13)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JuristicNumber, length must be less than 13.", new[] { "JuristicNumber" });
            }

            // AccountId (string) maxLength
            if (this.AccountId != null && this.AccountId.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be less than 15.", new[] { "AccountId" });
            }

            // IcLicense (string) maxLength
            if (this.IcLicense != null && this.IcLicense.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IcLicense, length must be less than 10.", new[] { "IcLicense" });
            }

            yield break;
        }
    }

}
