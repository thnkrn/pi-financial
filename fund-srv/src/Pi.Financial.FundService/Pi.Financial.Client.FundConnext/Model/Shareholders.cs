/*
 * FundConnext
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Pi.Financial.Client.FundConnext.Client.FileParameter;
using OpenAPIDateConverter = Pi.Financial.Client.FundConnext.Client.OpenAPIDateConverter;

namespace Pi.Financial.Client.FundConnext.Model
{
    /// <summary>
    /// Shareholders
    /// </summary>
    [DataContract(Name = "Shareholders")]
    public partial class Shareholders : IValidatableObject
    {
        /// <summary>
        /// ประเภทของผู้ถือหุ้น INDIVIDUAL JURISTIC 
        /// </summary>
        /// <value>ประเภทของผู้ถือหุ้น INDIVIDUAL JURISTIC </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum INDIVIDUAL for value: INDIVIDUAL
            /// </summary>
            [EnumMember(Value = "INDIVIDUAL")]
            INDIVIDUAL = 1,

            /// <summary>
            /// Enum JURISTIC for value: JURISTIC
            /// </summary>
            [EnumMember(Value = "JURISTIC")]
            JURISTIC = 2
        }


        /// <summary>
        /// ประเภทของผู้ถือหุ้น INDIVIDUAL JURISTIC 
        /// </summary>
        /// <value>ประเภทของผู้ถือหุ้น INDIVIDUAL JURISTIC </value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// ประเภทบัตรที่เปิดบัญชี PASSPORT CITIZEN_CARD&#x3D;บัตรประชาชน ALIEN_CARD&#x3D;บัตรต่างด้าว (mandatory กรณี type &#x3D; INDIVIDUAL)
        /// </summary>
        /// <value>ประเภทบัตรที่เปิดบัญชี PASSPORT CITIZEN_CARD&#x3D;บัตรประชาชน ALIEN_CARD&#x3D;บัตรต่างด้าว (mandatory กรณี type &#x3D; INDIVIDUAL)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IdentificationCardTypeEnum
        {
            /// <summary>
            /// Enum PASSPORT for value: PASSPORT
            /// </summary>
            [EnumMember(Value = "PASSPORT")]
            PASSPORT = 1,

            /// <summary>
            /// Enum CITIZENCARD for value: CITIZEN_CARD
            /// </summary>
            [EnumMember(Value = "CITIZEN_CARD")]
            CITIZENCARD = 2,

            /// <summary>
            /// Enum ALIENCARD for value: ALIEN_CARD
            /// </summary>
            [EnumMember(Value = "ALIEN_CARD")]
            ALIENCARD = 3
        }


        /// <summary>
        /// ประเภทบัตรที่เปิดบัญชี PASSPORT CITIZEN_CARD&#x3D;บัตรประชาชน ALIEN_CARD&#x3D;บัตรต่างด้าว (mandatory กรณี type &#x3D; INDIVIDUAL)
        /// </summary>
        /// <value>ประเภทบัตรที่เปิดบัญชี PASSPORT CITIZEN_CARD&#x3D;บัตรประชาชน ALIEN_CARD&#x3D;บัตรต่างด้าว (mandatory กรณี type &#x3D; INDIVIDUAL)</value>
        [DataMember(Name = "identificationCardType", EmitDefaultValue = true)]
        public IdentificationCardTypeEnum? IdentificationCardType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Shareholders" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Shareholders() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Shareholders" /> class.
        /// </summary>
        /// <param name="type">ประเภทของผู้ถือหุ้น INDIVIDUAL JURISTIC  (required).</param>
        /// <param name="nationality">รหัส สัญชาติ อ้างอิงตาม sheet Nationality .</param>
        /// <param name="identificationCardType">ประเภทบัตรที่เปิดบัญชี PASSPORT CITIZEN_CARD&#x3D;บัตรประชาชน ALIEN_CARD&#x3D;บัตรต่างด้าว (mandatory กรณี type &#x3D; INDIVIDUAL).</param>
        /// <param name="passportCountry">รหัสประเทศที่ออก passport (mandatory กรณี IdentificationCardType &#x3D; PASSPORT) .</param>
        /// <param name="cardNumber">เลขที่บัตรที่เปิดบัญชี Validate: check digit เฉพาะ identificationCardType &#x3D; CITIZEN_CARD .</param>
        /// <param name="cardExpiryDate">วันที่หมดอายุบัตร เป็น ค.ศ. (YYYYMMDD) (mandatory กรณี IdentificationCardType &#x3D; PASSPORT หรือ ALIEN_CARD) .</param>
        /// <param name="firstName">ชื่อ ภาษาไทย หรือชื่อบริษัท  (required).</param>
        /// <param name="lastName">นามสกุล ภาษาไทย (mandatory กรณี type &#x3D; INDIVIDUAL) .</param>
        /// <param name="juristicNumber">เลขที่ใบสำคัญการจดทะเบียน เช่น เลขทะเบียนการค้า เป็นต้น (mandatory กรณี type &#x3D; JURISTIC) .</param>
        /// <param name="registeredCountryCode">รหัสประเทศที่จดทะเบียน (mandatory กรณี type &#x3D; JURISTIC) .</param>
        /// <param name="varShareholders">varShareholders.</param>
        public Shareholders(TypeEnum type = default(TypeEnum), string nationality = default(string), IdentificationCardTypeEnum? identificationCardType = default(IdentificationCardTypeEnum?), string passportCountry = default(string), string cardNumber = default(string), string cardExpiryDate = default(string), string firstName = default(string), string lastName = default(string), string juristicNumber = default(string), string registeredCountryCode = default(string), List<ShareholdersShareholdersInner> varShareholders = default(List<ShareholdersShareholdersInner>))
        {
            this.Type = type;
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new ArgumentNullException("firstName is a required property for Shareholders and cannot be null");
            }
            this.FirstName = firstName;
            this.Nationality = nationality;
            this.IdentificationCardType = identificationCardType;
            this.PassportCountry = passportCountry;
            this.CardNumber = cardNumber;
            this.CardExpiryDate = cardExpiryDate;
            this.LastName = lastName;
            this.JuristicNumber = juristicNumber;
            this.RegisteredCountryCode = registeredCountryCode;
            this.VarShareholders = varShareholders;
        }

        /// <summary>
        /// รหัส สัญชาติ อ้างอิงตาม sheet Nationality 
        /// </summary>
        /// <value>รหัส สัญชาติ อ้างอิงตาม sheet Nationality </value>
        [DataMember(Name = "nationality", EmitDefaultValue = true)]
        public string Nationality { get; set; }

        /// <summary>
        /// รหัสประเทศที่ออก passport (mandatory กรณี IdentificationCardType &#x3D; PASSPORT) 
        /// </summary>
        /// <value>รหัสประเทศที่ออก passport (mandatory กรณี IdentificationCardType &#x3D; PASSPORT) </value>
        [DataMember(Name = "passportCountry", EmitDefaultValue = true)]
        public string PassportCountry { get; set; }

        /// <summary>
        /// เลขที่บัตรที่เปิดบัญชี Validate: check digit เฉพาะ identificationCardType &#x3D; CITIZEN_CARD 
        /// </summary>
        /// <value>เลขที่บัตรที่เปิดบัญชี Validate: check digit เฉพาะ identificationCardType &#x3D; CITIZEN_CARD </value>
        [DataMember(Name = "cardNumber", EmitDefaultValue = true)]
        public string CardNumber { get; set; }

        /// <summary>
        /// วันที่หมดอายุบัตร เป็น ค.ศ. (YYYYMMDD) (mandatory กรณี IdentificationCardType &#x3D; PASSPORT หรือ ALIEN_CARD) 
        /// </summary>
        /// <value>วันที่หมดอายุบัตร เป็น ค.ศ. (YYYYMMDD) (mandatory กรณี IdentificationCardType &#x3D; PASSPORT หรือ ALIEN_CARD) </value>
        [DataMember(Name = "cardExpiryDate", EmitDefaultValue = true)]
        public string CardExpiryDate { get; set; }

        /// <summary>
        /// ชื่อ ภาษาไทย หรือชื่อบริษัท 
        /// </summary>
        /// <value>ชื่อ ภาษาไทย หรือชื่อบริษัท </value>
        [DataMember(Name = "firstName", IsRequired = true, EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// นามสกุล ภาษาไทย (mandatory กรณี type &#x3D; INDIVIDUAL) 
        /// </summary>
        /// <value>นามสกุล ภาษาไทย (mandatory กรณี type &#x3D; INDIVIDUAL) </value>
        [DataMember(Name = "lastName", EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// เลขที่ใบสำคัญการจดทะเบียน เช่น เลขทะเบียนการค้า เป็นต้น (mandatory กรณี type &#x3D; JURISTIC) 
        /// </summary>
        /// <value>เลขที่ใบสำคัญการจดทะเบียน เช่น เลขทะเบียนการค้า เป็นต้น (mandatory กรณี type &#x3D; JURISTIC) </value>
        [DataMember(Name = "juristicNumber", EmitDefaultValue = true)]
        public string JuristicNumber { get; set; }

        /// <summary>
        /// รหัสประเทศที่จดทะเบียน (mandatory กรณี type &#x3D; JURISTIC) 
        /// </summary>
        /// <value>รหัสประเทศที่จดทะเบียน (mandatory กรณี type &#x3D; JURISTIC) </value>
        [DataMember(Name = "registeredCountryCode", EmitDefaultValue = true)]
        public string RegisteredCountryCode { get; set; }

        /// <summary>
        /// Gets or Sets VarShareholders
        /// </summary>
        [DataMember(Name = "shareholders", EmitDefaultValue = false)]
        public List<ShareholdersShareholdersInner> VarShareholders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Shareholders {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Nationality: ").Append(Nationality).Append("\n");
            sb.Append("  IdentificationCardType: ").Append(IdentificationCardType).Append("\n");
            sb.Append("  PassportCountry: ").Append(PassportCountry).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  CardExpiryDate: ").Append(CardExpiryDate).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  JuristicNumber: ").Append(JuristicNumber).Append("\n");
            sb.Append("  RegisteredCountryCode: ").Append(RegisteredCountryCode).Append("\n");
            sb.Append("  VarShareholders: ").Append(VarShareholders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Nationality (string) maxLength
            if (this.Nationality != null && this.Nationality.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Nationality, length must be less than 2.", new[] { "Nationality" });
            }

            // PassportCountry (string) maxLength
            if (this.PassportCountry != null && this.PassportCountry.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PassportCountry, length must be less than 2.", new[] { "PassportCountry" });
            }

            // CardNumber (string) maxLength
            if (this.CardNumber != null && this.CardNumber.Length > 13)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardNumber, length must be less than 13.", new[] { "CardNumber" });
            }

            // CardExpiryDate (string) maxLength
            if (this.CardExpiryDate != null && this.CardExpiryDate.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardExpiryDate, length must be less than 8.", new[] { "CardExpiryDate" });
            }

            // CardExpiryDate (string) minLength
            if (this.CardExpiryDate != null && this.CardExpiryDate.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardExpiryDate, length must be greater than 8.", new[] { "CardExpiryDate" });
            }

            if (this.CardExpiryDate != null)
            {
                // CardExpiryDate (string) pattern
                Regex regexCardExpiryDate = new Regex(@"^((19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))$", RegexOptions.CultureInvariant);
                if (!regexCardExpiryDate.Match(this.CardExpiryDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardExpiryDate, must match a pattern of " + regexCardExpiryDate, new[] { "CardExpiryDate" });
                }
            }

            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 100.", new[] { "FirstName" });
            }

            // FirstName (string) minLength
            if (this.FirstName != null && this.FirstName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be greater than 1.", new[] { "FirstName" });
            }

            // LastName (string) maxLength
            if (this.LastName != null && this.LastName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 100.", new[] { "LastName" });
            }

            // JuristicNumber (string) maxLength
            if (this.JuristicNumber != null && this.JuristicNumber.Length > 13)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JuristicNumber, length must be less than 13.", new[] { "JuristicNumber" });
            }

            // RegisteredCountryCode (string) maxLength
            if (this.RegisteredCountryCode != null && this.RegisteredCountryCode.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RegisteredCountryCode, length must be less than 2.", new[] { "RegisteredCountryCode" });
            }

            // RegisteredCountryCode (string) minLength
            if (this.RegisteredCountryCode != null && this.RegisteredCountryCode.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RegisteredCountryCode, length must be greater than 2.", new[] { "RegisteredCountryCode" });
            }

            yield break;
        }
    }

}
