/*
 * FundConnext
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Pi.Financial.Client.FundConnext.Client.FileParameter;
using OpenAPIDateConverter = Pi.Financial.Client.FundConnext.Client.OpenAPIDateConverter;

namespace Pi.Financial.Client.FundConnext.Model
{
    /// <summary>
    /// Juristic profile object V5 (improve V4 with CRS data)&lt;br/&gt;Change businessTypeId&#39;s Type from Char to Number(3)&lt;br/&gt;Change suitabilityRiskLevel&#39;s Type from Char to Number&lt;br/&gt;Change cddScore&#39;s Type from Char to Number&lt;br/&gt;Change subDistrict&#39;s key to subdistrict in address object (registrationAddress, identificationDocument, current, work)
    /// </summary>
    [DataContract(Name = "JuristicInvestorV5Response")]
    public partial class JuristicInvestorV5Response : IValidatableObject
    {
        /// <summary>
        /// ประเภทนิติบุคคล  1 &#x3D; นิติบุคคลในประเทศ  2 &#x3D; นิติบุคคลต่างประเทศ  3 &#x3D; ห้างหุ้นส่วน  4 &#x3D; ส่วนราชการ / รัฐวิสาหกิจ  5 &#x3D; สหกรณ์/ มูลนิธิ/ สมาคม/ สโมสร/ วัด/ มัสยิด/ ศาลเจ้า  6 &#x3D; อื่นๆ (โปรดระบุ) 
        /// </summary>
        /// <value>ประเภทนิติบุคคล  1 &#x3D; นิติบุคคลในประเทศ  2 &#x3D; นิติบุคคลต่างประเทศ  3 &#x3D; ห้างหุ้นส่วน  4 &#x3D; ส่วนราชการ / รัฐวิสาหกิจ  5 &#x3D; สหกรณ์/ มูลนิธิ/ สมาคม/ สโมสร/ วัด/ มัสยิด/ ศาลเจ้า  6 &#x3D; อื่นๆ (โปรดระบุ) </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum JuristicTypeEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 1,

            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 2,

            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 3,

            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 4,

            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 5,

            /// <summary>
            /// Enum _6 for value: 6
            /// </summary>
            [EnumMember(Value = "6")]
            _6 = 6
        }


        /// <summary>
        /// ประเภทนิติบุคคล  1 &#x3D; นิติบุคคลในประเทศ  2 &#x3D; นิติบุคคลต่างประเทศ  3 &#x3D; ห้างหุ้นส่วน  4 &#x3D; ส่วนราชการ / รัฐวิสาหกิจ  5 &#x3D; สหกรณ์/ มูลนิธิ/ สมาคม/ สโมสร/ วัด/ มัสยิด/ ศาลเจ้า  6 &#x3D; อื่นๆ (โปรดระบุ) 
        /// </summary>
        /// <value>ประเภทนิติบุคคล  1 &#x3D; นิติบุคคลในประเทศ  2 &#x3D; นิติบุคคลต่างประเทศ  3 &#x3D; ห้างหุ้นส่วน  4 &#x3D; ส่วนราชการ / รัฐวิสาหกิจ  5 &#x3D; สหกรณ์/ มูลนิธิ/ สมาคม/ สโมสร/ วัด/ มัสยิด/ ศาลเจ้า  6 &#x3D; อื่นๆ (โปรดระบุ) </value>
        [DataMember(Name = "juristicType", EmitDefaultValue = false)]
        public JuristicTypeEnum? JuristicType { get; set; }
        /// <summary>
        /// ระดับความเสี่ยง(1-5) 
        /// </summary>
        /// <value>ระดับความเสี่ยง(1-5) </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SuitabilityRiskLevelEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 1,

            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 2,

            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 3,

            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 4,

            /// <summary>
            /// Enum _5 for value: 5
            /// </summary>
            [EnumMember(Value = "5")]
            _5 = 5
        }


        /// <summary>
        /// ระดับความเสี่ยง(1-5) 
        /// </summary>
        /// <value>ระดับความเสี่ยง(1-5) </value>
        [DataMember(Name = "suitabilityRiskLevel", EmitDefaultValue = false)]
        public SuitabilityRiskLevelEnum? SuitabilityRiskLevel { get; set; }
        /// <summary>
        /// 1. Active NFE 2. Passive NFE
        /// </summary>
        /// <value>1. Active NFE 2. Passive NFE</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CrsNfeTypeEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 1,

            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 2
        }


        /// <summary>
        /// 1. Active NFE 2. Passive NFE
        /// </summary>
        /// <value>1. Active NFE 2. Passive NFE</value>
        [DataMember(Name = "crsNfeType", EmitDefaultValue = true)]
        public CrsNfeTypeEnum? CrsNfeType { get; set; }
        /// <summary>
        /// รหัสประเภทธุรกิจ 20 - ค้าของเก่า /วัตถุโบราณ 30 - การเงิน/ธนาคาร 40 - คาสิโน/ การพนัน 60 - สหกรณ์/มูลนิธิ/สมาคม/สโมสร/วัด/มัสยิด/ศาลเจ้า 70 - สถานบริการตามกฎหมายว่าด้วยสถานบริการ 80 - แลกเปลี่ยนเงินตราต่างประเทศ 90 - โรงแรม/ภัตตาคาร 110 - ประกันภัย/ประกันชีวิต 120 - ค้าอัญมณี/ทอง 130 - โอนและรับโอนเงินทั้งภายในและต่างประเทศ 140 - อสังหาริมทรัพย์ 150 - มหาวิทยาลัย/โรงเรียน/สถานศึกษา 155 - ธุรกิจรับคนเข้ามาทำงานจากต่างประเทศหรือส่งคนไปทำงานต่างประเทศ 160 - ธุรกิจนำเที่ยว/บริษัททัวร์ 170 - อาวุธยุทธภัณฑ์ 180 - อื่นๆ 
        /// </summary>
        /// <value>รหัสประเภทธุรกิจ 20 - ค้าของเก่า /วัตถุโบราณ 30 - การเงิน/ธนาคาร 40 - คาสิโน/ การพนัน 60 - สหกรณ์/มูลนิธิ/สมาคม/สโมสร/วัด/มัสยิด/ศาลเจ้า 70 - สถานบริการตามกฎหมายว่าด้วยสถานบริการ 80 - แลกเปลี่ยนเงินตราต่างประเทศ 90 - โรงแรม/ภัตตาคาร 110 - ประกันภัย/ประกันชีวิต 120 - ค้าอัญมณี/ทอง 130 - โอนและรับโอนเงินทั้งภายในและต่างประเทศ 140 - อสังหาริมทรัพย์ 150 - มหาวิทยาลัย/โรงเรียน/สถานศึกษา 155 - ธุรกิจรับคนเข้ามาทำงานจากต่างประเทศหรือส่งคนไปทำงานต่างประเทศ 160 - ธุรกิจนำเที่ยว/บริษัททัวร์ 170 - อาวุธยุทธภัณฑ์ 180 - อื่นๆ </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BusinessTypeIdEnum
        {
            /// <summary>
            /// Enum _20 for value: 20
            /// </summary>
            [EnumMember(Value = "20")]
            _20 = 1,

            /// <summary>
            /// Enum _30 for value: 30
            /// </summary>
            [EnumMember(Value = "30")]
            _30 = 2,

            /// <summary>
            /// Enum _40 for value: 40
            /// </summary>
            [EnumMember(Value = "40")]
            _40 = 3,

            /// <summary>
            /// Enum _60 for value: 60
            /// </summary>
            [EnumMember(Value = "60")]
            _60 = 4,

            /// <summary>
            /// Enum _70 for value: 70
            /// </summary>
            [EnumMember(Value = "70")]
            _70 = 5,

            /// <summary>
            /// Enum _80 for value: 80
            /// </summary>
            [EnumMember(Value = "80")]
            _80 = 6,

            /// <summary>
            /// Enum _90 for value: 90
            /// </summary>
            [EnumMember(Value = "90")]
            _90 = 7,

            /// <summary>
            /// Enum _110 for value: 110
            /// </summary>
            [EnumMember(Value = "110")]
            _110 = 8,

            /// <summary>
            /// Enum _120 for value: 120
            /// </summary>
            [EnumMember(Value = "120")]
            _120 = 9,

            /// <summary>
            /// Enum _130 for value: 130
            /// </summary>
            [EnumMember(Value = "130")]
            _130 = 10,

            /// <summary>
            /// Enum _140 for value: 140
            /// </summary>
            [EnumMember(Value = "140")]
            _140 = 11,

            /// <summary>
            /// Enum _150 for value: 150
            /// </summary>
            [EnumMember(Value = "150")]
            _150 = 12,

            /// <summary>
            /// Enum _155 for value: 155
            /// </summary>
            [EnumMember(Value = "155")]
            _155 = 13,

            /// <summary>
            /// Enum _160 for value: 160
            /// </summary>
            [EnumMember(Value = "160")]
            _160 = 14,

            /// <summary>
            /// Enum _170 for value: 170
            /// </summary>
            [EnumMember(Value = "170")]
            _170 = 15,

            /// <summary>
            /// Enum _180 for value: 180
            /// </summary>
            [EnumMember(Value = "180")]
            _180 = 16
        }


        /// <summary>
        /// รหัสประเภทธุรกิจ 20 - ค้าของเก่า /วัตถุโบราณ 30 - การเงิน/ธนาคาร 40 - คาสิโน/ การพนัน 60 - สหกรณ์/มูลนิธิ/สมาคม/สโมสร/วัด/มัสยิด/ศาลเจ้า 70 - สถานบริการตามกฎหมายว่าด้วยสถานบริการ 80 - แลกเปลี่ยนเงินตราต่างประเทศ 90 - โรงแรม/ภัตตาคาร 110 - ประกันภัย/ประกันชีวิต 120 - ค้าอัญมณี/ทอง 130 - โอนและรับโอนเงินทั้งภายในและต่างประเทศ 140 - อสังหาริมทรัพย์ 150 - มหาวิทยาลัย/โรงเรียน/สถานศึกษา 155 - ธุรกิจรับคนเข้ามาทำงานจากต่างประเทศหรือส่งคนไปทำงานต่างประเทศ 160 - ธุรกิจนำเที่ยว/บริษัททัวร์ 170 - อาวุธยุทธภัณฑ์ 180 - อื่นๆ 
        /// </summary>
        /// <value>รหัสประเภทธุรกิจ 20 - ค้าของเก่า /วัตถุโบราณ 30 - การเงิน/ธนาคาร 40 - คาสิโน/ การพนัน 60 - สหกรณ์/มูลนิธิ/สมาคม/สโมสร/วัด/มัสยิด/ศาลเจ้า 70 - สถานบริการตามกฎหมายว่าด้วยสถานบริการ 80 - แลกเปลี่ยนเงินตราต่างประเทศ 90 - โรงแรม/ภัตตาคาร 110 - ประกันภัย/ประกันชีวิต 120 - ค้าอัญมณี/ทอง 130 - โอนและรับโอนเงินทั้งภายในและต่างประเทศ 140 - อสังหาริมทรัพย์ 150 - มหาวิทยาลัย/โรงเรียน/สถานศึกษา 155 - ธุรกิจรับคนเข้ามาทำงานจากต่างประเทศหรือส่งคนไปทำงานต่างประเทศ 160 - ธุรกิจนำเที่ยว/บริษัททัวร์ 170 - อาวุธยุทธภัณฑ์ 180 - อื่นๆ </value>
        [DataMember(Name = "businessTypeId", EmitDefaultValue = false)]
        public BusinessTypeIdEnum? BusinessTypeId { get; set; }
        /// <summary>
        /// มีการกรอกแบบฟอร์ม FundConnext แล้วหรือยัง Y &#x3D; แบบฟอร์ม FundConnext เดิม N &#x3D; ยังไม่ได้กรอกแบบฟอร์ม FundConnext S &#x3D; แบบฟอร์ม FundConnext (Single Form) 
        /// </summary>
        /// <value>มีการกรอกแบบฟอร์ม FundConnext แล้วหรือยัง Y &#x3D; แบบฟอร์ม FundConnext เดิม N &#x3D; ยังไม่ได้กรอกแบบฟอร์ม FundConnext S &#x3D; แบบฟอร์ม FundConnext (Single Form) </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OpenFundConnextFormFlagEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2,

            /// <summary>
            /// Enum S for value: S
            /// </summary>
            [EnumMember(Value = "S")]
            S = 3
        }


        /// <summary>
        /// มีการกรอกแบบฟอร์ม FundConnext แล้วหรือยัง Y &#x3D; แบบฟอร์ม FundConnext เดิม N &#x3D; ยังไม่ได้กรอกแบบฟอร์ม FundConnext S &#x3D; แบบฟอร์ม FundConnext (Single Form) 
        /// </summary>
        /// <value>มีการกรอกแบบฟอร์ม FundConnext แล้วหรือยัง Y &#x3D; แบบฟอร์ม FundConnext เดิม N &#x3D; ยังไม่ได้กรอกแบบฟอร์ม FundConnext S &#x3D; แบบฟอร์ม FundConnext (Single Form) </value>
        [DataMember(Name = "openFundConnextFormFlag", EmitDefaultValue = false)]
        public OpenFundConnextFormFlagEnum? OpenFundConnextFormFlag { get; set; }
        /// <summary>
        /// ประเภทของ Profile
        /// </summary>
        /// <value>ประเภทของ Profile</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InvestorTypeEnum
        {
            /// <summary>
            /// Enum JURISTIC for value: JURISTIC
            /// </summary>
            [EnumMember(Value = "JURISTIC")]
            JURISTIC = 1
        }


        /// <summary>
        /// ประเภทของ Profile
        /// </summary>
        /// <value>ประเภทของ Profile</value>
        [DataMember(Name = "investorType", EmitDefaultValue = false)]
        public InvestorTypeEnum? InvestorType { get; set; }
        /// <summary>
        /// ประเภทนักลงทุนตามเกณฑ์ SEC 1 &#x3D; UHNW : Ultra- High Net Worth 2 &#x3D; HNW : High Net Worth 4 &#x3D; I : Institutional Investor 
        /// </summary>
        /// <value>ประเภทนักลงทุนตามเกณฑ์ SEC 1 &#x3D; UHNW : Ultra- High Net Worth 2 &#x3D; HNW : High Net Worth 4 &#x3D; I : Institutional Investor </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InvestorClassEnum
        {
            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 1,

            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 2,

            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 3,

            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 4
        }


        /// <summary>
        /// ประเภทนักลงทุนตามเกณฑ์ SEC 1 &#x3D; UHNW : Ultra- High Net Worth 2 &#x3D; HNW : High Net Worth 4 &#x3D; I : Institutional Investor 
        /// </summary>
        /// <value>ประเภทนักลงทุนตามเกณฑ์ SEC 1 &#x3D; UHNW : Ultra- High Net Worth 2 &#x3D; HNW : High Net Worth 4 &#x3D; I : Institutional Investor </value>
        [DataMember(Name = "investorClass", EmitDefaultValue = true)]
        public InvestorClassEnum? InvestorClass { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="JuristicInvestorV5Response" /> class.
        /// </summary>
        /// <param name="juristicNumber">เลขที่ใบสำคัญการจดทะเบียน เช่น เลขทะเบียนการค้า เป็นต้น .</param>
        /// <param name="registeredCountryCode">รหัสประเทศที่จดทะเบียน .</param>
        /// <param name="taxNumber">เลขประจำตัวผู้เสียภาษี .</param>
        /// <param name="juristicType">ประเภทนิติบุคคล  1 &#x3D; นิติบุคคลในประเทศ  2 &#x3D; นิติบุคคลต่างประเทศ  3 &#x3D; ห้างหุ้นส่วน  4 &#x3D; ส่วนราชการ / รัฐวิสาหกิจ  5 &#x3D; สหกรณ์/ มูลนิธิ/ สมาคม/ สโมสร/ วัด/ มัสยิด/ ศาลเจ้า  6 &#x3D; อื่นๆ (โปรดระบุ) .</param>
        /// <param name="juristicTypeOther">ประเภทนิติบุคคลอื่นๆ (mandatory กรณี juristicType &#x3D; 6) .</param>
        /// <param name="taxExemptionFlag">ได้รับยกเว้นภาษีหรือไม่ true - ได้ false - ไม่ได้ (mandatory กรณี juristicType &#x3D; 1 และ 5) .</param>
        /// <param name="operatingInThailandFlag">ประกอบธุรกิจในไทยหรือไม่ true - ใช่ false - ใม่ใช่ (mandatory กรณี juristicType &#x3D; 2) .</param>
        /// <param name="enCompanyName">ชื่อภาษาอังกฤษ .</param>
        /// <param name="thCompanyName">ชื่อภาษาไทย .</param>
        /// <param name="canAcceptFxRisk">สามารถรับความเสี่ยงอัตราแลกเปลี่ยนได้หรือไม่ true - ได้ false - ไม่ได้ .</param>
        /// <param name="canAcceptDerivativeInvestment">สามารถรับความเสี่ยงจากตราสารอนุพันธ์ได้หรือไม่ true - ได้ false - ไม่ได้ .</param>
        /// <param name="suitabilityRiskLevel">ระดับความเสี่ยง(1-5) .</param>
        /// <param name="suitabilityEvaluationDate">วันที่ทำ suitability test .</param>
        /// <param name="fatca">เป็นบุคคลสัญชาติ US ตาม FATCA หรือไม่ true - ใช่ false - ไม่ใช่ .</param>
        /// <param name="fatcaDeclarationDate">วันที่ให้ข้อมูล FATCA .</param>
        /// <param name="crsDetails">crsDetails.</param>
        /// <param name="crsNfeType">1. Active NFE 2. Passive NFE.</param>
        /// <param name="crsDeclarationDate">วันที่ให้ข้อมูล CRS เป็น ค.ศ. (YYYYMMDD) .</param>
        /// <param name="businessTypeId">รหัสประเภทธุรกิจ 20 - ค้าของเก่า /วัตถุโบราณ 30 - การเงิน/ธนาคาร 40 - คาสิโน/ การพนัน 60 - สหกรณ์/มูลนิธิ/สมาคม/สโมสร/วัด/มัสยิด/ศาลเจ้า 70 - สถานบริการตามกฎหมายว่าด้วยสถานบริการ 80 - แลกเปลี่ยนเงินตราต่างประเทศ 90 - โรงแรม/ภัตตาคาร 110 - ประกันภัย/ประกันชีวิต 120 - ค้าอัญมณี/ทอง 130 - โอนและรับโอนเงินทั้งภายในและต่างประเทศ 140 - อสังหาริมทรัพย์ 150 - มหาวิทยาลัย/โรงเรียน/สถานศึกษา 155 - ธุรกิจรับคนเข้ามาทำงานจากต่างประเทศหรือส่งคนไปทำงานต่างประเทศ 160 - ธุรกิจนำเที่ยว/บริษัททัวร์ 170 - อาวุธยุทธภัณฑ์ 180 - อื่นๆ .</param>
        /// <param name="businessTypeOther">ประเภทธุรกิจอื่นๆ (mandatory กรณี businessTypeId &#x3D; 180) .</param>
        /// <param name="assetValue">มูลค่าทรัพย์สิน (บาท) .</param>
        /// <param name="shareholderEquity">ส่วนของผู้ถือหุ้น (บาท) .</param>
        /// <param name="incomeSource">ที่มาของรายได้ (สามารถเลือกได้มากกว่า 1 ข้อ แยกโดย comma (,) REVBUSINESS&#x3D;เงินจากการทำธุรกิจ REVPROP&#x3D;เงินจากการขายทรัพย์สิน STOCK&#x3D;ค่าหุ้น DONATION&#x3D;เงินบริจาค LOAN&#x3D;เงินกู้ OTHER &#x3D; อื่นๆ .</param>
        /// <param name="incomeSourceOther">เฉพาะกรณีระบุที่มารายได้เป็นอื่นๆ (mandatory incomeSource &#x3D; OTHER) .</param>
        /// <param name="incomeSourceCountry">รหัสประเทศ ของแหล่งที่มาของรายได้ .</param>
        /// <param name="annualIncomeBaht">รายได้รวมต่อปี (บาท) .</param>
        /// <param name="branchNo">รหัสสาขา ( 5 หลัก) ระบุ 00000 สำหรับสำนักงานใหญ่ default &#x3D; 00000 .</param>
        /// <param name="juristicConditionOfAuthorizedSignatories">เงื่อนไขการลงนามของบริษัท .</param>
        /// <param name="juristicDirectors">juristicDirectors.</param>
        /// <param name="shareholders">shareholders.</param>
        /// <param name="conditionOfAuthorizedSignatoriesForTransaction">เงื่อนไขการลงนามการทำธุรกรรม .</param>
        /// <param name="registrationAddress">registrationAddress.</param>
        /// <param name="cddScore">CDD Score&lt;/br&gt;(1-3)&lt;/br&gt;.</param>
        /// <param name="cddDate">วันที่ทำ CDD เป็น ค.ศ. (YYYYMMDD) .</param>
        /// <param name="referralPerson">ผู้แนะนำ .</param>
        /// <param name="applicationDate">วันที่เปิดบัญชี .</param>
        /// <param name="authorizedSignatories">authorizedSignatories.</param>
        /// <param name="acceptedBy">ผู้รับเปิดบัญชี .</param>
        /// <param name="openFundConnextFormFlag">มีการกรอกแบบฟอร์ม FundConnext แล้วหรือยัง Y &#x3D; แบบฟอร์ม FundConnext เดิม N &#x3D; ยังไม่ได้กรอกแบบฟอร์ม FundConnext S &#x3D; แบบฟอร์ม FundConnext (Single Form) .</param>
        /// <param name="investorType">ประเภทของ Profile.</param>
        /// <param name="accounts">Array ของ account (Please refer to AccountResponse schema).</param>
        /// <param name="approvedDate">วันที่ approve การเปิด/แก้ไข เป็น ค.ศ. (YYYYMMDD).</param>
        /// <param name="approvedDateTime">วันเวลาที่ approve การเปิด/แก้ไข เป็น ค.ศ.+ชั่วโมงนาทีวินาที (YYYYMMDDHHmmss).</param>
        /// <param name="contactPerson">contactPerson.</param>
        /// <param name="endBeneficiary">endBeneficiary.</param>
        /// <param name="suitabilityForm">suitabilityForm.</param>
        /// <param name="investorClass">ประเภทนักลงทุนตามเกณฑ์ SEC 1 &#x3D; UHNW : Ultra- High Net Worth 2 &#x3D; HNW : High Net Worth 4 &#x3D; I : Institutional Investor .</param>
        /// <param name="knowledgeAssessmentResult">ผลลัพธ์การประเมิณความรู้ความสามารถในการลงทุน true &#x3D; ยอมรับ false &#x3D; ไม่ยอมรับ.</param>
        /// <param name="knowledgeAssessmentForm">knowledgeAssessmentForm.</param>
        public JuristicInvestorV5Response(string juristicNumber = default(string), string registeredCountryCode = default(string), string taxNumber = default(string), JuristicTypeEnum? juristicType = default(JuristicTypeEnum?), string juristicTypeOther = default(string), bool? taxExemptionFlag = default(bool?), bool? operatingInThailandFlag = default(bool?), string enCompanyName = default(string), string thCompanyName = default(string), bool canAcceptFxRisk = default(bool), bool canAcceptDerivativeInvestment = default(bool), SuitabilityRiskLevelEnum? suitabilityRiskLevel = default(SuitabilityRiskLevelEnum?), string suitabilityEvaluationDate = default(string), bool fatca = default(bool), string fatcaDeclarationDate = default(string), List<JuristicInvestorV5ResponseCrsDetailsInner> crsDetails = default(List<JuristicInvestorV5ResponseCrsDetailsInner>), CrsNfeTypeEnum? crsNfeType = default(CrsNfeTypeEnum?), string crsDeclarationDate = default(string), BusinessTypeIdEnum? businessTypeId = default(BusinessTypeIdEnum?), string businessTypeOther = default(string), decimal? assetValue = default(decimal?), decimal? shareholderEquity = default(decimal?), string incomeSource = default(string), string incomeSourceOther = default(string), string incomeSourceCountry = default(string), decimal? annualIncomeBaht = default(decimal?), string branchNo = default(string), string juristicConditionOfAuthorizedSignatories = default(string), List<JuristicInvestorV5ResponseJuristicDirectorsInner> juristicDirectors = default(List<JuristicInvestorV5ResponseJuristicDirectorsInner>), List<JuristicInvestorV5ResponseShareholdersInner> shareholders = default(List<JuristicInvestorV5ResponseShareholdersInner>), string conditionOfAuthorizedSignatoriesForTransaction = default(string), JuristicInvestorV5ResponseRegistrationAddress registrationAddress = default(JuristicInvestorV5ResponseRegistrationAddress), decimal cddScore = default(decimal), string cddDate = default(string), string referralPerson = default(string), string applicationDate = default(string), List<JuristicInvestorV5ResponseAuthorizedSignatoriesInner> authorizedSignatories = default(List<JuristicInvestorV5ResponseAuthorizedSignatoriesInner>), string acceptedBy = default(string), OpenFundConnextFormFlagEnum? openFundConnextFormFlag = default(OpenFundConnextFormFlagEnum?), InvestorTypeEnum? investorType = default(InvestorTypeEnum?), List<AccountResponse> accounts = default(List<AccountResponse>), string approvedDate = default(string), string approvedDateTime = default(string), List<JuristicInvestorV5ResponseContactPersonInner> contactPerson = default(List<JuristicInvestorV5ResponseContactPersonInner>), List<JuristicInvestorV5ResponseEndBeneficiaryInner> endBeneficiary = default(List<JuristicInvestorV5ResponseEndBeneficiaryInner>), JuristicInvestorV5ResponseSuitabilityForm suitabilityForm = default(JuristicInvestorV5ResponseSuitabilityForm), InvestorClassEnum? investorClass = default(InvestorClassEnum?), bool? knowledgeAssessmentResult = default(bool?), JuristicInvestorV5ResponseKnowledgeAssessmentForm knowledgeAssessmentForm = default(JuristicInvestorV5ResponseKnowledgeAssessmentForm))
        {
            this.JuristicNumber = juristicNumber;
            this.RegisteredCountryCode = registeredCountryCode;
            this.TaxNumber = taxNumber;
            this.JuristicType = juristicType;
            this.JuristicTypeOther = juristicTypeOther;
            this.TaxExemptionFlag = taxExemptionFlag;
            this.OperatingInThailandFlag = operatingInThailandFlag;
            this.EnCompanyName = enCompanyName;
            this.ThCompanyName = thCompanyName;
            this.CanAcceptFxRisk = canAcceptFxRisk;
            this.CanAcceptDerivativeInvestment = canAcceptDerivativeInvestment;
            this.SuitabilityRiskLevel = suitabilityRiskLevel;
            this.SuitabilityEvaluationDate = suitabilityEvaluationDate;
            this.Fatca = fatca;
            this.FatcaDeclarationDate = fatcaDeclarationDate;
            this.CrsDetails = crsDetails;
            this.CrsNfeType = crsNfeType;
            this.CrsDeclarationDate = crsDeclarationDate;
            this.BusinessTypeId = businessTypeId;
            this.BusinessTypeOther = businessTypeOther;
            this.AssetValue = assetValue;
            this.ShareholderEquity = shareholderEquity;
            this.IncomeSource = incomeSource;
            this.IncomeSourceOther = incomeSourceOther;
            this.IncomeSourceCountry = incomeSourceCountry;
            this.AnnualIncomeBaht = annualIncomeBaht;
            this.BranchNo = branchNo;
            this.JuristicConditionOfAuthorizedSignatories = juristicConditionOfAuthorizedSignatories;
            this.JuristicDirectors = juristicDirectors;
            this.Shareholders = shareholders;
            this.ConditionOfAuthorizedSignatoriesForTransaction = conditionOfAuthorizedSignatoriesForTransaction;
            this.RegistrationAddress = registrationAddress;
            this.CddScore = cddScore;
            this.CddDate = cddDate;
            this.ReferralPerson = referralPerson;
            this.ApplicationDate = applicationDate;
            this.AuthorizedSignatories = authorizedSignatories;
            this.AcceptedBy = acceptedBy;
            this.OpenFundConnextFormFlag = openFundConnextFormFlag;
            this.InvestorType = investorType;
            this.Accounts = accounts;
            this.ApprovedDate = approvedDate;
            this.ApprovedDateTime = approvedDateTime;
            this.ContactPerson = contactPerson;
            this.EndBeneficiary = endBeneficiary;
            this.SuitabilityForm = suitabilityForm;
            this.InvestorClass = investorClass;
            this.KnowledgeAssessmentResult = knowledgeAssessmentResult;
            this.KnowledgeAssessmentForm = knowledgeAssessmentForm;
        }

        /// <summary>
        /// เลขที่ใบสำคัญการจดทะเบียน เช่น เลขทะเบียนการค้า เป็นต้น 
        /// </summary>
        /// <value>เลขที่ใบสำคัญการจดทะเบียน เช่น เลขทะเบียนการค้า เป็นต้น </value>
        [DataMember(Name = "juristicNumber", EmitDefaultValue = false)]
        public string JuristicNumber { get; set; }

        /// <summary>
        /// รหัสประเทศที่จดทะเบียน 
        /// </summary>
        /// <value>รหัสประเทศที่จดทะเบียน </value>
        [DataMember(Name = "registeredCountryCode", EmitDefaultValue = false)]
        public string RegisteredCountryCode { get; set; }

        /// <summary>
        /// เลขประจำตัวผู้เสียภาษี 
        /// </summary>
        /// <value>เลขประจำตัวผู้เสียภาษี </value>
        [DataMember(Name = "taxNumber", EmitDefaultValue = false)]
        public string TaxNumber { get; set; }

        /// <summary>
        /// ประเภทนิติบุคคลอื่นๆ (mandatory กรณี juristicType &#x3D; 6) 
        /// </summary>
        /// <value>ประเภทนิติบุคคลอื่นๆ (mandatory กรณี juristicType &#x3D; 6) </value>
        [DataMember(Name = "juristicTypeOther", EmitDefaultValue = true)]
        public string JuristicTypeOther { get; set; }

        /// <summary>
        /// ได้รับยกเว้นภาษีหรือไม่ true - ได้ false - ไม่ได้ (mandatory กรณี juristicType &#x3D; 1 และ 5) 
        /// </summary>
        /// <value>ได้รับยกเว้นภาษีหรือไม่ true - ได้ false - ไม่ได้ (mandatory กรณี juristicType &#x3D; 1 และ 5) </value>
        [DataMember(Name = "taxExemptionFlag", EmitDefaultValue = true)]
        public bool? TaxExemptionFlag { get; set; }

        /// <summary>
        /// ประกอบธุรกิจในไทยหรือไม่ true - ใช่ false - ใม่ใช่ (mandatory กรณี juristicType &#x3D; 2) 
        /// </summary>
        /// <value>ประกอบธุรกิจในไทยหรือไม่ true - ใช่ false - ใม่ใช่ (mandatory กรณี juristicType &#x3D; 2) </value>
        [DataMember(Name = "operatingInThailandFlag", EmitDefaultValue = true)]
        public bool? OperatingInThailandFlag { get; set; }

        /// <summary>
        /// ชื่อภาษาอังกฤษ 
        /// </summary>
        /// <value>ชื่อภาษาอังกฤษ </value>
        [DataMember(Name = "enCompanyName", EmitDefaultValue = false)]
        public string EnCompanyName { get; set; }

        /// <summary>
        /// ชื่อภาษาไทย 
        /// </summary>
        /// <value>ชื่อภาษาไทย </value>
        [DataMember(Name = "thCompanyName", EmitDefaultValue = false)]
        public string ThCompanyName { get; set; }

        /// <summary>
        /// สามารถรับความเสี่ยงอัตราแลกเปลี่ยนได้หรือไม่ true - ได้ false - ไม่ได้ 
        /// </summary>
        /// <value>สามารถรับความเสี่ยงอัตราแลกเปลี่ยนได้หรือไม่ true - ได้ false - ไม่ได้ </value>
        [DataMember(Name = "canAcceptFxRisk", EmitDefaultValue = true)]
        public bool CanAcceptFxRisk { get; set; }

        /// <summary>
        /// สามารถรับความเสี่ยงจากตราสารอนุพันธ์ได้หรือไม่ true - ได้ false - ไม่ได้ 
        /// </summary>
        /// <value>สามารถรับความเสี่ยงจากตราสารอนุพันธ์ได้หรือไม่ true - ได้ false - ไม่ได้ </value>
        [DataMember(Name = "canAcceptDerivativeInvestment", EmitDefaultValue = true)]
        public bool CanAcceptDerivativeInvestment { get; set; }

        /// <summary>
        /// วันที่ทำ suitability test 
        /// </summary>
        /// <value>วันที่ทำ suitability test </value>
        [DataMember(Name = "suitabilityEvaluationDate", EmitDefaultValue = false)]
        public string SuitabilityEvaluationDate { get; set; }

        /// <summary>
        /// เป็นบุคคลสัญชาติ US ตาม FATCA หรือไม่ true - ใช่ false - ไม่ใช่ 
        /// </summary>
        /// <value>เป็นบุคคลสัญชาติ US ตาม FATCA หรือไม่ true - ใช่ false - ไม่ใช่ </value>
        [DataMember(Name = "fatca", EmitDefaultValue = true)]
        public bool Fatca { get; set; }

        /// <summary>
        /// วันที่ให้ข้อมูล FATCA 
        /// </summary>
        /// <value>วันที่ให้ข้อมูล FATCA </value>
        [DataMember(Name = "fatcaDeclarationDate", EmitDefaultValue = false)]
        public string FatcaDeclarationDate { get; set; }

        /// <summary>
        /// Gets or Sets CrsDetails
        /// </summary>
        [DataMember(Name = "crsDetails", EmitDefaultValue = false)]
        public List<JuristicInvestorV5ResponseCrsDetailsInner> CrsDetails { get; set; }

        /// <summary>
        /// วันที่ให้ข้อมูล CRS เป็น ค.ศ. (YYYYMMDD) 
        /// </summary>
        /// <value>วันที่ให้ข้อมูล CRS เป็น ค.ศ. (YYYYMMDD) </value>
        [DataMember(Name = "crsDeclarationDate", EmitDefaultValue = false)]
        public string CrsDeclarationDate { get; set; }

        /// <summary>
        /// ประเภทธุรกิจอื่นๆ (mandatory กรณี businessTypeId &#x3D; 180) 
        /// </summary>
        /// <value>ประเภทธุรกิจอื่นๆ (mandatory กรณี businessTypeId &#x3D; 180) </value>
        [DataMember(Name = "businessTypeOther", EmitDefaultValue = true)]
        public string BusinessTypeOther { get; set; }

        /// <summary>
        /// มูลค่าทรัพย์สิน (บาท) 
        /// </summary>
        /// <value>มูลค่าทรัพย์สิน (บาท) </value>
        [DataMember(Name = "assetValue", EmitDefaultValue = true)]
        public decimal? AssetValue { get; set; }

        /// <summary>
        /// ส่วนของผู้ถือหุ้น (บาท) 
        /// </summary>
        /// <value>ส่วนของผู้ถือหุ้น (บาท) </value>
        [DataMember(Name = "shareholderEquity", EmitDefaultValue = true)]
        public decimal? ShareholderEquity { get; set; }

        /// <summary>
        /// ที่มาของรายได้ (สามารถเลือกได้มากกว่า 1 ข้อ แยกโดย comma (,) REVBUSINESS&#x3D;เงินจากการทำธุรกิจ REVPROP&#x3D;เงินจากการขายทรัพย์สิน STOCK&#x3D;ค่าหุ้น DONATION&#x3D;เงินบริจาค LOAN&#x3D;เงินกู้ OTHER &#x3D; อื่นๆ 
        /// </summary>
        /// <value>ที่มาของรายได้ (สามารถเลือกได้มากกว่า 1 ข้อ แยกโดย comma (,) REVBUSINESS&#x3D;เงินจากการทำธุรกิจ REVPROP&#x3D;เงินจากการขายทรัพย์สิน STOCK&#x3D;ค่าหุ้น DONATION&#x3D;เงินบริจาค LOAN&#x3D;เงินกู้ OTHER &#x3D; อื่นๆ </value>
        [DataMember(Name = "incomeSource", EmitDefaultValue = false)]
        public string IncomeSource { get; set; }

        /// <summary>
        /// เฉพาะกรณีระบุที่มารายได้เป็นอื่นๆ (mandatory incomeSource &#x3D; OTHER) 
        /// </summary>
        /// <value>เฉพาะกรณีระบุที่มารายได้เป็นอื่นๆ (mandatory incomeSource &#x3D; OTHER) </value>
        [DataMember(Name = "incomeSourceOther", EmitDefaultValue = true)]
        public string IncomeSourceOther { get; set; }

        /// <summary>
        /// รหัสประเทศ ของแหล่งที่มาของรายได้ 
        /// </summary>
        /// <value>รหัสประเทศ ของแหล่งที่มาของรายได้ </value>
        [DataMember(Name = "incomeSourceCountry", EmitDefaultValue = false)]
        public string IncomeSourceCountry { get; set; }

        /// <summary>
        /// รายได้รวมต่อปี (บาท) 
        /// </summary>
        /// <value>รายได้รวมต่อปี (บาท) </value>
        [DataMember(Name = "annualIncomeBaht", EmitDefaultValue = true)]
        public decimal? AnnualIncomeBaht { get; set; }

        /// <summary>
        /// รหัสสาขา ( 5 หลัก) ระบุ 00000 สำหรับสำนักงานใหญ่ default &#x3D; 00000 
        /// </summary>
        /// <value>รหัสสาขา ( 5 หลัก) ระบุ 00000 สำหรับสำนักงานใหญ่ default &#x3D; 00000 </value>
        [DataMember(Name = "branchNo", EmitDefaultValue = true)]
        public string BranchNo { get; set; }

        /// <summary>
        /// เงื่อนไขการลงนามของบริษัท 
        /// </summary>
        /// <value>เงื่อนไขการลงนามของบริษัท </value>
        [DataMember(Name = "juristicConditionOfAuthorizedSignatories", EmitDefaultValue = false)]
        public string JuristicConditionOfAuthorizedSignatories { get; set; }

        /// <summary>
        /// Gets or Sets JuristicDirectors
        /// </summary>
        [DataMember(Name = "juristicDirectors", EmitDefaultValue = false)]
        public List<JuristicInvestorV5ResponseJuristicDirectorsInner> JuristicDirectors { get; set; }

        /// <summary>
        /// Gets or Sets Shareholders
        /// </summary>
        [DataMember(Name = "shareholders", EmitDefaultValue = true)]
        public List<JuristicInvestorV5ResponseShareholdersInner> Shareholders { get; set; }

        /// <summary>
        /// เงื่อนไขการลงนามการทำธุรกรรม 
        /// </summary>
        /// <value>เงื่อนไขการลงนามการทำธุรกรรม </value>
        [DataMember(Name = "conditionOfAuthorizedSignatoriesForTransaction", EmitDefaultValue = false)]
        public string ConditionOfAuthorizedSignatoriesForTransaction { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationAddress
        /// </summary>
        [DataMember(Name = "registrationAddress", EmitDefaultValue = false)]
        public JuristicInvestorV5ResponseRegistrationAddress RegistrationAddress { get; set; }

        /// <summary>
        /// CDD Score&lt;/br&gt;(1-3)&lt;/br&gt;
        /// </summary>
        /// <value>CDD Score&lt;/br&gt;(1-3)&lt;/br&gt;</value>
        [DataMember(Name = "cddScore", EmitDefaultValue = false)]
        public decimal CddScore { get; set; }

        /// <summary>
        /// วันที่ทำ CDD เป็น ค.ศ. (YYYYMMDD) 
        /// </summary>
        /// <value>วันที่ทำ CDD เป็น ค.ศ. (YYYYMMDD) </value>
        [DataMember(Name = "cddDate", EmitDefaultValue = true)]
        public string CddDate { get; set; }

        /// <summary>
        /// ผู้แนะนำ 
        /// </summary>
        /// <value>ผู้แนะนำ </value>
        [DataMember(Name = "referralPerson", EmitDefaultValue = true)]
        public string ReferralPerson { get; set; }

        /// <summary>
        /// วันที่เปิดบัญชี 
        /// </summary>
        /// <value>วันที่เปิดบัญชี </value>
        [DataMember(Name = "applicationDate", EmitDefaultValue = false)]
        public string ApplicationDate { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizedSignatories
        /// </summary>
        [DataMember(Name = "authorizedSignatories", EmitDefaultValue = false)]
        public List<JuristicInvestorV5ResponseAuthorizedSignatoriesInner> AuthorizedSignatories { get; set; }

        /// <summary>
        /// ผู้รับเปิดบัญชี 
        /// </summary>
        /// <value>ผู้รับเปิดบัญชี </value>
        [DataMember(Name = "acceptedBy", EmitDefaultValue = true)]
        public string AcceptedBy { get; set; }

        /// <summary>
        /// Array ของ account (Please refer to AccountResponse schema)
        /// </summary>
        /// <value>Array ของ account (Please refer to AccountResponse schema)</value>
        [DataMember(Name = "accounts", EmitDefaultValue = false)]
        public List<AccountResponse> Accounts { get; set; }

        /// <summary>
        /// วันที่ approve การเปิด/แก้ไข เป็น ค.ศ. (YYYYMMDD)
        /// </summary>
        /// <value>วันที่ approve การเปิด/แก้ไข เป็น ค.ศ. (YYYYMMDD)</value>
        [DataMember(Name = "approvedDate", EmitDefaultValue = false)]
        public string ApprovedDate { get; set; }

        /// <summary>
        /// วันเวลาที่ approve การเปิด/แก้ไข เป็น ค.ศ.+ชั่วโมงนาทีวินาที (YYYYMMDDHHmmss)
        /// </summary>
        /// <value>วันเวลาที่ approve การเปิด/แก้ไข เป็น ค.ศ.+ชั่วโมงนาทีวินาที (YYYYMMDDHHmmss)</value>
        [DataMember(Name = "approvedDateTime", EmitDefaultValue = false)]
        public string ApprovedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ContactPerson
        /// </summary>
        [DataMember(Name = "contactPerson", EmitDefaultValue = false)]
        public List<JuristicInvestorV5ResponseContactPersonInner> ContactPerson { get; set; }

        /// <summary>
        /// Gets or Sets EndBeneficiary
        /// </summary>
        [DataMember(Name = "endBeneficiary", EmitDefaultValue = false)]
        public List<JuristicInvestorV5ResponseEndBeneficiaryInner> EndBeneficiary { get; set; }

        /// <summary>
        /// Gets or Sets SuitabilityForm
        /// </summary>
        [DataMember(Name = "suitabilityForm", EmitDefaultValue = false)]
        public JuristicInvestorV5ResponseSuitabilityForm SuitabilityForm { get; set; }

        /// <summary>
        /// ผลลัพธ์การประเมิณความรู้ความสามารถในการลงทุน true &#x3D; ยอมรับ false &#x3D; ไม่ยอมรับ
        /// </summary>
        /// <value>ผลลัพธ์การประเมิณความรู้ความสามารถในการลงทุน true &#x3D; ยอมรับ false &#x3D; ไม่ยอมรับ</value>
        [DataMember(Name = "knowledgeAssessmentResult", EmitDefaultValue = true)]
        public bool? KnowledgeAssessmentResult { get; set; }

        /// <summary>
        /// Gets or Sets KnowledgeAssessmentForm
        /// </summary>
        [DataMember(Name = "knowledgeAssessmentForm", EmitDefaultValue = false)]
        public JuristicInvestorV5ResponseKnowledgeAssessmentForm KnowledgeAssessmentForm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JuristicInvestorV5Response {\n");
            sb.Append("  JuristicNumber: ").Append(JuristicNumber).Append("\n");
            sb.Append("  RegisteredCountryCode: ").Append(RegisteredCountryCode).Append("\n");
            sb.Append("  TaxNumber: ").Append(TaxNumber).Append("\n");
            sb.Append("  JuristicType: ").Append(JuristicType).Append("\n");
            sb.Append("  JuristicTypeOther: ").Append(JuristicTypeOther).Append("\n");
            sb.Append("  TaxExemptionFlag: ").Append(TaxExemptionFlag).Append("\n");
            sb.Append("  OperatingInThailandFlag: ").Append(OperatingInThailandFlag).Append("\n");
            sb.Append("  EnCompanyName: ").Append(EnCompanyName).Append("\n");
            sb.Append("  ThCompanyName: ").Append(ThCompanyName).Append("\n");
            sb.Append("  CanAcceptFxRisk: ").Append(CanAcceptFxRisk).Append("\n");
            sb.Append("  CanAcceptDerivativeInvestment: ").Append(CanAcceptDerivativeInvestment).Append("\n");
            sb.Append("  SuitabilityRiskLevel: ").Append(SuitabilityRiskLevel).Append("\n");
            sb.Append("  SuitabilityEvaluationDate: ").Append(SuitabilityEvaluationDate).Append("\n");
            sb.Append("  Fatca: ").Append(Fatca).Append("\n");
            sb.Append("  FatcaDeclarationDate: ").Append(FatcaDeclarationDate).Append("\n");
            sb.Append("  CrsDetails: ").Append(CrsDetails).Append("\n");
            sb.Append("  CrsNfeType: ").Append(CrsNfeType).Append("\n");
            sb.Append("  CrsDeclarationDate: ").Append(CrsDeclarationDate).Append("\n");
            sb.Append("  BusinessTypeId: ").Append(BusinessTypeId).Append("\n");
            sb.Append("  BusinessTypeOther: ").Append(BusinessTypeOther).Append("\n");
            sb.Append("  AssetValue: ").Append(AssetValue).Append("\n");
            sb.Append("  ShareholderEquity: ").Append(ShareholderEquity).Append("\n");
            sb.Append("  IncomeSource: ").Append(IncomeSource).Append("\n");
            sb.Append("  IncomeSourceOther: ").Append(IncomeSourceOther).Append("\n");
            sb.Append("  IncomeSourceCountry: ").Append(IncomeSourceCountry).Append("\n");
            sb.Append("  AnnualIncomeBaht: ").Append(AnnualIncomeBaht).Append("\n");
            sb.Append("  BranchNo: ").Append(BranchNo).Append("\n");
            sb.Append("  JuristicConditionOfAuthorizedSignatories: ").Append(JuristicConditionOfAuthorizedSignatories).Append("\n");
            sb.Append("  JuristicDirectors: ").Append(JuristicDirectors).Append("\n");
            sb.Append("  Shareholders: ").Append(Shareholders).Append("\n");
            sb.Append("  ConditionOfAuthorizedSignatoriesForTransaction: ").Append(ConditionOfAuthorizedSignatoriesForTransaction).Append("\n");
            sb.Append("  RegistrationAddress: ").Append(RegistrationAddress).Append("\n");
            sb.Append("  CddScore: ").Append(CddScore).Append("\n");
            sb.Append("  CddDate: ").Append(CddDate).Append("\n");
            sb.Append("  ReferralPerson: ").Append(ReferralPerson).Append("\n");
            sb.Append("  ApplicationDate: ").Append(ApplicationDate).Append("\n");
            sb.Append("  AuthorizedSignatories: ").Append(AuthorizedSignatories).Append("\n");
            sb.Append("  AcceptedBy: ").Append(AcceptedBy).Append("\n");
            sb.Append("  OpenFundConnextFormFlag: ").Append(OpenFundConnextFormFlag).Append("\n");
            sb.Append("  InvestorType: ").Append(InvestorType).Append("\n");
            sb.Append("  Accounts: ").Append(Accounts).Append("\n");
            sb.Append("  ApprovedDate: ").Append(ApprovedDate).Append("\n");
            sb.Append("  ApprovedDateTime: ").Append(ApprovedDateTime).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  EndBeneficiary: ").Append(EndBeneficiary).Append("\n");
            sb.Append("  SuitabilityForm: ").Append(SuitabilityForm).Append("\n");
            sb.Append("  InvestorClass: ").Append(InvestorClass).Append("\n");
            sb.Append("  KnowledgeAssessmentResult: ").Append(KnowledgeAssessmentResult).Append("\n");
            sb.Append("  KnowledgeAssessmentForm: ").Append(KnowledgeAssessmentForm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // JuristicNumber (string) maxLength
            if (this.JuristicNumber != null && this.JuristicNumber.Length > 13)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JuristicNumber, length must be less than 13.", new[] { "JuristicNumber" });
            }

            // JuristicNumber (string) minLength
            if (this.JuristicNumber != null && this.JuristicNumber.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JuristicNumber, length must be greater than 1.", new[] { "JuristicNumber" });
            }

            // RegisteredCountryCode (string) maxLength
            if (this.RegisteredCountryCode != null && this.RegisteredCountryCode.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RegisteredCountryCode, length must be less than 2.", new[] { "RegisteredCountryCode" });
            }

            // RegisteredCountryCode (string) minLength
            if (this.RegisteredCountryCode != null && this.RegisteredCountryCode.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RegisteredCountryCode, length must be greater than 2.", new[] { "RegisteredCountryCode" });
            }

            // TaxNumber (string) maxLength
            if (this.TaxNumber != null && this.TaxNumber.Length > 13)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaxNumber, length must be less than 13.", new[] { "TaxNumber" });
            }

            // TaxNumber (string) minLength
            if (this.TaxNumber != null && this.TaxNumber.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TaxNumber, length must be greater than 1.", new[] { "TaxNumber" });
            }

            // JuristicTypeOther (string) maxLength
            if (this.JuristicTypeOther != null && this.JuristicTypeOther.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JuristicTypeOther, length must be less than 50.", new[] { "JuristicTypeOther" });
            }

            // EnCompanyName (string) maxLength
            if (this.EnCompanyName != null && this.EnCompanyName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EnCompanyName, length must be less than 100.", new[] { "EnCompanyName" });
            }

            // EnCompanyName (string) minLength
            if (this.EnCompanyName != null && this.EnCompanyName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EnCompanyName, length must be greater than 1.", new[] { "EnCompanyName" });
            }

            // ThCompanyName (string) maxLength
            if (this.ThCompanyName != null && this.ThCompanyName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ThCompanyName, length must be less than 100.", new[] { "ThCompanyName" });
            }

            // ThCompanyName (string) minLength
            if (this.ThCompanyName != null && this.ThCompanyName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ThCompanyName, length must be greater than 1.", new[] { "ThCompanyName" });
            }

            // SuitabilityEvaluationDate (string) maxLength
            if (this.SuitabilityEvaluationDate != null && this.SuitabilityEvaluationDate.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SuitabilityEvaluationDate, length must be less than 8.", new[] { "SuitabilityEvaluationDate" });
            }

            // SuitabilityEvaluationDate (string) minLength
            if (this.SuitabilityEvaluationDate != null && this.SuitabilityEvaluationDate.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SuitabilityEvaluationDate, length must be greater than 8.", new[] { "SuitabilityEvaluationDate" });
            }

            if (this.SuitabilityEvaluationDate != null)
            {
                // SuitabilityEvaluationDate (string) pattern
                Regex regexSuitabilityEvaluationDate = new Regex(@"^((19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))$", RegexOptions.CultureInvariant);
                if (!regexSuitabilityEvaluationDate.Match(this.SuitabilityEvaluationDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SuitabilityEvaluationDate, must match a pattern of " + regexSuitabilityEvaluationDate, new[] { "SuitabilityEvaluationDate" });
                }
            }

            // FatcaDeclarationDate (string) maxLength
            if (this.FatcaDeclarationDate != null && this.FatcaDeclarationDate.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FatcaDeclarationDate, length must be less than 8.", new[] { "FatcaDeclarationDate" });
            }

            // FatcaDeclarationDate (string) minLength
            if (this.FatcaDeclarationDate != null && this.FatcaDeclarationDate.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FatcaDeclarationDate, length must be greater than 8.", new[] { "FatcaDeclarationDate" });
            }

            if (this.FatcaDeclarationDate != null)
            {
                // FatcaDeclarationDate (string) pattern
                Regex regexFatcaDeclarationDate = new Regex(@"^((19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))$", RegexOptions.CultureInvariant);
                if (!regexFatcaDeclarationDate.Match(this.FatcaDeclarationDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FatcaDeclarationDate, must match a pattern of " + regexFatcaDeclarationDate, new[] { "FatcaDeclarationDate" });
                }
            }

            // CrsDeclarationDate (string) maxLength
            if (this.CrsDeclarationDate != null && this.CrsDeclarationDate.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrsDeclarationDate, length must be less than 8.", new[] { "CrsDeclarationDate" });
            }

            // CrsDeclarationDate (string) minLength
            if (this.CrsDeclarationDate != null && this.CrsDeclarationDate.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrsDeclarationDate, length must be greater than 8.", new[] { "CrsDeclarationDate" });
            }

            if (this.CrsDeclarationDate != null)
            {
                // CrsDeclarationDate (string) pattern
                Regex regexCrsDeclarationDate = new Regex(@"^((19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))$", RegexOptions.CultureInvariant);
                if (!regexCrsDeclarationDate.Match(this.CrsDeclarationDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrsDeclarationDate, must match a pattern of " + regexCrsDeclarationDate, new[] { "CrsDeclarationDate" });
                }
            }

            // BusinessTypeOther (string) maxLength
            if (this.BusinessTypeOther != null && this.BusinessTypeOther.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusinessTypeOther, length must be less than 100.", new[] { "BusinessTypeOther" });
            }

            // AssetValue (decimal?) maximum
            if (this.AssetValue > (decimal?)9999999999999.99)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AssetValue, must be a value less than or equal to 9999999999999.99.", new[] { "AssetValue" });
            }

            // ShareholderEquity (decimal?) maximum
            if (this.ShareholderEquity > (decimal?)9999999999999.99)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ShareholderEquity, must be a value less than or equal to 9999999999999.99.", new[] { "ShareholderEquity" });
            }

            // IncomeSource (string) maxLength
            if (this.IncomeSource != null && this.IncomeSource.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IncomeSource, length must be less than 100.", new[] { "IncomeSource" });
            }

            if (this.IncomeSource != null)
            {
                // IncomeSource (string) pattern
                Regex regexIncomeSource = new Regex(@"^(REVBUSINESS|REVPROP|STOCK|DONATION|LOAN|OTHER){1}(,(REVBUSINESS|REVPROP|STOCK|DONATION|LOAN|OTHER))*$", RegexOptions.CultureInvariant);
                if (!regexIncomeSource.Match(this.IncomeSource).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IncomeSource, must match a pattern of " + regexIncomeSource, new[] { "IncomeSource" });
                }
            }

            // IncomeSourceOther (string) maxLength
            if (this.IncomeSourceOther != null && this.IncomeSourceOther.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IncomeSourceOther, length must be less than 100.", new[] { "IncomeSourceOther" });
            }

            // IncomeSourceCountry (string) maxLength
            if (this.IncomeSourceCountry != null && this.IncomeSourceCountry.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IncomeSourceCountry, length must be less than 2.", new[] { "IncomeSourceCountry" });
            }

            // IncomeSourceCountry (string) minLength
            if (this.IncomeSourceCountry != null && this.IncomeSourceCountry.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IncomeSourceCountry, length must be greater than 2.", new[] { "IncomeSourceCountry" });
            }

            // AnnualIncomeBaht (decimal?) maximum
            if (this.AnnualIncomeBaht > (decimal?)9999999999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AnnualIncomeBaht, must be a value less than or equal to 9999999999999.", new[] { "AnnualIncomeBaht" });
            }

            // BranchNo (string) maxLength
            if (this.BranchNo != null && this.BranchNo.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BranchNo, length must be less than 5.", new[] { "BranchNo" });
            }

            // JuristicConditionOfAuthorizedSignatories (string) maxLength
            if (this.JuristicConditionOfAuthorizedSignatories != null && this.JuristicConditionOfAuthorizedSignatories.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JuristicConditionOfAuthorizedSignatories, length must be less than 100.", new[] { "JuristicConditionOfAuthorizedSignatories" });
            }

            // JuristicConditionOfAuthorizedSignatories (string) minLength
            if (this.JuristicConditionOfAuthorizedSignatories != null && this.JuristicConditionOfAuthorizedSignatories.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JuristicConditionOfAuthorizedSignatories, length must be greater than 1.", new[] { "JuristicConditionOfAuthorizedSignatories" });
            }

            // ConditionOfAuthorizedSignatoriesForTransaction (string) maxLength
            if (this.ConditionOfAuthorizedSignatoriesForTransaction != null && this.ConditionOfAuthorizedSignatoriesForTransaction.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ConditionOfAuthorizedSignatoriesForTransaction, length must be less than 100.", new[] { "ConditionOfAuthorizedSignatoriesForTransaction" });
            }

            // ConditionOfAuthorizedSignatoriesForTransaction (string) minLength
            if (this.ConditionOfAuthorizedSignatoriesForTransaction != null && this.ConditionOfAuthorizedSignatoriesForTransaction.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ConditionOfAuthorizedSignatoriesForTransaction, length must be greater than 1.", new[] { "ConditionOfAuthorizedSignatoriesForTransaction" });
            }

            // CddScore (decimal) maximum
            if (this.CddScore > (decimal)3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CddScore, must be a value less than or equal to 3.", new[] { "CddScore" });
            }

            // CddScore (decimal) minimum
            if (this.CddScore < (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CddScore, must be a value greater than or equal to 1.", new[] { "CddScore" });
            }

            // CddDate (string) maxLength
            if (this.CddDate != null && this.CddDate.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CddDate, length must be less than 8.", new[] { "CddDate" });
            }

            // CddDate (string) minLength
            if (this.CddDate != null && this.CddDate.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CddDate, length must be greater than 8.", new[] { "CddDate" });
            }

            if (this.CddDate != null)
            {
                // CddDate (string) pattern
                Regex regexCddDate = new Regex(@"^((19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))$", RegexOptions.CultureInvariant);
                if (!regexCddDate.Match(this.CddDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CddDate, must match a pattern of " + regexCddDate, new[] { "CddDate" });
                }
            }

            // ReferralPerson (string) maxLength
            if (this.ReferralPerson != null && this.ReferralPerson.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferralPerson, length must be less than 100.", new[] { "ReferralPerson" });
            }

            // ApplicationDate (string) maxLength
            if (this.ApplicationDate != null && this.ApplicationDate.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ApplicationDate, length must be less than 8.", new[] { "ApplicationDate" });
            }

            // ApplicationDate (string) minLength
            if (this.ApplicationDate != null && this.ApplicationDate.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ApplicationDate, length must be greater than 8.", new[] { "ApplicationDate" });
            }

            if (this.ApplicationDate != null)
            {
                // ApplicationDate (string) pattern
                Regex regexApplicationDate = new Regex(@"^((19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))$", RegexOptions.CultureInvariant);
                if (!regexApplicationDate.Match(this.ApplicationDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ApplicationDate, must match a pattern of " + regexApplicationDate, new[] { "ApplicationDate" });
                }
            }

            // AcceptedBy (string) maxLength
            if (this.AcceptedBy != null && this.AcceptedBy.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AcceptedBy, length must be less than 100.", new[] { "AcceptedBy" });
            }

            yield break;
        }
    }

}
