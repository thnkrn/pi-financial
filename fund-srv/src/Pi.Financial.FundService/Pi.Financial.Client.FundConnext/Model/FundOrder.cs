/*
 * FundConnext
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Pi.Financial.Client.FundConnext.Client.FileParameter;
using OpenAPIDateConverter = Pi.Financial.Client.FundConnext.Client.OpenAPIDateConverter;

namespace Pi.Financial.Client.FundConnext.Model
{
    /// <summary>
    /// FundOrder
    /// </summary>
    [DataContract(Name = "FundOrder")]
    public partial class FundOrder : IValidatableObject
    {
        /// <summary>
        /// Y &#x3D; Sell all unit N &#x3D; Not sell all unit
        /// </summary>
        /// <value>Y &#x3D; Sell all unit N &#x3D; Not sell all unit</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SellAllUnitFlagEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }


        /// <summary>
        /// Y &#x3D; Sell all unit N &#x3D; Not sell all unit
        /// </summary>
        /// <value>Y &#x3D; Sell all unit N &#x3D; Not sell all unit</value>
        [DataMember(Name = "sellAllUnitFlag", EmitDefaultValue = false)]
        public SellAllUnitFlagEnum? SellAllUnitFlag { get; set; }
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum ALLOTTED for value: ALLOTTED
            /// </summary>
            [EnumMember(Value = "ALLOTTED")]
            ALLOTTED = 1,

            /// <summary>
            /// Enum APPROVED for value: APPROVED
            /// </summary>
            [EnumMember(Value = "APPROVED")]
            APPROVED = 2,

            /// <summary>
            /// Enum CANCELLED for value: CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLED = 3,

            /// <summary>
            /// Enum EXPIRED for value: EXPIRED
            /// </summary>
            [EnumMember(Value = "EXPIRED")]
            EXPIRED = 4,

            /// <summary>
            /// Enum REJECTED for value: REJECTED
            /// </summary>
            [EnumMember(Value = "REJECTED")]
            REJECTED = 5,

            /// <summary>
            /// Enum SUBMITTED for value: SUBMITTED
            /// </summary>
            [EnumMember(Value = "SUBMITTED")]
            SUBMITTED = 6,

            /// <summary>
            /// Enum WAITING for value: WAITING
            /// </summary>
            [EnumMember(Value = "WAITING")]
            WAITING = 7
        }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FundOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FundOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FundOrder" /> class.
        /// </summary>
        /// <param name="transactionId">Transaction Id in FundConnext (required).</param>
        /// <param name="saOrderReferenceNo">saOrderReferenceNo (required).</param>
        /// <param name="orderType">SUB &#x3D; Subscription RED &#x3D; Redemption SWO &#x3D; Switch out SWI &#x3D; Switch in XSO &#x3D; Cross switch out XSI &#x3D; Cross switch in TRO &#x3D; Transfer out TRI &#x3D; Transfer in (required).</param>
        /// <param name="accountId">accountId (required).</param>
        /// <param name="unitholderId">unitholderId (required).</param>
        /// <param name="fundCode">fundCode (required).</param>
        /// <param name="redemptionType">Only orderType &#x3D; &#39;RED&#39; and &#39;SWO&#39; AMT &#x3D; by amount UNIT &#x3D; by unit.</param>
        /// <param name="unit">Example: 1000.1234.</param>
        /// <param name="amount">Example: 1000.00.</param>
        /// <param name="sellAllUnitFlag">Y &#x3D; Sell all unit N &#x3D; Not sell all unit.</param>
        /// <param name="status">status (required).</param>
        /// <param name="transactionDateTime">System Format: YYYYMMDDHHMMSS (required).</param>
        /// <param name="effectiveDate">System Format: YYYYMMDD (required).</param>
        /// <param name="settlementDate">System Format: YYYYMMDD (required).</param>
        /// <param name="amcOrderReferenceNo">amcOrderReferenceNo.</param>
        /// <param name="allottedUnit">Example: 1000.1234.</param>
        /// <param name="allottedAmount">Example: 1000.12.</param>
        /// <param name="allottedNAV">Example: 1000.12.</param>
        /// <param name="allotmentDate">allotmentDate.</param>
        /// <param name="fee">Example: 1000.12.</param>
        /// <param name="transactionLastUpdated">System Format: YYYYMMDDHHMMSS (required).</param>
        /// <param name="paymentType">paymentType.</param>
        /// <param name="bankCode">bankCode.</param>
        /// <param name="bankAccount">bankAccount.</param>
        /// <param name="channel">channel (required).</param>
        /// <param name="icLicense">icLicense (required).</param>
        /// <param name="branchNo">branchNo.</param>
        /// <param name="forceEntry">forceEntry (required).</param>
        /// <param name="settlementBankCode">settlementBankCode.</param>
        /// <param name="settlementBankAccount">settlementBankAccount.</param>
        /// <param name="chqBranch">chqBranch.</param>
        /// <param name="rejectReason">rejectReason.</param>
        /// <param name="navDate">navDate.</param>
        /// <param name="collateralAccount">collateralAccount.</param>
        /// <param name="accountType">Seg &#x3D; Segregate OMN &#x3D; Omnibus SEG_NT &#x3D; Segregate for non tax SEG_T &#x3D; Segregate for tax OMN_NT &#x3D; Omnibus for non tax OMN_T &#x3D; Omnibus for tax.</param>
        /// <param name="recurringOrderId">Recurring Order Id from FundConnext (only recurring order).</param>
        /// <param name="paymentStatus">Only paymentInstructor &#x3D; FND QUEUING &#x3D; in queue PROCESSING &#x3D; processing by FinNet SUCCESS &#x3D; payment success FAILED &#x3D; payment failed.</param>
        /// <param name="paymentProcessingType">Only paymentInstructor &#x3D; FND B &#x3D; Batch R &#x3D; Real time.</param>
        /// <param name="saRecurringOrderRefNo">Reference recurring order from SA system (Recurring Order Only from Recurring plan).</param>
        /// <param name="crcApprovalCode">Credit card approval code Only if paymentType &#x3D; CRC.</param>
        /// <param name="pointCode">Point code in case of paymentType is POINT_SA.</param>
        /// <param name="counterUnitholderId">แสดงเฉพาะรายการ Switching cross AMC .</param>
        /// <param name="counterFundCode">แสดงเฉพาะรายการ Switching cross AMC .</param>
        /// <param name="xwtReferenceNo">แสดงเฉพาะรายการ Switching cross AMC .</param>
        /// <param name="originalTransactionId">originalTransactionId.</param>
        /// <param name="lmtsAdlsFee">lmtsAdlsFee.</param>
        /// <param name="lmtsLiquidityFee">lmtsLiquidityFee.</param>
        public FundOrder(string transactionId = default(string), string saOrderReferenceNo = default(string), string orderType = default(string), string accountId = default(string), string unitholderId = default(string), string fundCode = default(string), string redemptionType = default(string), decimal? unit = default(decimal?), decimal? amount = default(decimal?), SellAllUnitFlagEnum? sellAllUnitFlag = default(SellAllUnitFlagEnum?), StatusEnum status = default(StatusEnum), string transactionDateTime = default(string), string effectiveDate = default(string), string settlementDate = default(string), string amcOrderReferenceNo = default(string), decimal? allottedUnit = default(decimal?), decimal? allottedAmount = default(decimal?), decimal? allottedNAV = default(decimal?), string allotmentDate = default(string), decimal? fee = default(decimal?), string transactionLastUpdated = default(string), string paymentType = default(string), string bankCode = default(string), string bankAccount = default(string), string channel = default(string), string icLicense = default(string), string branchNo = default(string), string forceEntry = default(string), string settlementBankCode = default(string), string settlementBankAccount = default(string), string chqBranch = default(string), string rejectReason = default(string), string navDate = default(string), string collateralAccount = default(string), string accountType = default(string), string recurringOrderId = default(string), string paymentStatus = default(string), string paymentProcessingType = default(string), string saRecurringOrderRefNo = default(string), string crcApprovalCode = default(string), string pointCode = default(string), string counterUnitholderId = default(string), string counterFundCode = default(string), string xwtReferenceNo = default(string), string originalTransactionId = default(string), string lmtsAdlsFee = default(string), string lmtsLiquidityFee = default(string))
        {
            // to ensure "transactionId" is required (not null)
            if (transactionId == null)
            {
                throw new ArgumentNullException("transactionId is a required property for FundOrder and cannot be null");
            }
            this.TransactionId = transactionId;
            // to ensure "saOrderReferenceNo" is required (not null)
            if (saOrderReferenceNo == null)
            {
                throw new ArgumentNullException("saOrderReferenceNo is a required property for FundOrder and cannot be null");
            }
            this.SaOrderReferenceNo = saOrderReferenceNo;
            // to ensure "orderType" is required (not null)
            if (orderType == null)
            {
                throw new ArgumentNullException("orderType is a required property for FundOrder and cannot be null");
            }
            this.OrderType = orderType;
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId is a required property for FundOrder and cannot be null");
            }
            this.AccountId = accountId;
            // to ensure "unitholderId" is required (not null)
            if (unitholderId == null)
            {
                throw new ArgumentNullException("unitholderId is a required property for FundOrder and cannot be null");
            }
            this.UnitholderId = unitholderId;
            // to ensure "fundCode" is required (not null)
            if (fundCode == null)
            {
                throw new ArgumentNullException("fundCode is a required property for FundOrder and cannot be null");
            }
            this.FundCode = fundCode;
            this.Status = status;
            // to ensure "transactionDateTime" is required (not null)
            if (transactionDateTime == null)
            {
                throw new ArgumentNullException("transactionDateTime is a required property for FundOrder and cannot be null");
            }
            this.TransactionDateTime = transactionDateTime;
            // to ensure "effectiveDate" is required (not null)
            if (effectiveDate == null)
            {
                throw new ArgumentNullException("effectiveDate is a required property for FundOrder and cannot be null");
            }
            this.EffectiveDate = effectiveDate;
            // to ensure "settlementDate" is required (not null)
            if (settlementDate == null)
            {
                throw new ArgumentNullException("settlementDate is a required property for FundOrder and cannot be null");
            }
            this.SettlementDate = settlementDate;
            // to ensure "transactionLastUpdated" is required (not null)
            if (transactionLastUpdated == null)
            {
                throw new ArgumentNullException("transactionLastUpdated is a required property for FundOrder and cannot be null");
            }
            this.TransactionLastUpdated = transactionLastUpdated;
            // to ensure "channel" is required (not null)
            if (channel == null)
            {
                throw new ArgumentNullException("channel is a required property for FundOrder and cannot be null");
            }
            this.Channel = channel;
            // to ensure "icLicense" is required (not null)
            if (icLicense == null)
            {
                throw new ArgumentNullException("icLicense is a required property for FundOrder and cannot be null");
            }
            this.IcLicense = icLicense;
            // to ensure "forceEntry" is required (not null)
            if (forceEntry == null)
            {
                throw new ArgumentNullException("forceEntry is a required property for FundOrder and cannot be null");
            }
            this.ForceEntry = forceEntry;
            this.RedemptionType = redemptionType;
            this.Unit = unit;
            this.Amount = amount;
            this.SellAllUnitFlag = sellAllUnitFlag;
            this.AmcOrderReferenceNo = amcOrderReferenceNo;
            this.AllottedUnit = allottedUnit;
            this.AllottedAmount = allottedAmount;
            this.AllottedNAV = allottedNAV;
            this.AllotmentDate = allotmentDate;
            this.Fee = fee;
            this.PaymentType = paymentType;
            this.BankCode = bankCode;
            this.BankAccount = bankAccount;
            this.BranchNo = branchNo;
            this.SettlementBankCode = settlementBankCode;
            this.SettlementBankAccount = settlementBankAccount;
            this.ChqBranch = chqBranch;
            this.RejectReason = rejectReason;
            this.NavDate = navDate;
            this.CollateralAccount = collateralAccount;
            this.AccountType = accountType;
            this.RecurringOrderId = recurringOrderId;
            this.PaymentStatus = paymentStatus;
            this.PaymentProcessingType = paymentProcessingType;
            this.SaRecurringOrderRefNo = saRecurringOrderRefNo;
            this.CrcApprovalCode = crcApprovalCode;
            this.PointCode = pointCode;
            this.CounterUnitholderId = counterUnitholderId;
            this.CounterFundCode = counterFundCode;
            this.XwtReferenceNo = xwtReferenceNo;
            this.OriginalTransactionId = originalTransactionId;
            this.LmtsAdlsFee = lmtsAdlsFee;
            this.LmtsLiquidityFee = lmtsLiquidityFee;
        }

        /// <summary>
        /// Transaction Id in FundConnext
        /// </summary>
        /// <value>Transaction Id in FundConnext</value>
        [DataMember(Name = "transactionId", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Gets or Sets SaOrderReferenceNo
        /// </summary>
        [DataMember(Name = "saOrderReferenceNo", IsRequired = true, EmitDefaultValue = true)]
        public string SaOrderReferenceNo { get; set; }

        /// <summary>
        /// SUB &#x3D; Subscription RED &#x3D; Redemption SWO &#x3D; Switch out SWI &#x3D; Switch in XSO &#x3D; Cross switch out XSI &#x3D; Cross switch in TRO &#x3D; Transfer out TRI &#x3D; Transfer in
        /// </summary>
        /// <value>SUB &#x3D; Subscription RED &#x3D; Redemption SWO &#x3D; Switch out SWI &#x3D; Switch in XSO &#x3D; Cross switch out XSI &#x3D; Cross switch in TRO &#x3D; Transfer out TRI &#x3D; Transfer in</value>
        [DataMember(Name = "orderType", IsRequired = true, EmitDefaultValue = true)]
        public string OrderType { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "accountId", IsRequired = true, EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets UnitholderId
        /// </summary>
        [DataMember(Name = "unitholderId", IsRequired = true, EmitDefaultValue = true)]
        public string UnitholderId { get; set; }

        /// <summary>
        /// Gets or Sets FundCode
        /// </summary>
        [DataMember(Name = "fundCode", IsRequired = true, EmitDefaultValue = true)]
        public string FundCode { get; set; }

        /// <summary>
        /// Only orderType &#x3D; &#39;RED&#39; and &#39;SWO&#39; AMT &#x3D; by amount UNIT &#x3D; by unit
        /// </summary>
        /// <value>Only orderType &#x3D; &#39;RED&#39; and &#39;SWO&#39; AMT &#x3D; by amount UNIT &#x3D; by unit</value>
        [DataMember(Name = "redemptionType", EmitDefaultValue = true)]
        public string RedemptionType { get; set; }

        /// <summary>
        /// Example: 1000.1234
        /// </summary>
        /// <value>Example: 1000.1234</value>
        [DataMember(Name = "unit", EmitDefaultValue = true)]
        public decimal? Unit { get; set; }

        /// <summary>
        /// Example: 1000.00
        /// </summary>
        /// <value>Example: 1000.00</value>
        [DataMember(Name = "amount", EmitDefaultValue = true)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// System Format: YYYYMMDDHHMMSS
        /// </summary>
        /// <value>System Format: YYYYMMDDHHMMSS</value>
        [DataMember(Name = "transactionDateTime", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionDateTime { get; set; }

        /// <summary>
        /// System Format: YYYYMMDD
        /// </summary>
        /// <value>System Format: YYYYMMDD</value>
        [DataMember(Name = "effectiveDate", IsRequired = true, EmitDefaultValue = true)]
        public string EffectiveDate { get; set; }

        /// <summary>
        /// System Format: YYYYMMDD
        /// </summary>
        /// <value>System Format: YYYYMMDD</value>
        [DataMember(Name = "settlementDate", IsRequired = true, EmitDefaultValue = true)]
        public string SettlementDate { get; set; }

        /// <summary>
        /// Gets or Sets AmcOrderReferenceNo
        /// </summary>
        [DataMember(Name = "amcOrderReferenceNo", EmitDefaultValue = false)]
        public string AmcOrderReferenceNo { get; set; }

        /// <summary>
        /// Example: 1000.1234
        /// </summary>
        /// <value>Example: 1000.1234</value>
        [DataMember(Name = "allottedUnit", EmitDefaultValue = true)]
        public decimal? AllottedUnit { get; set; }

        /// <summary>
        /// Example: 1000.12
        /// </summary>
        /// <value>Example: 1000.12</value>
        [DataMember(Name = "allottedAmount", EmitDefaultValue = true)]
        public decimal? AllottedAmount { get; set; }

        /// <summary>
        /// Example: 1000.12
        /// </summary>
        /// <value>Example: 1000.12</value>
        [DataMember(Name = "allottedNAV", EmitDefaultValue = true)]
        public decimal? AllottedNAV { get; set; }

        /// <summary>
        /// Gets or Sets AllotmentDate
        /// </summary>
        [DataMember(Name = "allotmentDate", EmitDefaultValue = false)]
        public string AllotmentDate { get; set; }

        /// <summary>
        /// Example: 1000.12
        /// </summary>
        /// <value>Example: 1000.12</value>
        [DataMember(Name = "fee", EmitDefaultValue = true)]
        public decimal? Fee { get; set; }

        /// <summary>
        /// System Format: YYYYMMDDHHMMSS
        /// </summary>
        /// <value>System Format: YYYYMMDDHHMMSS</value>
        [DataMember(Name = "transactionLastUpdated", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionLastUpdated { get; set; }

        /// <summary>
        /// Gets or Sets PaymentType
        /// </summary>
        [DataMember(Name = "paymentType", EmitDefaultValue = true)]
        public string PaymentType { get; set; }

        /// <summary>
        /// Gets or Sets BankCode
        /// </summary>
        [DataMember(Name = "bankCode", EmitDefaultValue = false)]
        public string BankCode { get; set; }

        /// <summary>
        /// Gets or Sets BankAccount
        /// </summary>
        [DataMember(Name = "bankAccount", EmitDefaultValue = false)]
        public string BankAccount { get; set; }

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name = "channel", IsRequired = true, EmitDefaultValue = true)]
        public string Channel { get; set; }

        /// <summary>
        /// Gets or Sets IcLicense
        /// </summary>
        [DataMember(Name = "icLicense", IsRequired = true, EmitDefaultValue = true)]
        public string IcLicense { get; set; }

        /// <summary>
        /// Gets or Sets BranchNo
        /// </summary>
        [DataMember(Name = "branchNo", EmitDefaultValue = false)]
        public string BranchNo { get; set; }

        /// <summary>
        /// Gets or Sets ForceEntry
        /// </summary>
        [DataMember(Name = "forceEntry", IsRequired = true, EmitDefaultValue = true)]
        public string ForceEntry { get; set; }

        /// <summary>
        /// Gets or Sets SettlementBankCode
        /// </summary>
        [DataMember(Name = "settlementBankCode", EmitDefaultValue = false)]
        public string SettlementBankCode { get; set; }

        /// <summary>
        /// Gets or Sets SettlementBankAccount
        /// </summary>
        [DataMember(Name = "settlementBankAccount", EmitDefaultValue = false)]
        public string SettlementBankAccount { get; set; }

        /// <summary>
        /// Gets or Sets ChqBranch
        /// </summary>
        [DataMember(Name = "chqBranch", EmitDefaultValue = false)]
        public string ChqBranch { get; set; }

        /// <summary>
        /// Gets or Sets RejectReason
        /// </summary>
        [DataMember(Name = "rejectReason", EmitDefaultValue = false)]
        public string RejectReason { get; set; }

        /// <summary>
        /// Gets or Sets NavDate
        /// </summary>
        [DataMember(Name = "navDate", EmitDefaultValue = false)]
        public string NavDate { get; set; }

        /// <summary>
        /// Gets or Sets CollateralAccount
        /// </summary>
        [DataMember(Name = "collateralAccount", EmitDefaultValue = false)]
        public string CollateralAccount { get; set; }

        /// <summary>
        /// Seg &#x3D; Segregate OMN &#x3D; Omnibus SEG_NT &#x3D; Segregate for non tax SEG_T &#x3D; Segregate for tax OMN_NT &#x3D; Omnibus for non tax OMN_T &#x3D; Omnibus for tax
        /// </summary>
        /// <value>Seg &#x3D; Segregate OMN &#x3D; Omnibus SEG_NT &#x3D; Segregate for non tax SEG_T &#x3D; Segregate for tax OMN_NT &#x3D; Omnibus for non tax OMN_T &#x3D; Omnibus for tax</value>
        [DataMember(Name = "accountType", EmitDefaultValue = false)]
        public string AccountType { get; set; }

        /// <summary>
        /// Recurring Order Id from FundConnext (only recurring order)
        /// </summary>
        /// <value>Recurring Order Id from FundConnext (only recurring order)</value>
        [DataMember(Name = "recurringOrderId", EmitDefaultValue = false)]
        public string RecurringOrderId { get; set; }

        /// <summary>
        /// Only paymentInstructor &#x3D; FND QUEUING &#x3D; in queue PROCESSING &#x3D; processing by FinNet SUCCESS &#x3D; payment success FAILED &#x3D; payment failed
        /// </summary>
        /// <value>Only paymentInstructor &#x3D; FND QUEUING &#x3D; in queue PROCESSING &#x3D; processing by FinNet SUCCESS &#x3D; payment success FAILED &#x3D; payment failed</value>
        [DataMember(Name = "paymentStatus", EmitDefaultValue = false)]
        public string PaymentStatus { get; set; }

        /// <summary>
        /// Only paymentInstructor &#x3D; FND B &#x3D; Batch R &#x3D; Real time
        /// </summary>
        /// <value>Only paymentInstructor &#x3D; FND B &#x3D; Batch R &#x3D; Real time</value>
        [DataMember(Name = "paymentProcessingType", EmitDefaultValue = false)]
        public string PaymentProcessingType { get; set; }

        /// <summary>
        /// Reference recurring order from SA system (Recurring Order Only from Recurring plan)
        /// </summary>
        /// <value>Reference recurring order from SA system (Recurring Order Only from Recurring plan)</value>
        [DataMember(Name = "saRecurringOrderRefNo", EmitDefaultValue = false)]
        public string SaRecurringOrderRefNo { get; set; }

        /// <summary>
        /// Credit card approval code Only if paymentType &#x3D; CRC
        /// </summary>
        /// <value>Credit card approval code Only if paymentType &#x3D; CRC</value>
        [DataMember(Name = "crcApprovalCode", EmitDefaultValue = false)]
        public string CrcApprovalCode { get; set; }

        /// <summary>
        /// Point code in case of paymentType is POINT_SA
        /// </summary>
        /// <value>Point code in case of paymentType is POINT_SA</value>
        [DataMember(Name = "pointCode", EmitDefaultValue = false)]
        public string PointCode { get; set; }

        /// <summary>
        /// แสดงเฉพาะรายการ Switching cross AMC 
        /// </summary>
        /// <value>แสดงเฉพาะรายการ Switching cross AMC </value>
        [DataMember(Name = "counterUnitholderId", EmitDefaultValue = false)]
        public string CounterUnitholderId { get; set; }

        /// <summary>
        /// แสดงเฉพาะรายการ Switching cross AMC 
        /// </summary>
        /// <value>แสดงเฉพาะรายการ Switching cross AMC </value>
        [DataMember(Name = "counterFundCode", EmitDefaultValue = false)]
        public string CounterFundCode { get; set; }

        /// <summary>
        /// แสดงเฉพาะรายการ Switching cross AMC 
        /// </summary>
        /// <value>แสดงเฉพาะรายการ Switching cross AMC </value>
        [DataMember(Name = "xwtReferenceNo", EmitDefaultValue = false)]
        public string XwtReferenceNo { get; set; }

        /// <summary>
        /// Gets or Sets OriginalTransactionId
        /// </summary>
        [DataMember(Name = "originalTransactionId", EmitDefaultValue = false)]
        public string OriginalTransactionId { get; set; }

        /// <summary>
        /// Gets or Sets LmtsAdlsFee
        /// </summary>
        [DataMember(Name = "lmtsAdlsFee", EmitDefaultValue = false)]
        public string LmtsAdlsFee { get; set; }

        /// <summary>
        /// Gets or Sets LmtsLiquidityFee
        /// </summary>
        [DataMember(Name = "lmtsLiquidityFee", EmitDefaultValue = false)]
        public string LmtsLiquidityFee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FundOrder {\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  SaOrderReferenceNo: ").Append(SaOrderReferenceNo).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  UnitholderId: ").Append(UnitholderId).Append("\n");
            sb.Append("  FundCode: ").Append(FundCode).Append("\n");
            sb.Append("  RedemptionType: ").Append(RedemptionType).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  SellAllUnitFlag: ").Append(SellAllUnitFlag).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TransactionDateTime: ").Append(TransactionDateTime).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  SettlementDate: ").Append(SettlementDate).Append("\n");
            sb.Append("  AmcOrderReferenceNo: ").Append(AmcOrderReferenceNo).Append("\n");
            sb.Append("  AllottedUnit: ").Append(AllottedUnit).Append("\n");
            sb.Append("  AllottedAmount: ").Append(AllottedAmount).Append("\n");
            sb.Append("  AllottedNAV: ").Append(AllottedNAV).Append("\n");
            sb.Append("  AllotmentDate: ").Append(AllotmentDate).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  TransactionLastUpdated: ").Append(TransactionLastUpdated).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  BankAccount: ").Append(BankAccount).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  IcLicense: ").Append(IcLicense).Append("\n");
            sb.Append("  BranchNo: ").Append(BranchNo).Append("\n");
            sb.Append("  ForceEntry: ").Append(ForceEntry).Append("\n");
            sb.Append("  SettlementBankCode: ").Append(SettlementBankCode).Append("\n");
            sb.Append("  SettlementBankAccount: ").Append(SettlementBankAccount).Append("\n");
            sb.Append("  ChqBranch: ").Append(ChqBranch).Append("\n");
            sb.Append("  RejectReason: ").Append(RejectReason).Append("\n");
            sb.Append("  NavDate: ").Append(NavDate).Append("\n");
            sb.Append("  CollateralAccount: ").Append(CollateralAccount).Append("\n");
            sb.Append("  AccountType: ").Append(AccountType).Append("\n");
            sb.Append("  RecurringOrderId: ").Append(RecurringOrderId).Append("\n");
            sb.Append("  PaymentStatus: ").Append(PaymentStatus).Append("\n");
            sb.Append("  PaymentProcessingType: ").Append(PaymentProcessingType).Append("\n");
            sb.Append("  SaRecurringOrderRefNo: ").Append(SaRecurringOrderRefNo).Append("\n");
            sb.Append("  CrcApprovalCode: ").Append(CrcApprovalCode).Append("\n");
            sb.Append("  PointCode: ").Append(PointCode).Append("\n");
            sb.Append("  CounterUnitholderId: ").Append(CounterUnitholderId).Append("\n");
            sb.Append("  CounterFundCode: ").Append(CounterFundCode).Append("\n");
            sb.Append("  XwtReferenceNo: ").Append(XwtReferenceNo).Append("\n");
            sb.Append("  OriginalTransactionId: ").Append(OriginalTransactionId).Append("\n");
            sb.Append("  LmtsAdlsFee: ").Append(LmtsAdlsFee).Append("\n");
            sb.Append("  LmtsLiquidityFee: ").Append(LmtsLiquidityFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TransactionId (string) maxLength
            if (this.TransactionId != null && this.TransactionId.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, length must be less than 16.", new[] { "TransactionId" });
            }

            // SaOrderReferenceNo (string) maxLength
            if (this.SaOrderReferenceNo != null && this.SaOrderReferenceNo.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SaOrderReferenceNo, length must be less than 30.", new[] { "SaOrderReferenceNo" });
            }

            // OrderType (string) maxLength
            if (this.OrderType != null && this.OrderType.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderType, length must be less than 3.", new[] { "OrderType" });
            }

            // AccountId (string) maxLength
            if (this.AccountId != null && this.AccountId.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be less than 15.", new[] { "AccountId" });
            }

            // UnitholderId (string) maxLength
            if (this.UnitholderId != null && this.UnitholderId.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitholderId, length must be less than 15.", new[] { "UnitholderId" });
            }

            // FundCode (string) maxLength
            if (this.FundCode != null && this.FundCode.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FundCode, length must be less than 30.", new[] { "FundCode" });
            }

            // RedemptionType (string) maxLength
            if (this.RedemptionType != null && this.RedemptionType.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RedemptionType, length must be less than 4.", new[] { "RedemptionType" });
            }

            // Unit (decimal?) maximum
            if (this.Unit > (decimal?)100000000000000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Unit, must be a value less than or equal to 100000000000000.", new[] { "Unit" });
            }

            // Amount (decimal?) maximum
            if (this.Amount > (decimal?)10000000000000000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, must be a value less than or equal to 10000000000000000.", new[] { "Amount" });
            }

            // TransactionDateTime (string) maxLength
            if (this.TransactionDateTime != null && this.TransactionDateTime.Length > 14)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionDateTime, length must be less than 14.", new[] { "TransactionDateTime" });
            }

            // TransactionDateTime (string) minLength
            if (this.TransactionDateTime != null && this.TransactionDateTime.Length < 14)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionDateTime, length must be greater than 14.", new[] { "TransactionDateTime" });
            }

            // EffectiveDate (string) maxLength
            if (this.EffectiveDate != null && this.EffectiveDate.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EffectiveDate, length must be less than 8.", new[] { "EffectiveDate" });
            }

            // EffectiveDate (string) minLength
            if (this.EffectiveDate != null && this.EffectiveDate.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EffectiveDate, length must be greater than 8.", new[] { "EffectiveDate" });
            }

            // SettlementDate (string) maxLength
            if (this.SettlementDate != null && this.SettlementDate.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SettlementDate, length must be less than 8.", new[] { "SettlementDate" });
            }

            // SettlementDate (string) minLength
            if (this.SettlementDate != null && this.SettlementDate.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SettlementDate, length must be greater than 8.", new[] { "SettlementDate" });
            }

            // AmcOrderReferenceNo (string) maxLength
            if (this.AmcOrderReferenceNo != null && this.AmcOrderReferenceNo.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AmcOrderReferenceNo, length must be less than 30.", new[] { "AmcOrderReferenceNo" });
            }

            // AllottedUnit (decimal?) maximum
            if (this.AllottedUnit > (decimal?)100000000000000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AllottedUnit, must be a value less than or equal to 100000000000000.", new[] { "AllottedUnit" });
            }

            // AllottedAmount (decimal?) maximum
            if (this.AllottedAmount > (decimal?)10000000000000000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AllottedAmount, must be a value less than or equal to 10000000000000000.", new[] { "AllottedAmount" });
            }

            // AllottedNAV (decimal?) maximum
            if (this.AllottedNAV > (decimal?)99999999999.99)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AllottedNAV, must be a value less than or equal to 99999999999.99.", new[] { "AllottedNAV" });
            }

            // AllotmentDate (string) maxLength
            if (this.AllotmentDate != null && this.AllotmentDate.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AllotmentDate, length must be less than 8.", new[] { "AllotmentDate" });
            }

            // Fee (decimal?) maximum
            if (this.Fee > (decimal?)10000000000000000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Fee, must be a value less than or equal to 10000000000000000.", new[] { "Fee" });
            }

            // TransactionLastUpdated (string) maxLength
            if (this.TransactionLastUpdated != null && this.TransactionLastUpdated.Length > 14)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionLastUpdated, length must be less than 14.", new[] { "TransactionLastUpdated" });
            }

            // TransactionLastUpdated (string) minLength
            if (this.TransactionLastUpdated != null && this.TransactionLastUpdated.Length < 14)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionLastUpdated, length must be greater than 14.", new[] { "TransactionLastUpdated" });
            }

            // PaymentType (string) maxLength
            if (this.PaymentType != null && this.PaymentType.Length > 14)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentType, length must be less than 14.", new[] { "PaymentType" });
            }

            // BankCode (string) maxLength
            if (this.BankCode != null && this.BankCode.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BankCode, length must be less than 4.", new[] { "BankCode" });
            }

            // BankAccount (string) maxLength
            if (this.BankAccount != null && this.BankAccount.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BankAccount, length must be less than 20.", new[] { "BankAccount" });
            }

            // Channel (string) maxLength
            if (this.Channel != null && this.Channel.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Channel, length must be less than 4.", new[] { "Channel" });
            }

            // IcLicense (string) maxLength
            if (this.IcLicense != null && this.IcLicense.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IcLicense, length must be less than 10.", new[] { "IcLicense" });
            }

            // BranchNo (string) maxLength
            if (this.BranchNo != null && this.BranchNo.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BranchNo, length must be less than 5.", new[] { "BranchNo" });
            }

            // ForceEntry (string) maxLength
            if (this.ForceEntry != null && this.ForceEntry.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ForceEntry, length must be less than 1.", new[] { "ForceEntry" });
            }

            // SettlementBankCode (string) maxLength
            if (this.SettlementBankCode != null && this.SettlementBankCode.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SettlementBankCode, length must be less than 4.", new[] { "SettlementBankCode" });
            }

            // SettlementBankAccount (string) maxLength
            if (this.SettlementBankAccount != null && this.SettlementBankAccount.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SettlementBankAccount, length must be less than 20.", new[] { "SettlementBankAccount" });
            }

            // ChqBranch (string) maxLength
            if (this.ChqBranch != null && this.ChqBranch.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChqBranch, length must be less than 5.", new[] { "ChqBranch" });
            }

            // RejectReason (string) maxLength
            if (this.RejectReason != null && this.RejectReason.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RejectReason, length must be less than 50.", new[] { "RejectReason" });
            }

            // NavDate (string) maxLength
            if (this.NavDate != null && this.NavDate.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NavDate, length must be less than 10.", new[] { "NavDate" });
            }

            // CollateralAccount (string) maxLength
            if (this.CollateralAccount != null && this.CollateralAccount.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CollateralAccount, length must be less than 20.", new[] { "CollateralAccount" });
            }

            // AccountType (string) maxLength
            if (this.AccountType != null && this.AccountType.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountType, length must be less than 5.", new[] { "AccountType" });
            }

            // RecurringOrderId (string) maxLength
            if (this.RecurringOrderId != null && this.RecurringOrderId.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RecurringOrderId, length must be less than 20.", new[] { "RecurringOrderId" });
            }

            // PaymentStatus (string) maxLength
            if (this.PaymentStatus != null && this.PaymentStatus.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentStatus, length must be less than 10.", new[] { "PaymentStatus" });
            }

            // PaymentProcessingType (string) maxLength
            if (this.PaymentProcessingType != null && this.PaymentProcessingType.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentProcessingType, length must be less than 1.", new[] { "PaymentProcessingType" });
            }

            // SaRecurringOrderRefNo (string) maxLength
            if (this.SaRecurringOrderRefNo != null && this.SaRecurringOrderRefNo.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SaRecurringOrderRefNo, length must be less than 30.", new[] { "SaRecurringOrderRefNo" });
            }

            // CrcApprovalCode (string) maxLength
            if (this.CrcApprovalCode != null && this.CrcApprovalCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrcApprovalCode, length must be less than 20.", new[] { "CrcApprovalCode" });
            }

            // PointCode (string) maxLength
            if (this.PointCode != null && this.PointCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PointCode, length must be less than 10.", new[] { "PointCode" });
            }

            // CounterUnitholderId (string) maxLength
            if (this.CounterUnitholderId != null && this.CounterUnitholderId.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CounterUnitholderId, length must be less than 15.", new[] { "CounterUnitholderId" });
            }

            // CounterFundCode (string) maxLength
            if (this.CounterFundCode != null && this.CounterFundCode.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CounterFundCode, length must be less than 30.", new[] { "CounterFundCode" });
            }

            // XwtReferenceNo (string) maxLength
            if (this.XwtReferenceNo != null && this.XwtReferenceNo.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for XwtReferenceNo, length must be less than 16.", new[] { "XwtReferenceNo" });
            }

            // OriginalTransactionId (string) maxLength
            if (this.OriginalTransactionId != null && this.OriginalTransactionId.Length > 17)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OriginalTransactionId, length must be less than 17.", new[] { "OriginalTransactionId" });
            }

            // LmtsAdlsFee (string) maxLength
            if (this.LmtsAdlsFee != null && this.LmtsAdlsFee.Length > 13)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LmtsAdlsFee, length must be less than 13.", new[] { "LmtsAdlsFee" });
            }

            // LmtsLiquidityFee (string) maxLength
            if (this.LmtsLiquidityFee != null && this.LmtsLiquidityFee.Length > 13)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LmtsLiquidityFee, length must be less than 13.", new[] { "LmtsLiquidityFee" });
            }

            yield break;
        }
    }

}
