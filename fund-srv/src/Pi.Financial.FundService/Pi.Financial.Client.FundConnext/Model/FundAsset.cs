/*
 * FundConnext
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Pi.Financial.Client.FundConnext.Client.FileParameter;
using OpenAPIDateConverter = Pi.Financial.Client.FundConnext.Client.OpenAPIDateConverter;

namespace Pi.Financial.Client.FundConnext.Model
{
    /// <summary>
    /// FundAsset
    /// </summary>
    [DataContract(Name = "FundAsset")]
    public partial class FundAsset : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FundAsset" /> class.
        /// </summary>
        /// <param name="unitholderId">unitholderId.</param>
        /// <param name="fundCode">fundCode.</param>
        /// <param name="unit">unit.</param>
        /// <param name="amount">amount.</param>
        /// <param name="remainUnit">remainUnit.</param>
        /// <param name="remainAmount">remainAmount.</param>
        /// <param name="pendingAmount">pendingAmount.</param>
        /// <param name="pendingUnit">pendingUnit.</param>
        /// <param name="avgCost">avgCost.</param>
        /// <param name="nav">nav.</param>
        /// <param name="navDate">navDate.</param>
        public FundAsset(string unitholderId = default(string), string fundCode = default(string), decimal unit = default(decimal), decimal amount = default(decimal), decimal remainUnit = default(decimal), decimal remainAmount = default(decimal), decimal pendingAmount = default(decimal), decimal pendingUnit = default(decimal), decimal? avgCost = default(decimal?), decimal nav = default(decimal), string navDate = default(string))
        {
            this.UnitholderId = unitholderId;
            this.FundCode = fundCode;
            this.Unit = unit;
            this.Amount = amount;
            this.RemainUnit = remainUnit;
            this.RemainAmount = remainAmount;
            this.PendingAmount = pendingAmount;
            this.PendingUnit = pendingUnit;
            this.AvgCost = avgCost;
            this.Nav = nav;
            this.NavDate = navDate;
        }

        /// <summary>
        /// Gets or Sets UnitholderId
        /// </summary>
        [DataMember(Name = "unitholderId", EmitDefaultValue = false)]
        public string UnitholderId { get; set; }

        /// <summary>
        /// Gets or Sets FundCode
        /// </summary>
        [DataMember(Name = "fundCode", EmitDefaultValue = false)]
        public string FundCode { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name = "unit", EmitDefaultValue = false)]
        public decimal Unit { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Gets or Sets RemainUnit
        /// </summary>
        [DataMember(Name = "remainUnit", EmitDefaultValue = false)]
        public decimal RemainUnit { get; set; }

        /// <summary>
        /// Gets or Sets RemainAmount
        /// </summary>
        [DataMember(Name = "remainAmount", EmitDefaultValue = false)]
        public decimal RemainAmount { get; set; }

        /// <summary>
        /// Gets or Sets PendingAmount
        /// </summary>
        [DataMember(Name = "pendingAmount", EmitDefaultValue = false)]
        public decimal PendingAmount { get; set; }

        /// <summary>
        /// Gets or Sets PendingUnit
        /// </summary>
        [DataMember(Name = "pendingUnit", EmitDefaultValue = false)]
        public decimal PendingUnit { get; set; }

        /// <summary>
        /// Gets or Sets AvgCost
        /// </summary>
        [DataMember(Name = "avgCost", EmitDefaultValue = true)]
        public decimal? AvgCost { get; set; }

        /// <summary>
        /// Gets or Sets Nav
        /// </summary>
        [DataMember(Name = "nav", EmitDefaultValue = false)]
        public decimal Nav { get; set; }

        /// <summary>
        /// Gets or Sets NavDate
        /// </summary>
        [DataMember(Name = "navDate", EmitDefaultValue = false)]
        public string NavDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FundAsset {\n");
            sb.Append("  UnitholderId: ").Append(UnitholderId).Append("\n");
            sb.Append("  FundCode: ").Append(FundCode).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  RemainUnit: ").Append(RemainUnit).Append("\n");
            sb.Append("  RemainAmount: ").Append(RemainAmount).Append("\n");
            sb.Append("  PendingAmount: ").Append(PendingAmount).Append("\n");
            sb.Append("  PendingUnit: ").Append(PendingUnit).Append("\n");
            sb.Append("  AvgCost: ").Append(AvgCost).Append("\n");
            sb.Append("  Nav: ").Append(Nav).Append("\n");
            sb.Append("  NavDate: ").Append(NavDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UnitholderId (string) maxLength
            if (this.UnitholderId != null && this.UnitholderId.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitholderId, length must be less than 15.", new[] { "UnitholderId" });
            }

            // FundCode (string) maxLength
            if (this.FundCode != null && this.FundCode.Length > 300)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FundCode, length must be less than 300.", new[] { "FundCode" });
            }

            yield break;
        }
    }

}
