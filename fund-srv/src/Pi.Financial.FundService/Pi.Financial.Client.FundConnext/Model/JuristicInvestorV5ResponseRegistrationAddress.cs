/*
 * FundConnext
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Pi.Financial.Client.FundConnext.Client.FileParameter;
using OpenAPIDateConverter = Pi.Financial.Client.FundConnext.Client.OpenAPIDateConverter;

namespace Pi.Financial.Client.FundConnext.Model
{
    /// <summary>
    /// JuristicInvestorV5ResponseRegistrationAddress
    /// </summary>
    [DataContract(Name = "JuristicInvestorV5Response_registrationAddress")]
    public partial class JuristicInvestorV5ResponseRegistrationAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JuristicInvestorV5ResponseRegistrationAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JuristicInvestorV5ResponseRegistrationAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JuristicInvestorV5ResponseRegistrationAddress" /> class.
        /// </summary>
        /// <param name="no">ที่อยู่  (required).</param>
        /// <param name="floor">ชั้น .</param>
        /// <param name="building">อาคาร .</param>
        /// <param name="roomNo">เลขที่ห้อง .</param>
        /// <param name="soi">ซอย .</param>
        /// <param name="road">ถนน .</param>
        /// <param name="moo">หมู่ที่ .</param>
        /// <param name="subdistrict">แขวง/ตำบล  (required).</param>
        /// <param name="district">เขต/อำเภอ  (required).</param>
        /// <param name="province">จังหวัด  (required).</param>
        /// <param name="postalCode">รหัสไปรษณีย์  (required).</param>
        /// <param name="country">ประเทศ  (required).</param>
        /// <param name="phoneNumber">โทรศัพท์ (mandatory กรณีเป็นเบอร์โทรศัพท์ของ registrationAddress)  (required).</param>
        public JuristicInvestorV5ResponseRegistrationAddress(string no = default(string), string floor = default(string), string building = default(string), string roomNo = default(string), string soi = default(string), string road = default(string), string moo = default(string), string subdistrict = default(string), string district = default(string), string province = default(string), string postalCode = default(string), string country = default(string), string phoneNumber = default(string))
        {
            // to ensure "no" is required (not null)
            if (no == null)
            {
                throw new ArgumentNullException("no is a required property for JuristicInvestorV5ResponseRegistrationAddress and cannot be null");
            }
            this.No = no;
            // to ensure "subdistrict" is required (not null)
            if (subdistrict == null)
            {
                throw new ArgumentNullException("subdistrict is a required property for JuristicInvestorV5ResponseRegistrationAddress and cannot be null");
            }
            this.Subdistrict = subdistrict;
            // to ensure "district" is required (not null)
            if (district == null)
            {
                throw new ArgumentNullException("district is a required property for JuristicInvestorV5ResponseRegistrationAddress and cannot be null");
            }
            this.District = district;
            // to ensure "province" is required (not null)
            if (province == null)
            {
                throw new ArgumentNullException("province is a required property for JuristicInvestorV5ResponseRegistrationAddress and cannot be null");
            }
            this.Province = province;
            // to ensure "postalCode" is required (not null)
            if (postalCode == null)
            {
                throw new ArgumentNullException("postalCode is a required property for JuristicInvestorV5ResponseRegistrationAddress and cannot be null");
            }
            this.PostalCode = postalCode;
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new ArgumentNullException("country is a required property for JuristicInvestorV5ResponseRegistrationAddress and cannot be null");
            }
            this.Country = country;
            // to ensure "phoneNumber" is required (not null)
            if (phoneNumber == null)
            {
                throw new ArgumentNullException("phoneNumber is a required property for JuristicInvestorV5ResponseRegistrationAddress and cannot be null");
            }
            this.PhoneNumber = phoneNumber;
            this.Floor = floor;
            this.Building = building;
            this.RoomNo = roomNo;
            this.Soi = soi;
            this.Road = road;
            this.Moo = moo;
        }

        /// <summary>
        /// ที่อยู่ 
        /// </summary>
        /// <value>ที่อยู่ </value>
        [DataMember(Name = "no", IsRequired = true, EmitDefaultValue = true)]
        public string No { get; set; }

        /// <summary>
        /// ชั้น 
        /// </summary>
        /// <value>ชั้น </value>
        [DataMember(Name = "floor", EmitDefaultValue = true)]
        public string Floor { get; set; }

        /// <summary>
        /// อาคาร 
        /// </summary>
        /// <value>อาคาร </value>
        [DataMember(Name = "building", EmitDefaultValue = true)]
        public string Building { get; set; }

        /// <summary>
        /// เลขที่ห้อง 
        /// </summary>
        /// <value>เลขที่ห้อง </value>
        [DataMember(Name = "roomNo", EmitDefaultValue = true)]
        public string RoomNo { get; set; }

        /// <summary>
        /// ซอย 
        /// </summary>
        /// <value>ซอย </value>
        [DataMember(Name = "soi", EmitDefaultValue = true)]
        public string Soi { get; set; }

        /// <summary>
        /// ถนน 
        /// </summary>
        /// <value>ถนน </value>
        [DataMember(Name = "road", EmitDefaultValue = true)]
        public string Road { get; set; }

        /// <summary>
        /// หมู่ที่ 
        /// </summary>
        /// <value>หมู่ที่ </value>
        [DataMember(Name = "moo", EmitDefaultValue = true)]
        public string Moo { get; set; }

        /// <summary>
        /// แขวง/ตำบล 
        /// </summary>
        /// <value>แขวง/ตำบล </value>
        [DataMember(Name = "subdistrict", IsRequired = true, EmitDefaultValue = true)]
        public string Subdistrict { get; set; }

        /// <summary>
        /// เขต/อำเภอ 
        /// </summary>
        /// <value>เขต/อำเภอ </value>
        [DataMember(Name = "district", IsRequired = true, EmitDefaultValue = true)]
        public string District { get; set; }

        /// <summary>
        /// จังหวัด 
        /// </summary>
        /// <value>จังหวัด </value>
        [DataMember(Name = "province", IsRequired = true, EmitDefaultValue = true)]
        public string Province { get; set; }

        /// <summary>
        /// รหัสไปรษณีย์ 
        /// </summary>
        /// <value>รหัสไปรษณีย์ </value>
        [DataMember(Name = "postalCode", IsRequired = true, EmitDefaultValue = true)]
        public string PostalCode { get; set; }

        /// <summary>
        /// ประเทศ 
        /// </summary>
        /// <value>ประเทศ </value>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// โทรศัพท์ (mandatory กรณีเป็นเบอร์โทรศัพท์ของ registrationAddress) 
        /// </summary>
        /// <value>โทรศัพท์ (mandatory กรณีเป็นเบอร์โทรศัพท์ของ registrationAddress) </value>
        [DataMember(Name = "phoneNumber", IsRequired = true, EmitDefaultValue = true)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JuristicInvestorV5ResponseRegistrationAddress {\n");
            sb.Append("  No: ").Append(No).Append("\n");
            sb.Append("  Floor: ").Append(Floor).Append("\n");
            sb.Append("  Building: ").Append(Building).Append("\n");
            sb.Append("  RoomNo: ").Append(RoomNo).Append("\n");
            sb.Append("  Soi: ").Append(Soi).Append("\n");
            sb.Append("  Road: ").Append(Road).Append("\n");
            sb.Append("  Moo: ").Append(Moo).Append("\n");
            sb.Append("  Subdistrict: ").Append(Subdistrict).Append("\n");
            sb.Append("  District: ").Append(District).Append("\n");
            sb.Append("  Province: ").Append(Province).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // No (string) maxLength
            if (this.No != null && this.No.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for No, length must be less than 20.", new[] { "No" });
            }

            // No (string) minLength
            if (this.No != null && this.No.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for No, length must be greater than 1.", new[] { "No" });
            }

            // Floor (string) maxLength
            if (this.Floor != null && this.Floor.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Floor, length must be less than 20.", new[] { "Floor" });
            }

            // Building (string) maxLength
            if (this.Building != null && this.Building.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Building, length must be less than 100.", new[] { "Building" });
            }

            // RoomNo (string) maxLength
            if (this.RoomNo != null && this.RoomNo.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RoomNo, length must be less than 20.", new[] { "RoomNo" });
            }

            // Soi (string) maxLength
            if (this.Soi != null && this.Soi.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Soi, length must be less than 100.", new[] { "Soi" });
            }

            // Road (string) maxLength
            if (this.Road != null && this.Road.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Road, length must be less than 100.", new[] { "Road" });
            }

            // Moo (string) maxLength
            if (this.Moo != null && this.Moo.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Moo, length must be less than 20.", new[] { "Moo" });
            }

            // Subdistrict (string) maxLength
            if (this.Subdistrict != null && this.Subdistrict.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Subdistrict, length must be less than 50.", new[] { "Subdistrict" });
            }

            // Subdistrict (string) minLength
            if (this.Subdistrict != null && this.Subdistrict.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Subdistrict, length must be greater than 1.", new[] { "Subdistrict" });
            }

            // District (string) maxLength
            if (this.District != null && this.District.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for District, length must be less than 50.", new[] { "District" });
            }

            // District (string) minLength
            if (this.District != null && this.District.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for District, length must be greater than 1.", new[] { "District" });
            }

            // Province (string) maxLength
            if (this.Province != null && this.Province.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Province, length must be less than 50.", new[] { "Province" });
            }

            // Province (string) minLength
            if (this.Province != null && this.Province.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Province, length must be greater than 1.", new[] { "Province" });
            }

            // PostalCode (string) maxLength
            if (this.PostalCode != null && this.PostalCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PostalCode, length must be less than 10.", new[] { "PostalCode" });
            }

            // PostalCode (string) minLength
            if (this.PostalCode != null && this.PostalCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PostalCode, length must be greater than 1.", new[] { "PostalCode" });
            }

            // Country (string) maxLength
            if (this.Country != null && this.Country.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, length must be less than 2.", new[] { "Country" });
            }

            // Country (string) minLength
            if (this.Country != null && this.Country.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, length must be greater than 2.", new[] { "Country" });
            }

            // PhoneNumber (string) maxLength
            if (this.PhoneNumber != null && this.PhoneNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PhoneNumber, length must be less than 20.", new[] { "PhoneNumber" });
            }

            // PhoneNumber (string) minLength
            if (this.PhoneNumber != null && this.PhoneNumber.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PhoneNumber, length must be greater than 1.", new[] { "PhoneNumber" });
            }

            yield break;
        }
    }

}
