/*
 * FundConnext
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Pi.Financial.Client.FundConnext.Client.FileParameter;
using OpenAPIDateConverter = Pi.Financial.Client.FundConnext.Client.OpenAPIDateConverter;

namespace Pi.Financial.Client.FundConnext.Model
{
    /// <summary>
    /// Individual profile object V5 (improve V4 with CRS data)&lt;br/&gt;Change occupationId Type from Char to Number(3)&lt;br/&gt;Change businessTypeId&#39;s Type from Char to Number(3)&lt;br/&gt;Change assetValue&#39;s Type from Number(18,2) to Number(15,2) (Max 9999999999999.99)&lt;br/&gt;Change suitabilityRiskLevel&#39;s Type from Char to Number&lt;br/&gt;Change cddScore&#39;s Type from Char to Number&lt;br/&gt;Change acceptBy&#39;s key to acceptedBy&lt;br/&gt;Change openChannel field from Optional to Mandatory&lt;br/&gt;Change subDistrict&#39;s key to subdistrict in address object (identificationDocument, current, work)
    /// </summary>
    [DataContract(Name = "IndividualInvestorV5Response")]
    public partial class IndividualInvestorV5Response : IValidatableObject
    {
        /// <summary>
        /// ประเภทบัตรที่เปิดบัญชี PASSPORT CITIZEN_CARD&#x3D;บัตรประชาชน 
        /// </summary>
        /// <value>ประเภทบัตรที่เปิดบัญชี PASSPORT CITIZEN_CARD&#x3D;บัตรประชาชน </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IdentificationCardTypeEnum
        {
            /// <summary>
            /// Enum PASSPORT for value: PASSPORT
            /// </summary>
            [EnumMember(Value = "PASSPORT")]
            PASSPORT = 1,

            /// <summary>
            /// Enum CITIZENCARD for value: CITIZEN_CARD
            /// </summary>
            [EnumMember(Value = "CITIZEN_CARD")]
            CITIZENCARD = 2
        }


        /// <summary>
        /// ประเภทบัตรที่เปิดบัญชี PASSPORT CITIZEN_CARD&#x3D;บัตรประชาชน 
        /// </summary>
        /// <value>ประเภทบัตรที่เปิดบัญชี PASSPORT CITIZEN_CARD&#x3D;บัตรประชาชน </value>
        [DataMember(Name = "identificationCardType", EmitDefaultValue = false)]
        public IdentificationCardTypeEnum? IdentificationCardType { get; set; }
        /// <summary>
        /// &lt;/br&gt; เอกสารที่ใช้เปิดบัญชี &lt;/br&gt; CITIZEN_CARD&#x3D;บัตรประชาชน &lt;/br&gt; ALIEN_CARD&#x3D;บัตรต่างด้าว &lt;/br&gt; &lt;/br&gt;(mandatory กรณี identificationCardType &#x3D; CITIZEN_CARD) &lt;/br&gt;
        /// </summary>
        /// <value>&lt;/br&gt; เอกสารที่ใช้เปิดบัญชี &lt;/br&gt; CITIZEN_CARD&#x3D;บัตรประชาชน &lt;/br&gt; ALIEN_CARD&#x3D;บัตรต่างด้าว &lt;/br&gt; &lt;/br&gt;(mandatory กรณี identificationCardType &#x3D; CITIZEN_CARD) &lt;/br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccompanyingDocumentEnum
        {
            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 1,

            /// <summary>
            /// Enum CITIZENCARD for value: CITIZEN_CARD
            /// </summary>
            [EnumMember(Value = "CITIZEN_CARD")]
            CITIZENCARD = 2,

            /// <summary>
            /// Enum ALIENCARD for value: ALIEN_CARD
            /// </summary>
            [EnumMember(Value = "ALIEN_CARD")]
            ALIENCARD = 3
        }


        /// <summary>
        /// &lt;/br&gt; เอกสารที่ใช้เปิดบัญชี &lt;/br&gt; CITIZEN_CARD&#x3D;บัตรประชาชน &lt;/br&gt; ALIEN_CARD&#x3D;บัตรต่างด้าว &lt;/br&gt; &lt;/br&gt;(mandatory กรณี identificationCardType &#x3D; CITIZEN_CARD) &lt;/br&gt;
        /// </summary>
        /// <value>&lt;/br&gt; เอกสารที่ใช้เปิดบัญชี &lt;/br&gt; CITIZEN_CARD&#x3D;บัตรประชาชน &lt;/br&gt; ALIEN_CARD&#x3D;บัตรต่างด้าว &lt;/br&gt; &lt;/br&gt;(mandatory กรณี identificationCardType &#x3D; CITIZEN_CARD) &lt;/br&gt;</value>
        [DataMember(Name = "accompanyingDocument", EmitDefaultValue = true)]
        public AccompanyingDocumentEnum? AccompanyingDocument { get; set; }
        /// <summary>
        /// คำนำหน้าชื่อ&lt;/br&gt;MR &#x3D; นาย&lt;/br&gt;MRS &#x3D; นาง&lt;/br&gt;MISS &#x3D; นางสาว&lt;/br&gt;OTHER &#x3D; อื่นๆ&lt;/br&gt;
        /// </summary>
        /// <value>คำนำหน้าชื่อ&lt;/br&gt;MR &#x3D; นาย&lt;/br&gt;MRS &#x3D; นาง&lt;/br&gt;MISS &#x3D; นางสาว&lt;/br&gt;OTHER &#x3D; อื่นๆ&lt;/br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TitleEnum
        {
            /// <summary>
            /// Enum MR for value: MR
            /// </summary>
            [EnumMember(Value = "MR")]
            MR = 1,

            /// <summary>
            /// Enum MRS for value: MRS
            /// </summary>
            [EnumMember(Value = "MRS")]
            MRS = 2,

            /// <summary>
            /// Enum MISS for value: MISS
            /// </summary>
            [EnumMember(Value = "MISS")]
            MISS = 3,

            /// <summary>
            /// Enum OTHER for value: OTHER
            /// </summary>
            [EnumMember(Value = "OTHER")]
            OTHER = 4
        }


        /// <summary>
        /// คำนำหน้าชื่อ&lt;/br&gt;MR &#x3D; นาย&lt;/br&gt;MRS &#x3D; นาง&lt;/br&gt;MISS &#x3D; นางสาว&lt;/br&gt;OTHER &#x3D; อื่นๆ&lt;/br&gt;
        /// </summary>
        /// <value>คำนำหน้าชื่อ&lt;/br&gt;MR &#x3D; นาย&lt;/br&gt;MRS &#x3D; นาง&lt;/br&gt;MISS &#x3D; นางสาว&lt;/br&gt;OTHER &#x3D; อื่นๆ&lt;/br&gt;</value>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public TitleEnum? Title { get; set; }
        /// <summary>
        /// สถานะ&lt;/br&gt;Single &#x3D; โสด&lt;/br&gt;Married &#x3D; สมรส&lt;/br&gt;
        /// </summary>
        /// <value>สถานะ&lt;/br&gt;Single &#x3D; โสด&lt;/br&gt;Married &#x3D; สมรส&lt;/br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MaritalStatusEnum
        {
            /// <summary>
            /// Enum Single for value: Single
            /// </summary>
            [EnumMember(Value = "Single")]
            Single = 1,

            /// <summary>
            /// Enum Married for value: Married
            /// </summary>
            [EnumMember(Value = "Married")]
            Married = 2
        }


        /// <summary>
        /// สถานะ&lt;/br&gt;Single &#x3D; โสด&lt;/br&gt;Married &#x3D; สมรส&lt;/br&gt;
        /// </summary>
        /// <value>สถานะ&lt;/br&gt;Single &#x3D; โสด&lt;/br&gt;Married &#x3D; สมรส&lt;/br&gt;</value>
        [DataMember(Name = "maritalStatus", EmitDefaultValue = false)]
        public MaritalStatusEnum? MaritalStatus { get; set; }

        /// <summary>
        /// Gets or Sets OccupationId
        /// </summary>
        [DataMember(Name = "occupationId", EmitDefaultValue = false)]
        public OccupationId? OccupationId { get; set; }

        /// <summary>
        /// Gets or Sets BusinessTypeId
        /// </summary>
        [DataMember(Name = "businessTypeId", EmitDefaultValue = true)]
        public BusinessTypeId? BusinessTypeId { get; set; }

        /// <summary>
        /// Gets or Sets MonthlyIncomeLevel
        /// </summary>
        [DataMember(Name = "monthlyIncomeLevel", EmitDefaultValue = false)]
        public MonthlyIncomeLevel? MonthlyIncomeLevel { get; set; }
        /// <summary>
        /// การกำหนดที่อยู่ที่ติดต่อให้เหมือนที่อยู่ทะเบียนบ้าน&lt;/br&gt;IdDocument &#x3D; เหมือนที่อยู่ตามประเภทหลักฐาน&lt;/br&gt;
        /// </summary>
        /// <value>การกำหนดที่อยู่ที่ติดต่อให้เหมือนที่อยู่ทะเบียนบ้าน&lt;/br&gt;IdDocument &#x3D; เหมือนที่อยู่ตามประเภทหลักฐาน&lt;/br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrentAddressSameAsFlagEnum
        {
            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 1,

            /// <summary>
            /// Enum IdDocument for value: IdDocument
            /// </summary>
            [EnumMember(Value = "IdDocument")]
            IdDocument = 2
        }


        /// <summary>
        /// การกำหนดที่อยู่ที่ติดต่อให้เหมือนที่อยู่ทะเบียนบ้าน&lt;/br&gt;IdDocument &#x3D; เหมือนที่อยู่ตามประเภทหลักฐาน&lt;/br&gt;
        /// </summary>
        /// <value>การกำหนดที่อยู่ที่ติดต่อให้เหมือนที่อยู่ทะเบียนบ้าน&lt;/br&gt;IdDocument &#x3D; เหมือนที่อยู่ตามประเภทหลักฐาน&lt;/br&gt;</value>
        [DataMember(Name = "currentAddressSameAsFlag", EmitDefaultValue = true)]
        public CurrentAddressSameAsFlagEnum? CurrentAddressSameAsFlag { get; set; }
        /// <summary>
        /// มีการกรอกแบบฟอร์ม FundConnext แล้วหรือไม่&lt;/br&gt;Y &#x3D; แบบฟอร์ม FundConnext เดิม&lt;/br&gt;N &#x3D; ยังไม่ได้กรอกแบบฟอร์ม FundConnext&lt;/br&gt;S &#x3D; แบบฟอร์ม FundConnext (Single Form)&lt;/br&gt;
        /// </summary>
        /// <value>มีการกรอกแบบฟอร์ม FundConnext แล้วหรือไม่&lt;/br&gt;Y &#x3D; แบบฟอร์ม FundConnext เดิม&lt;/br&gt;N &#x3D; ยังไม่ได้กรอกแบบฟอร์ม FundConnext&lt;/br&gt;S &#x3D; แบบฟอร์ม FundConnext (Single Form)&lt;/br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OpenFundConnextFormFlagEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2,

            /// <summary>
            /// Enum S for value: S
            /// </summary>
            [EnumMember(Value = "S")]
            S = 3
        }


        /// <summary>
        /// มีการกรอกแบบฟอร์ม FundConnext แล้วหรือไม่&lt;/br&gt;Y &#x3D; แบบฟอร์ม FundConnext เดิม&lt;/br&gt;N &#x3D; ยังไม่ได้กรอกแบบฟอร์ม FundConnext&lt;/br&gt;S &#x3D; แบบฟอร์ม FundConnext (Single Form)&lt;/br&gt;
        /// </summary>
        /// <value>มีการกรอกแบบฟอร์ม FundConnext แล้วหรือไม่&lt;/br&gt;Y &#x3D; แบบฟอร์ม FundConnext เดิม&lt;/br&gt;N &#x3D; ยังไม่ได้กรอกแบบฟอร์ม FundConnext&lt;/br&gt;S &#x3D; แบบฟอร์ม FundConnext (Single Form)&lt;/br&gt;</value>
        [DataMember(Name = "openFundConnextFormFlag", EmitDefaultValue = false)]
        public OpenFundConnextFormFlagEnum? OpenFundConnextFormFlag { get; set; }
        /// <summary>
        /// ช่องทางการเปิดบัญชี&lt;/br&gt;1 - ONLINE&lt;/br&gt;2 - OFFLINE&lt;/br&gt;
        /// </summary>
        /// <value>ช่องทางการเปิดบัญชี&lt;/br&gt;1 - ONLINE&lt;/br&gt;2 - OFFLINE&lt;/br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OpenChannelEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 1,

            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 2
        }


        /// <summary>
        /// ช่องทางการเปิดบัญชี&lt;/br&gt;1 - ONLINE&lt;/br&gt;2 - OFFLINE&lt;/br&gt;
        /// </summary>
        /// <value>ช่องทางการเปิดบัญชี&lt;/br&gt;1 - ONLINE&lt;/br&gt;2 - OFFLINE&lt;/br&gt;</value>
        [DataMember(Name = "openChannel", EmitDefaultValue = false)]
        public OpenChannelEnum? OpenChannel { get; set; }
        /// <summary>
        /// ประเภทของ Profile
        /// </summary>
        /// <value>ประเภทของ Profile</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InvestorTypeEnum
        {
            /// <summary>
            /// Enum INDIVIDUAL for value: INDIVIDUAL
            /// </summary>
            [EnumMember(Value = "INDIVIDUAL")]
            INDIVIDUAL = 1,

            /// <summary>
            /// Enum JURISTIC for value: JURISTIC
            /// </summary>
            [EnumMember(Value = "JURISTIC")]
            JURISTIC = 2,

            /// <summary>
            /// Enum JOINT for value: JOINT
            /// </summary>
            [EnumMember(Value = "JOINT")]
            JOINT = 3,

            /// <summary>
            /// Enum BYWHOM for value: BYWHOM
            /// </summary>
            [EnumMember(Value = "BYWHOM")]
            BYWHOM = 4,

            /// <summary>
            /// Enum FORWHOM for value: FORWHOM
            /// </summary>
            [EnumMember(Value = "FORWHOM")]
            FORWHOM = 5
        }


        /// <summary>
        /// ประเภทของ Profile
        /// </summary>
        /// <value>ประเภทของ Profile</value>
        [DataMember(Name = "investorType", EmitDefaultValue = false)]
        public InvestorTypeEnum? InvestorType { get; set; }
        /// <summary>
        /// ประเภทนักลงทุนตามเกณฑ์ SEC&lt;/br&gt;1 &#x3D; UHNW : Ultra- High Net Worth&lt;/br&gt;2 &#x3D; HNW : High Net Worth&lt;/br&gt;3 &#x3D; Retail&lt;/br&gt;4 &#x3D; I : Institutional Investor&lt;/br&gt;
        /// </summary>
        /// <value>ประเภทนักลงทุนตามเกณฑ์ SEC&lt;/br&gt;1 &#x3D; UHNW : Ultra- High Net Worth&lt;/br&gt;2 &#x3D; HNW : High Net Worth&lt;/br&gt;3 &#x3D; Retail&lt;/br&gt;4 &#x3D; I : Institutional Investor&lt;/br&gt;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InvestorClassEnum
        {
            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 1,

            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 2,

            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 3,

            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 4,

            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 5
        }


        /// <summary>
        /// ประเภทนักลงทุนตามเกณฑ์ SEC&lt;/br&gt;1 &#x3D; UHNW : Ultra- High Net Worth&lt;/br&gt;2 &#x3D; HNW : High Net Worth&lt;/br&gt;3 &#x3D; Retail&lt;/br&gt;4 &#x3D; I : Institutional Investor&lt;/br&gt;
        /// </summary>
        /// <value>ประเภทนักลงทุนตามเกณฑ์ SEC&lt;/br&gt;1 &#x3D; UHNW : Ultra- High Net Worth&lt;/br&gt;2 &#x3D; HNW : High Net Worth&lt;/br&gt;3 &#x3D; Retail&lt;/br&gt;4 &#x3D; I : Institutional Investor&lt;/br&gt;</value>
        [DataMember(Name = "investorClass", EmitDefaultValue = true)]
        public InvestorClassEnum? InvestorClass { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IndividualInvestorV5Response" /> class.
        /// </summary>
        /// <param name="juristicNumber">juristicNumber.</param>
        /// <param name="identificationCardType">ประเภทบัตรที่เปิดบัญชี PASSPORT CITIZEN_CARD&#x3D;บัตรประชาชน .</param>
        /// <param name="passportCountry">รหัสประเทศที่ออก passport (mandatory กรณี IdentificationCardType &#x3D; PASSPORT) .</param>
        /// <param name="cardNumber">cardNumber.</param>
        /// <param name="cardExpiryDate">cardExpiryDate.</param>
        /// <param name="accompanyingDocument">&lt;/br&gt; เอกสารที่ใช้เปิดบัญชี &lt;/br&gt; CITIZEN_CARD&#x3D;บัตรประชาชน &lt;/br&gt; ALIEN_CARD&#x3D;บัตรต่างด้าว &lt;/br&gt; &lt;/br&gt;(mandatory กรณี identificationCardType &#x3D; CITIZEN_CARD) &lt;/br&gt;.</param>
        /// <param name="title">คำนำหน้าชื่อ&lt;/br&gt;MR &#x3D; นาย&lt;/br&gt;MRS &#x3D; นาง&lt;/br&gt;MISS &#x3D; นางสาว&lt;/br&gt;OTHER &#x3D; อื่นๆ&lt;/br&gt;.</param>
        /// <param name="titleOther">คำนำหน้าชื่ออื่นๆ เช่น หม่อมหลวง คุณหญิง&lt;/br&gt;(mandatory กรณี Title &#x3D; OTHER)&lt;/br&gt;.</param>
        /// <param name="enFirstName">ชื่อ ภาษาอังกฤษ&lt;/br&gt;.</param>
        /// <param name="enLastName">นามสกุล ภาษาอังกฤษ&lt;/br&gt;.</param>
        /// <param name="thFirstName">ชื่อ ภาษาไทย&lt;/br&gt;.</param>
        /// <param name="thLastName">นามสกุล ภาษาไทย&lt;/br&gt;.</param>
        /// <param name="birthDate">วันเกิด ค.ศ. (YYYYMMDD)&lt;/br&gt;.</param>
        /// <param name="nationality">รหัส สัญชาติ อ้างอิงตาม sheet Nationality&lt;/br&gt;.</param>
        /// <param name="mobileNumber">โทรศัพท์มือถือ เช่น 0819991234&lt;/br&gt;Validate: ตัวเลข 10 ตัว&lt;/br&gt;.</param>
        /// <param name="email">อีเมล เช่น xxx@set.or.th&lt;/br&gt;Validate: email pattern&lt;/br&gt;(mandatory กรณี mailingMethod &#x3D; Email)&lt;/br&gt;.</param>
        /// <param name="phone">โทรศัพท์พื้นฐาน&lt;/br&gt;.</param>
        /// <param name="fax">โทรสาร&lt;/br&gt;(mandatory กรณี mailingMethod &#x3D; Fax)&lt;/br&gt;.</param>
        /// <param name="maritalStatus">สถานะ&lt;/br&gt;Single &#x3D; โสด&lt;/br&gt;Married &#x3D; สมรส&lt;/br&gt;.</param>
        /// <param name="spouse">spouse.</param>
        /// <param name="occupationId">occupationId.</param>
        /// <param name="occupationOther">อาชีพอื่นๆ&lt;/br&gt;(mandatory กรณี occupationid&#x3D; 170)&lt;/br&gt;.</param>
        /// <param name="businessTypeId">businessTypeId.</param>
        /// <param name="businessTypeOther">ประเภทธุรกิจอื่นๆ&lt;/br&gt;(mandatory กรณี businessTypeId &#x3D; 180)&lt;/br&gt;.</param>
        /// <param name="monthlyIncomeLevel">monthlyIncomeLevel.</param>
        /// <param name="assetValue">assetValue.</param>
        /// <param name="incomeSource">ที่มาของรายได้ (สามารถเลือกได้มากกว่า 1 ข้อ แยกโดย comma (,)&lt;/br&gt;SALARY&#x3D; เงินเดือน&lt;/br&gt;SAVINGS &#x3D; เงินออม&lt;/br&gt;RETIREMENT&#x3D;เงินเกษียณ&lt;/br&gt;HERITAGE &#x3D; มรดก&lt;/br&gt;INVESTMENT&#x3D; เงินลงทุน&lt;/br&gt;BUSINESS &#x3D; ประกอบธุรกิจ&lt;/br&gt;OTHER&#x3D;อื่นๆ&lt;/br&gt;.</param>
        /// <param name="incomeSourceOther">ที่มาของรายได้อื่นๆ&lt;/br&gt;(mandatory กรณี incomeSource &#x3D; OTHER)&lt;/br&gt;.</param>
        /// <param name="identificationDocument">identificationDocument.</param>
        /// <param name="currentAddressSameAsFlag">การกำหนดที่อยู่ที่ติดต่อให้เหมือนที่อยู่ทะเบียนบ้าน&lt;/br&gt;IdDocument &#x3D; เหมือนที่อยู่ตามประเภทหลักฐาน&lt;/br&gt;.</param>
        /// <param name="current">current.</param>
        /// <param name="companyName">ชื่อสถานที่ทำงาน&lt;/br&gt;(mandatory กรณี occupationId &#x3D;30,40,50,60,70,110,130,150,160,170)&lt;/br&gt;.</param>
        /// <param name="work">work.</param>
        /// <param name="workPosition">ตำแหน่งงาน&lt;/br&gt;(mandatory กรณี occupationId &#x3D;30,40,50,60,70,110,130,150,160,170)&lt;/br&gt;.</param>
        /// <param name="relatedPoliticalPerson">ท่านเป็นผู้มีสถานภาพทางการเมืองหรือเป็นสมาชิกในครอบครัวหรือเป็นผู้ใกล้ชิดกับบุคคลผู้มีสถานภาพทางการเมืองหรือไม่&lt;/br&gt;true - มี&lt;/br&gt;false - ไม่มี&lt;/br&gt;.</param>
        /// <param name="politicalRelatedPersonPosition">ตำแหน่งงานที่เกี่ยวกับข้องกับการเมือง&lt;/br&gt;(mandatory กรณี relatedPoliticalPerson  &#x3D; true)&lt;/br&gt;.</param>
        /// <param name="canAcceptFxRisk">สามารถรับความเสี่ยงอัตราแลกเปลี่ยนได้หรือไม่&lt;/br&gt;true - ได้&lt;/br&gt;false - ไม่ได้&lt;/br&gt;.</param>
        /// <param name="canAcceptDerivativeInvestment">สามารถรับความเสี่ยงจากตราสารอนุพันธ์ได้หรือไม่&lt;/br&gt;true - ได้&lt;/br&gt;false - ไม่ได้&lt;/br&gt;.</param>
        /// <param name="suitabilityRiskLevel">suitabilityRiskLevel.</param>
        /// <param name="suitabilityEvaluationDate">วันที่ทำ suitability test เป็น ค.ศ. (YYYYMMDD)&lt;/br&gt;.</param>
        /// <param name="fatca">เป็นบุคคลสัญชาติ US ตาม FATCA หรือไม่&lt;/br&gt;true - ใช่&lt;/br&gt;false - ไม่ใช่&lt;/br&gt;.</param>
        /// <param name="fatcaDeclarationDate">วันที่ให้ข้อมูล FATCA  เป็น ค.ศ. (YYYYMMDD)&lt;/br&gt;.</param>
        /// <param name="crsPlaceOfBirthCountry">อ้างอิง Country ของ FundConnext ตาม Master Data.</param>
        /// <param name="crsPlaceOfBirthCity">เมืองเกิด ต้องเป็นภาษาอังกฤษเท่านั้น (ยกเว้น &lt;enter&gt;, |, \&quot;, {, }, [, ]) Regex: ^[A-Za-zÀ-ÿĀ-žЀ-ӿ0-9\\s!#$%&amp;&#39;()*+,-./:;&lt;&#x3D;&gt;?@^_&#x60;~ ]+$.</param>
        /// <param name="crsTaxResidenceInCountriesOtherThanTheUS">true ถ้าเป็นผู้มีถิ่นที่อยู่ทางภาษีในประเทศอื่นๆ นอกจากสหรัฐอเมริกา&lt;/br&gt; false ถ้าเป็นผู้มีถิ่นที่อยู่ทางภาษีในประเทศสหรัฐอเมริกาเท่านั้น.</param>
        /// <param name="crsDetails">crsDetails.</param>
        /// <param name="crsDeclarationDate">วันที่ให้ข้อมูล CRS  เป็น ค.ศ. (YYYYMMDD).</param>
        /// <param name="cddScore">CDD Score&lt;/br&gt;(1-3)&lt;/br&gt;.</param>
        /// <param name="cddDate">วันที่ทำ CDD เป็น ค.ศ. (YYYYMMDD)&lt;/br&gt;.</param>
        /// <param name="referralPerson">ผู้แนะนำ&lt;/br&gt;.</param>
        /// <param name="applicationDate">วันที่เปิดบัญชี&lt;/br&gt;.</param>
        /// <param name="incomeSourceCountry">รหัสประเทศ แหล่งที่มาของรายได้&lt;/br&gt;.</param>
        /// <param name="acceptedBy">ผู้รับเปิดบัญชี&lt;/br&gt;.</param>
        /// <param name="openFundConnextFormFlag">มีการกรอกแบบฟอร์ม FundConnext แล้วหรือไม่&lt;/br&gt;Y &#x3D; แบบฟอร์ม FundConnext เดิม&lt;/br&gt;N &#x3D; ยังไม่ได้กรอกแบบฟอร์ม FundConnext&lt;/br&gt;S &#x3D; แบบฟอร์ม FundConnext (Single Form)&lt;/br&gt;.</param>
        /// <param name="vulnerableFlag">เป็นลูกค้าเปราะบางหรือไม่&lt;/br&gt;true - เป็น&lt;/br&gt;false - ไม่เป็น&lt;/br&gt;.</param>
        /// <param name="vulnerableDetail">รายละเอียดการเป็นลูกค้าเปราะบาง (สามารถเลือกได้มากกว่า 1 ข้อ แยกโดย comma (,)&lt;/br&gt;60YearsOld&lt;/br&gt;NoInvestmentKnowledge&lt;/br&gt;Disability&lt;/br&gt;(mandatory กรณี vulnerableFlag &#x3D; true)&lt;/br&gt;.</param>
        /// <param name="ndidFlag">เปิดบัญชีด้วย NDID หรือไม่&lt;/br&gt;true &#x3D; เปิดบัญชีด้วย NDID&lt;/br&gt;false &#x3D;เปิดบัญชีด้วยรูปแบบเดิม&lt;/br&gt;default &#x3D; false&lt;/br&gt;.</param>
        /// <param name="ndidRequestId">รหัสอ้างอิงการยืนยันตัวตนเพื่อเปิดบัญชีจาก NDID&lt;/br&gt;(manatory กรณี ndidFlag &#x3D; true)&lt;/br&gt;.</param>
        /// <param name="openChannel">ช่องทางการเปิดบัญชี&lt;/br&gt;1 - ONLINE&lt;/br&gt;2 - OFFLINE&lt;/br&gt;.</param>
        /// <param name="investorType">ประเภทของ Profile.</param>
        /// <param name="accounts">Array ของ account (Please refer to AccountV5Response schema).</param>
        /// <param name="approvedDate">วันที่ approve การเปิด/แก้ไข เป็น ค.ศ. (YYYYMMDD).</param>
        /// <param name="approvedDateTime">วันเวลาที่ approve การเปิด/แก้ไข เป็น ค.ศ.+ชั่วโมงนาทีวินาที (YYYYMMDDHHmmss).</param>
        /// <param name="suitabilityForm">suitabilityForm.</param>
        /// <param name="investorClass">ประเภทนักลงทุนตามเกณฑ์ SEC&lt;/br&gt;1 &#x3D; UHNW : Ultra- High Net Worth&lt;/br&gt;2 &#x3D; HNW : High Net Worth&lt;/br&gt;3 &#x3D; Retail&lt;/br&gt;4 &#x3D; I : Institutional Investor&lt;/br&gt;.</param>
        /// <param name="knowledgeAssessmentResult">ผลลัพธ์การประเมิณความรู้ความสามารถในการลงทุน&lt;/br&gt;true &#x3D; ยอมรับ&lt;/br&gt;false &#x3D; ไม่ยอมรับ.</param>
        /// <param name="knowledgeAssessmentForm">knowledgeAssessmentForm.</param>
        /// <param name="identityVerificationDateTime">format yyyyMMddHHmmss.</param>
        /// <param name="dopaVerificationDateTime">format yyyyMMddHHmmss.</param>
        public IndividualInvestorV5Response(string juristicNumber = default(string), IdentificationCardTypeEnum? identificationCardType = default(IdentificationCardTypeEnum?), string passportCountry = default(string), IndividualInvestorV5ResponseCardNumber cardNumber = default(IndividualInvestorV5ResponseCardNumber), IndividualInvestorV5ResponseCardExpiryDate cardExpiryDate = default(IndividualInvestorV5ResponseCardExpiryDate), AccompanyingDocumentEnum? accompanyingDocument = default(AccompanyingDocumentEnum?), TitleEnum? title = default(TitleEnum?), string titleOther = default(string), string enFirstName = default(string), string enLastName = default(string), string thFirstName = default(string), string thLastName = default(string), string birthDate = default(string), string nationality = default(string), string mobileNumber = default(string), string email = default(string), string phone = default(string), string fax = default(string), MaritalStatusEnum? maritalStatus = default(MaritalStatusEnum?), Spouse spouse = default(Spouse), OccupationId? occupationId = default(OccupationId?), string occupationOther = default(string), BusinessTypeId? businessTypeId = default(BusinessTypeId?), string businessTypeOther = default(string), MonthlyIncomeLevel? monthlyIncomeLevel = default(MonthlyIncomeLevel?), IndividualInvestorV5ResponseAssetValue assetValue = default(IndividualInvestorV5ResponseAssetValue), string incomeSource = default(string), string incomeSourceOther = default(string), IndividualInvestorV5ResponseIdentificationDocument identificationDocument = default(IndividualInvestorV5ResponseIdentificationDocument), CurrentAddressSameAsFlagEnum? currentAddressSameAsFlag = default(CurrentAddressSameAsFlagEnum?), IndividualInvestorV5ResponseCurrent current = default(IndividualInvestorV5ResponseCurrent), string companyName = default(string), IndividualInvestorV5ResponseWork work = default(IndividualInvestorV5ResponseWork), string workPosition = default(string), bool? relatedPoliticalPerson = default(bool?), string politicalRelatedPersonPosition = default(string), bool canAcceptFxRisk = default(bool), bool canAcceptDerivativeInvestment = default(bool), IndividualInvestorV5ResponseSuitabilityRiskLevel suitabilityRiskLevel = default(IndividualInvestorV5ResponseSuitabilityRiskLevel), string suitabilityEvaluationDate = default(string), bool fatca = default(bool), string fatcaDeclarationDate = default(string), string crsPlaceOfBirthCountry = default(string), string crsPlaceOfBirthCity = default(string), bool? crsTaxResidenceInCountriesOtherThanTheUS = default(bool?), List<IndividualInvestorV5ResponseCrsDetailsInner> crsDetails = default(List<IndividualInvestorV5ResponseCrsDetailsInner>), string crsDeclarationDate = default(string), decimal cddScore = default(decimal), string cddDate = default(string), string referralPerson = default(string), string applicationDate = default(string), string incomeSourceCountry = default(string), string acceptedBy = default(string), OpenFundConnextFormFlagEnum? openFundConnextFormFlag = default(OpenFundConnextFormFlagEnum?), bool? vulnerableFlag = default(bool?), string vulnerableDetail = default(string), bool? ndidFlag = default(bool?), string ndidRequestId = default(string), OpenChannelEnum? openChannel = default(OpenChannelEnum?), InvestorTypeEnum? investorType = default(InvestorTypeEnum?), List<AccountV5Response> accounts = default(List<AccountV5Response>), string approvedDate = default(string), string approvedDateTime = default(string), IndividualInvestorV5ResponseSuitabilityForm suitabilityForm = default(IndividualInvestorV5ResponseSuitabilityForm), InvestorClassEnum? investorClass = default(InvestorClassEnum?), bool? knowledgeAssessmentResult = default(bool?), IndividualInvestorV5ResponseKnowledgeAssessmentForm knowledgeAssessmentForm = default(IndividualInvestorV5ResponseKnowledgeAssessmentForm), string identityVerificationDateTime = default(string), string dopaVerificationDateTime = default(string))
        {
            this.JuristicNumber = juristicNumber;
            this.IdentificationCardType = identificationCardType;
            this.PassportCountry = passportCountry;
            this.CardNumber = cardNumber;
            this.CardExpiryDate = cardExpiryDate;
            this.AccompanyingDocument = accompanyingDocument;
            this.Title = title;
            this.TitleOther = titleOther;
            this.EnFirstName = enFirstName;
            this.EnLastName = enLastName;
            this.ThFirstName = thFirstName;
            this.ThLastName = thLastName;
            this.BirthDate = birthDate;
            this.Nationality = nationality;
            this.MobileNumber = mobileNumber;
            this.Email = email;
            this.Phone = phone;
            this.Fax = fax;
            this.MaritalStatus = maritalStatus;
            this.Spouse = spouse;
            this.OccupationId = occupationId;
            this.OccupationOther = occupationOther;
            this.BusinessTypeId = businessTypeId;
            this.BusinessTypeOther = businessTypeOther;
            this.MonthlyIncomeLevel = monthlyIncomeLevel;
            this.AssetValue = assetValue;
            this.IncomeSource = incomeSource;
            this.IncomeSourceOther = incomeSourceOther;
            this.IdentificationDocument = identificationDocument;
            this.CurrentAddressSameAsFlag = currentAddressSameAsFlag;
            this.Current = current;
            this.CompanyName = companyName;
            this.Work = work;
            this.WorkPosition = workPosition;
            this.RelatedPoliticalPerson = relatedPoliticalPerson;
            this.PoliticalRelatedPersonPosition = politicalRelatedPersonPosition;
            this.CanAcceptFxRisk = canAcceptFxRisk;
            this.CanAcceptDerivativeInvestment = canAcceptDerivativeInvestment;
            this.SuitabilityRiskLevel = suitabilityRiskLevel;
            this.SuitabilityEvaluationDate = suitabilityEvaluationDate;
            this.Fatca = fatca;
            this.FatcaDeclarationDate = fatcaDeclarationDate;
            this.CrsPlaceOfBirthCountry = crsPlaceOfBirthCountry;
            this.CrsPlaceOfBirthCity = crsPlaceOfBirthCity;
            this.CrsTaxResidenceInCountriesOtherThanTheUS = crsTaxResidenceInCountriesOtherThanTheUS;
            this.CrsDetails = crsDetails;
            this.CrsDeclarationDate = crsDeclarationDate;
            this.CddScore = cddScore;
            this.CddDate = cddDate;
            this.ReferralPerson = referralPerson;
            this.ApplicationDate = applicationDate;
            this.IncomeSourceCountry = incomeSourceCountry;
            this.AcceptedBy = acceptedBy;
            this.OpenFundConnextFormFlag = openFundConnextFormFlag;
            this.VulnerableFlag = vulnerableFlag;
            this.VulnerableDetail = vulnerableDetail;
            this.NdidFlag = ndidFlag;
            this.NdidRequestId = ndidRequestId;
            this.OpenChannel = openChannel;
            this.InvestorType = investorType;
            this.Accounts = accounts;
            this.ApprovedDate = approvedDate;
            this.ApprovedDateTime = approvedDateTime;
            this.SuitabilityForm = suitabilityForm;
            this.InvestorClass = investorClass;
            this.KnowledgeAssessmentResult = knowledgeAssessmentResult;
            this.KnowledgeAssessmentForm = knowledgeAssessmentForm;
            this.IdentityVerificationDateTime = identityVerificationDateTime;
            this.DopaVerificationDateTime = dopaVerificationDateTime;
        }

        /// <summary>
        /// Gets or Sets JuristicNumber
        /// </summary>
        [DataMember(Name = "juristicNumber", EmitDefaultValue = true)]
        public string JuristicNumber { get; set; }

        /// <summary>
        /// รหัสประเทศที่ออก passport (mandatory กรณี IdentificationCardType &#x3D; PASSPORT) 
        /// </summary>
        /// <value>รหัสประเทศที่ออก passport (mandatory กรณี IdentificationCardType &#x3D; PASSPORT) </value>
        [DataMember(Name = "passportCountry", EmitDefaultValue = true)]
        public string PassportCountry { get; set; }

        /// <summary>
        /// Gets or Sets CardNumber
        /// </summary>
        [DataMember(Name = "cardNumber", EmitDefaultValue = false)]
        public IndividualInvestorV5ResponseCardNumber CardNumber { get; set; }

        /// <summary>
        /// Gets or Sets CardExpiryDate
        /// </summary>
        [DataMember(Name = "cardExpiryDate", EmitDefaultValue = false)]
        public IndividualInvestorV5ResponseCardExpiryDate CardExpiryDate { get; set; }

        /// <summary>
        /// คำนำหน้าชื่ออื่นๆ เช่น หม่อมหลวง คุณหญิง&lt;/br&gt;(mandatory กรณี Title &#x3D; OTHER)&lt;/br&gt;
        /// </summary>
        /// <value>คำนำหน้าชื่ออื่นๆ เช่น หม่อมหลวง คุณหญิง&lt;/br&gt;(mandatory กรณี Title &#x3D; OTHER)&lt;/br&gt;</value>
        [DataMember(Name = "titleOther", EmitDefaultValue = true)]
        public string TitleOther { get; set; }

        /// <summary>
        /// ชื่อ ภาษาอังกฤษ&lt;/br&gt;
        /// </summary>
        /// <value>ชื่อ ภาษาอังกฤษ&lt;/br&gt;</value>
        [DataMember(Name = "enFirstName", EmitDefaultValue = false)]
        public string EnFirstName { get; set; }

        /// <summary>
        /// นามสกุล ภาษาอังกฤษ&lt;/br&gt;
        /// </summary>
        /// <value>นามสกุล ภาษาอังกฤษ&lt;/br&gt;</value>
        [DataMember(Name = "enLastName", EmitDefaultValue = false)]
        public string EnLastName { get; set; }

        /// <summary>
        /// ชื่อ ภาษาไทย&lt;/br&gt;
        /// </summary>
        /// <value>ชื่อ ภาษาไทย&lt;/br&gt;</value>
        [DataMember(Name = "thFirstName", EmitDefaultValue = false)]
        public string ThFirstName { get; set; }

        /// <summary>
        /// นามสกุล ภาษาไทย&lt;/br&gt;
        /// </summary>
        /// <value>นามสกุล ภาษาไทย&lt;/br&gt;</value>
        [DataMember(Name = "thLastName", EmitDefaultValue = false)]
        public string ThLastName { get; set; }

        /// <summary>
        /// วันเกิด ค.ศ. (YYYYMMDD)&lt;/br&gt;
        /// </summary>
        /// <value>วันเกิด ค.ศ. (YYYYMMDD)&lt;/br&gt;</value>
        [DataMember(Name = "birthDate", EmitDefaultValue = false)]
        public string BirthDate { get; set; }

        /// <summary>
        /// รหัส สัญชาติ อ้างอิงตาม sheet Nationality&lt;/br&gt;
        /// </summary>
        /// <value>รหัส สัญชาติ อ้างอิงตาม sheet Nationality&lt;/br&gt;</value>
        [DataMember(Name = "nationality", EmitDefaultValue = false)]
        public string Nationality { get; set; }

        /// <summary>
        /// โทรศัพท์มือถือ เช่น 0819991234&lt;/br&gt;Validate: ตัวเลข 10 ตัว&lt;/br&gt;
        /// </summary>
        /// <value>โทรศัพท์มือถือ เช่น 0819991234&lt;/br&gt;Validate: ตัวเลข 10 ตัว&lt;/br&gt;</value>
        [DataMember(Name = "mobileNumber", EmitDefaultValue = false)]
        public string MobileNumber { get; set; }

        /// <summary>
        /// อีเมล เช่น xxx@set.or.th&lt;/br&gt;Validate: email pattern&lt;/br&gt;(mandatory กรณี mailingMethod &#x3D; Email)&lt;/br&gt;
        /// </summary>
        /// <value>อีเมล เช่น xxx@set.or.th&lt;/br&gt;Validate: email pattern&lt;/br&gt;(mandatory กรณี mailingMethod &#x3D; Email)&lt;/br&gt;</value>
        [DataMember(Name = "email", EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// โทรศัพท์พื้นฐาน&lt;/br&gt;
        /// </summary>
        /// <value>โทรศัพท์พื้นฐาน&lt;/br&gt;</value>
        [DataMember(Name = "phone", EmitDefaultValue = true)]
        public string Phone { get; set; }

        /// <summary>
        /// โทรสาร&lt;/br&gt;(mandatory กรณี mailingMethod &#x3D; Fax)&lt;/br&gt;
        /// </summary>
        /// <value>โทรสาร&lt;/br&gt;(mandatory กรณี mailingMethod &#x3D; Fax)&lt;/br&gt;</value>
        [DataMember(Name = "fax", EmitDefaultValue = true)]
        public string Fax { get; set; }

        /// <summary>
        /// Gets or Sets Spouse
        /// </summary>
        [DataMember(Name = "spouse", EmitDefaultValue = false)]
        public Spouse Spouse { get; set; }

        /// <summary>
        /// อาชีพอื่นๆ&lt;/br&gt;(mandatory กรณี occupationid&#x3D; 170)&lt;/br&gt;
        /// </summary>
        /// <value>อาชีพอื่นๆ&lt;/br&gt;(mandatory กรณี occupationid&#x3D; 170)&lt;/br&gt;</value>
        [DataMember(Name = "occupationOther", EmitDefaultValue = true)]
        public string OccupationOther { get; set; }

        /// <summary>
        /// ประเภทธุรกิจอื่นๆ&lt;/br&gt;(mandatory กรณี businessTypeId &#x3D; 180)&lt;/br&gt;
        /// </summary>
        /// <value>ประเภทธุรกิจอื่นๆ&lt;/br&gt;(mandatory กรณี businessTypeId &#x3D; 180)&lt;/br&gt;</value>
        [DataMember(Name = "businessTypeOther", EmitDefaultValue = true)]
        public string BusinessTypeOther { get; set; }

        /// <summary>
        /// Gets or Sets AssetValue
        /// </summary>
        [DataMember(Name = "assetValue", EmitDefaultValue = false)]
        public IndividualInvestorV5ResponseAssetValue AssetValue { get; set; }

        /// <summary>
        /// ที่มาของรายได้ (สามารถเลือกได้มากกว่า 1 ข้อ แยกโดย comma (,)&lt;/br&gt;SALARY&#x3D; เงินเดือน&lt;/br&gt;SAVINGS &#x3D; เงินออม&lt;/br&gt;RETIREMENT&#x3D;เงินเกษียณ&lt;/br&gt;HERITAGE &#x3D; มรดก&lt;/br&gt;INVESTMENT&#x3D; เงินลงทุน&lt;/br&gt;BUSINESS &#x3D; ประกอบธุรกิจ&lt;/br&gt;OTHER&#x3D;อื่นๆ&lt;/br&gt;
        /// </summary>
        /// <value>ที่มาของรายได้ (สามารถเลือกได้มากกว่า 1 ข้อ แยกโดย comma (,)&lt;/br&gt;SALARY&#x3D; เงินเดือน&lt;/br&gt;SAVINGS &#x3D; เงินออม&lt;/br&gt;RETIREMENT&#x3D;เงินเกษียณ&lt;/br&gt;HERITAGE &#x3D; มรดก&lt;/br&gt;INVESTMENT&#x3D; เงินลงทุน&lt;/br&gt;BUSINESS &#x3D; ประกอบธุรกิจ&lt;/br&gt;OTHER&#x3D;อื่นๆ&lt;/br&gt;</value>
        [DataMember(Name = "incomeSource", EmitDefaultValue = false)]
        public string IncomeSource { get; set; }

        /// <summary>
        /// ที่มาของรายได้อื่นๆ&lt;/br&gt;(mandatory กรณี incomeSource &#x3D; OTHER)&lt;/br&gt;
        /// </summary>
        /// <value>ที่มาของรายได้อื่นๆ&lt;/br&gt;(mandatory กรณี incomeSource &#x3D; OTHER)&lt;/br&gt;</value>
        [DataMember(Name = "incomeSourceOther", EmitDefaultValue = true)]
        public string IncomeSourceOther { get; set; }

        /// <summary>
        /// Gets or Sets IdentificationDocument
        /// </summary>
        [DataMember(Name = "identificationDocument", EmitDefaultValue = false)]
        public IndividualInvestorV5ResponseIdentificationDocument IdentificationDocument { get; set; }

        /// <summary>
        /// Gets or Sets Current
        /// </summary>
        [DataMember(Name = "current", EmitDefaultValue = false)]
        public IndividualInvestorV5ResponseCurrent Current { get; set; }

        /// <summary>
        /// ชื่อสถานที่ทำงาน&lt;/br&gt;(mandatory กรณี occupationId &#x3D;30,40,50,60,70,110,130,150,160,170)&lt;/br&gt;
        /// </summary>
        /// <value>ชื่อสถานที่ทำงาน&lt;/br&gt;(mandatory กรณี occupationId &#x3D;30,40,50,60,70,110,130,150,160,170)&lt;/br&gt;</value>
        [DataMember(Name = "companyName", EmitDefaultValue = true)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets Work
        /// </summary>
        [DataMember(Name = "work", EmitDefaultValue = false)]
        public IndividualInvestorV5ResponseWork Work { get; set; }

        /// <summary>
        /// ตำแหน่งงาน&lt;/br&gt;(mandatory กรณี occupationId &#x3D;30,40,50,60,70,110,130,150,160,170)&lt;/br&gt;
        /// </summary>
        /// <value>ตำแหน่งงาน&lt;/br&gt;(mandatory กรณี occupationId &#x3D;30,40,50,60,70,110,130,150,160,170)&lt;/br&gt;</value>
        [DataMember(Name = "workPosition", EmitDefaultValue = true)]
        public string WorkPosition { get; set; }

        /// <summary>
        /// ท่านเป็นผู้มีสถานภาพทางการเมืองหรือเป็นสมาชิกในครอบครัวหรือเป็นผู้ใกล้ชิดกับบุคคลผู้มีสถานภาพทางการเมืองหรือไม่&lt;/br&gt;true - มี&lt;/br&gt;false - ไม่มี&lt;/br&gt;
        /// </summary>
        /// <value>ท่านเป็นผู้มีสถานภาพทางการเมืองหรือเป็นสมาชิกในครอบครัวหรือเป็นผู้ใกล้ชิดกับบุคคลผู้มีสถานภาพทางการเมืองหรือไม่&lt;/br&gt;true - มี&lt;/br&gt;false - ไม่มี&lt;/br&gt;</value>
        [DataMember(Name = "relatedPoliticalPerson", EmitDefaultValue = true)]
        public bool? RelatedPoliticalPerson { get; set; }

        /// <summary>
        /// ตำแหน่งงานที่เกี่ยวกับข้องกับการเมือง&lt;/br&gt;(mandatory กรณี relatedPoliticalPerson  &#x3D; true)&lt;/br&gt;
        /// </summary>
        /// <value>ตำแหน่งงานที่เกี่ยวกับข้องกับการเมือง&lt;/br&gt;(mandatory กรณี relatedPoliticalPerson  &#x3D; true)&lt;/br&gt;</value>
        [DataMember(Name = "politicalRelatedPersonPosition", EmitDefaultValue = true)]
        public string PoliticalRelatedPersonPosition { get; set; }

        /// <summary>
        /// สามารถรับความเสี่ยงอัตราแลกเปลี่ยนได้หรือไม่&lt;/br&gt;true - ได้&lt;/br&gt;false - ไม่ได้&lt;/br&gt;
        /// </summary>
        /// <value>สามารถรับความเสี่ยงอัตราแลกเปลี่ยนได้หรือไม่&lt;/br&gt;true - ได้&lt;/br&gt;false - ไม่ได้&lt;/br&gt;</value>
        [DataMember(Name = "canAcceptFxRisk", EmitDefaultValue = true)]
        public bool CanAcceptFxRisk { get; set; }

        /// <summary>
        /// สามารถรับความเสี่ยงจากตราสารอนุพันธ์ได้หรือไม่&lt;/br&gt;true - ได้&lt;/br&gt;false - ไม่ได้&lt;/br&gt;
        /// </summary>
        /// <value>สามารถรับความเสี่ยงจากตราสารอนุพันธ์ได้หรือไม่&lt;/br&gt;true - ได้&lt;/br&gt;false - ไม่ได้&lt;/br&gt;</value>
        [DataMember(Name = "canAcceptDerivativeInvestment", EmitDefaultValue = true)]
        public bool CanAcceptDerivativeInvestment { get; set; }

        /// <summary>
        /// Gets or Sets SuitabilityRiskLevel
        /// </summary>
        [DataMember(Name = "suitabilityRiskLevel", EmitDefaultValue = false)]
        public IndividualInvestorV5ResponseSuitabilityRiskLevel SuitabilityRiskLevel { get; set; }

        /// <summary>
        /// วันที่ทำ suitability test เป็น ค.ศ. (YYYYMMDD)&lt;/br&gt;
        /// </summary>
        /// <value>วันที่ทำ suitability test เป็น ค.ศ. (YYYYMMDD)&lt;/br&gt;</value>
        [DataMember(Name = "suitabilityEvaluationDate", EmitDefaultValue = false)]
        public string SuitabilityEvaluationDate { get; set; }

        /// <summary>
        /// เป็นบุคคลสัญชาติ US ตาม FATCA หรือไม่&lt;/br&gt;true - ใช่&lt;/br&gt;false - ไม่ใช่&lt;/br&gt;
        /// </summary>
        /// <value>เป็นบุคคลสัญชาติ US ตาม FATCA หรือไม่&lt;/br&gt;true - ใช่&lt;/br&gt;false - ไม่ใช่&lt;/br&gt;</value>
        [DataMember(Name = "fatca", EmitDefaultValue = true)]
        public bool Fatca { get; set; }

        /// <summary>
        /// วันที่ให้ข้อมูล FATCA  เป็น ค.ศ. (YYYYMMDD)&lt;/br&gt;
        /// </summary>
        /// <value>วันที่ให้ข้อมูล FATCA  เป็น ค.ศ. (YYYYMMDD)&lt;/br&gt;</value>
        [DataMember(Name = "fatcaDeclarationDate", EmitDefaultValue = false)]
        public string FatcaDeclarationDate { get; set; }

        /// <summary>
        /// อ้างอิง Country ของ FundConnext ตาม Master Data
        /// </summary>
        /// <value>อ้างอิง Country ของ FundConnext ตาม Master Data</value>
        [DataMember(Name = "crsPlaceOfBirthCountry", EmitDefaultValue = true)]
        public string CrsPlaceOfBirthCountry { get; set; }

        /// <summary>
        /// เมืองเกิด ต้องเป็นภาษาอังกฤษเท่านั้น (ยกเว้น &lt;enter&gt;, |, \&quot;, {, }, [, ]) Regex: ^[A-Za-zÀ-ÿĀ-žЀ-ӿ0-9\\s!#$%&amp;&#39;()*+,-./:;&lt;&#x3D;&gt;?@^_&#x60;~ ]+$
        /// </summary>
        /// <value>เมืองเกิด ต้องเป็นภาษาอังกฤษเท่านั้น (ยกเว้น &lt;enter&gt;, |, \&quot;, {, }, [, ]) Regex: ^[A-Za-zÀ-ÿĀ-žЀ-ӿ0-9\\s!#$%&amp;&#39;()*+,-./:;&lt;&#x3D;&gt;?@^_&#x60;~ ]+$</value>
        [DataMember(Name = "crsPlaceOfBirthCity", EmitDefaultValue = true)]
        public string CrsPlaceOfBirthCity { get; set; }

        /// <summary>
        /// true ถ้าเป็นผู้มีถิ่นที่อยู่ทางภาษีในประเทศอื่นๆ นอกจากสหรัฐอเมริกา&lt;/br&gt; false ถ้าเป็นผู้มีถิ่นที่อยู่ทางภาษีในประเทศสหรัฐอเมริกาเท่านั้น
        /// </summary>
        /// <value>true ถ้าเป็นผู้มีถิ่นที่อยู่ทางภาษีในประเทศอื่นๆ นอกจากสหรัฐอเมริกา&lt;/br&gt; false ถ้าเป็นผู้มีถิ่นที่อยู่ทางภาษีในประเทศสหรัฐอเมริกาเท่านั้น</value>
        [DataMember(Name = "crsTaxResidenceInCountriesOtherThanTheUS", EmitDefaultValue = true)]
        public bool? CrsTaxResidenceInCountriesOtherThanTheUS { get; set; }

        /// <summary>
        /// Gets or Sets CrsDetails
        /// </summary>
        [DataMember(Name = "crsDetails", EmitDefaultValue = true)]
        public List<IndividualInvestorV5ResponseCrsDetailsInner> CrsDetails { get; set; }

        /// <summary>
        /// วันที่ให้ข้อมูล CRS  เป็น ค.ศ. (YYYYMMDD)
        /// </summary>
        /// <value>วันที่ให้ข้อมูล CRS  เป็น ค.ศ. (YYYYMMDD)</value>
        [DataMember(Name = "crsDeclarationDate", EmitDefaultValue = true)]
        public string CrsDeclarationDate { get; set; }

        /// <summary>
        /// CDD Score&lt;/br&gt;(1-3)&lt;/br&gt;
        /// </summary>
        /// <value>CDD Score&lt;/br&gt;(1-3)&lt;/br&gt;</value>
        [DataMember(Name = "cddScore", EmitDefaultValue = false)]
        public decimal CddScore { get; set; }

        /// <summary>
        /// วันที่ทำ CDD เป็น ค.ศ. (YYYYMMDD)&lt;/br&gt;
        /// </summary>
        /// <value>วันที่ทำ CDD เป็น ค.ศ. (YYYYMMDD)&lt;/br&gt;</value>
        [DataMember(Name = "cddDate", EmitDefaultValue = true)]
        public string CddDate { get; set; }

        /// <summary>
        /// ผู้แนะนำ&lt;/br&gt;
        /// </summary>
        /// <value>ผู้แนะนำ&lt;/br&gt;</value>
        [DataMember(Name = "referralPerson", EmitDefaultValue = true)]
        public string ReferralPerson { get; set; }

        /// <summary>
        /// วันที่เปิดบัญชี&lt;/br&gt;
        /// </summary>
        /// <value>วันที่เปิดบัญชี&lt;/br&gt;</value>
        [DataMember(Name = "applicationDate", EmitDefaultValue = false)]
        public string ApplicationDate { get; set; }

        /// <summary>
        /// รหัสประเทศ แหล่งที่มาของรายได้&lt;/br&gt;
        /// </summary>
        /// <value>รหัสประเทศ แหล่งที่มาของรายได้&lt;/br&gt;</value>
        [DataMember(Name = "incomeSourceCountry", EmitDefaultValue = false)]
        public string IncomeSourceCountry { get; set; }

        /// <summary>
        /// ผู้รับเปิดบัญชี&lt;/br&gt;
        /// </summary>
        /// <value>ผู้รับเปิดบัญชี&lt;/br&gt;</value>
        [DataMember(Name = "acceptedBy", EmitDefaultValue = true)]
        public string AcceptedBy { get; set; }

        /// <summary>
        /// เป็นลูกค้าเปราะบางหรือไม่&lt;/br&gt;true - เป็น&lt;/br&gt;false - ไม่เป็น&lt;/br&gt;
        /// </summary>
        /// <value>เป็นลูกค้าเปราะบางหรือไม่&lt;/br&gt;true - เป็น&lt;/br&gt;false - ไม่เป็น&lt;/br&gt;</value>
        [DataMember(Name = "vulnerableFlag", EmitDefaultValue = true)]
        public bool? VulnerableFlag { get; set; }

        /// <summary>
        /// รายละเอียดการเป็นลูกค้าเปราะบาง (สามารถเลือกได้มากกว่า 1 ข้อ แยกโดย comma (,)&lt;/br&gt;60YearsOld&lt;/br&gt;NoInvestmentKnowledge&lt;/br&gt;Disability&lt;/br&gt;(mandatory กรณี vulnerableFlag &#x3D; true)&lt;/br&gt;
        /// </summary>
        /// <value>รายละเอียดการเป็นลูกค้าเปราะบาง (สามารถเลือกได้มากกว่า 1 ข้อ แยกโดย comma (,)&lt;/br&gt;60YearsOld&lt;/br&gt;NoInvestmentKnowledge&lt;/br&gt;Disability&lt;/br&gt;(mandatory กรณี vulnerableFlag &#x3D; true)&lt;/br&gt;</value>
        [DataMember(Name = "vulnerableDetail", EmitDefaultValue = true)]
        public string VulnerableDetail { get; set; }

        /// <summary>
        /// เปิดบัญชีด้วย NDID หรือไม่&lt;/br&gt;true &#x3D; เปิดบัญชีด้วย NDID&lt;/br&gt;false &#x3D;เปิดบัญชีด้วยรูปแบบเดิม&lt;/br&gt;default &#x3D; false&lt;/br&gt;
        /// </summary>
        /// <value>เปิดบัญชีด้วย NDID หรือไม่&lt;/br&gt;true &#x3D; เปิดบัญชีด้วย NDID&lt;/br&gt;false &#x3D;เปิดบัญชีด้วยรูปแบบเดิม&lt;/br&gt;default &#x3D; false&lt;/br&gt;</value>
        [DataMember(Name = "ndidFlag", EmitDefaultValue = true)]
        public bool? NdidFlag { get; set; }

        /// <summary>
        /// รหัสอ้างอิงการยืนยันตัวตนเพื่อเปิดบัญชีจาก NDID&lt;/br&gt;(manatory กรณี ndidFlag &#x3D; true)&lt;/br&gt;
        /// </summary>
        /// <value>รหัสอ้างอิงการยืนยันตัวตนเพื่อเปิดบัญชีจาก NDID&lt;/br&gt;(manatory กรณี ndidFlag &#x3D; true)&lt;/br&gt;</value>
        [DataMember(Name = "ndidRequestId", EmitDefaultValue = true)]
        public string NdidRequestId { get; set; }

        /// <summary>
        /// Array ของ account (Please refer to AccountV5Response schema)
        /// </summary>
        /// <value>Array ของ account (Please refer to AccountV5Response schema)</value>
        [DataMember(Name = "accounts", EmitDefaultValue = false)]
        public List<AccountV5Response> Accounts { get; set; }

        /// <summary>
        /// วันที่ approve การเปิด/แก้ไข เป็น ค.ศ. (YYYYMMDD)
        /// </summary>
        /// <value>วันที่ approve การเปิด/แก้ไข เป็น ค.ศ. (YYYYMMDD)</value>
        [DataMember(Name = "approvedDate", EmitDefaultValue = false)]
        public string ApprovedDate { get; set; }

        /// <summary>
        /// วันเวลาที่ approve การเปิด/แก้ไข เป็น ค.ศ.+ชั่วโมงนาทีวินาที (YYYYMMDDHHmmss)
        /// </summary>
        /// <value>วันเวลาที่ approve การเปิด/แก้ไข เป็น ค.ศ.+ชั่วโมงนาทีวินาที (YYYYMMDDHHmmss)</value>
        [DataMember(Name = "approvedDateTime", EmitDefaultValue = false)]
        public string ApprovedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets SuitabilityForm
        /// </summary>
        [DataMember(Name = "suitabilityForm", EmitDefaultValue = false)]
        public IndividualInvestorV5ResponseSuitabilityForm SuitabilityForm { get; set; }

        /// <summary>
        /// ผลลัพธ์การประเมิณความรู้ความสามารถในการลงทุน&lt;/br&gt;true &#x3D; ยอมรับ&lt;/br&gt;false &#x3D; ไม่ยอมรับ
        /// </summary>
        /// <value>ผลลัพธ์การประเมิณความรู้ความสามารถในการลงทุน&lt;/br&gt;true &#x3D; ยอมรับ&lt;/br&gt;false &#x3D; ไม่ยอมรับ</value>
        [DataMember(Name = "knowledgeAssessmentResult", EmitDefaultValue = true)]
        public bool? KnowledgeAssessmentResult { get; set; }

        /// <summary>
        /// Gets or Sets KnowledgeAssessmentForm
        /// </summary>
        [DataMember(Name = "knowledgeAssessmentForm", EmitDefaultValue = false)]
        public IndividualInvestorV5ResponseKnowledgeAssessmentForm KnowledgeAssessmentForm { get; set; }

        /// <summary>
        /// format yyyyMMddHHmmss
        /// </summary>
        /// <value>format yyyyMMddHHmmss</value>
        [DataMember(Name = "identityVerificationDateTime", EmitDefaultValue = true)]
        public string IdentityVerificationDateTime { get; set; }

        /// <summary>
        /// format yyyyMMddHHmmss
        /// </summary>
        /// <value>format yyyyMMddHHmmss</value>
        [DataMember(Name = "dopaVerificationDateTime", EmitDefaultValue = true)]
        public string DopaVerificationDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IndividualInvestorV5Response {\n");
            sb.Append("  JuristicNumber: ").Append(JuristicNumber).Append("\n");
            sb.Append("  IdentificationCardType: ").Append(IdentificationCardType).Append("\n");
            sb.Append("  PassportCountry: ").Append(PassportCountry).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  CardExpiryDate: ").Append(CardExpiryDate).Append("\n");
            sb.Append("  AccompanyingDocument: ").Append(AccompanyingDocument).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  TitleOther: ").Append(TitleOther).Append("\n");
            sb.Append("  EnFirstName: ").Append(EnFirstName).Append("\n");
            sb.Append("  EnLastName: ").Append(EnLastName).Append("\n");
            sb.Append("  ThFirstName: ").Append(ThFirstName).Append("\n");
            sb.Append("  ThLastName: ").Append(ThLastName).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  Nationality: ").Append(Nationality).Append("\n");
            sb.Append("  MobileNumber: ").Append(MobileNumber).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  MaritalStatus: ").Append(MaritalStatus).Append("\n");
            sb.Append("  Spouse: ").Append(Spouse).Append("\n");
            sb.Append("  OccupationId: ").Append(OccupationId).Append("\n");
            sb.Append("  OccupationOther: ").Append(OccupationOther).Append("\n");
            sb.Append("  BusinessTypeId: ").Append(BusinessTypeId).Append("\n");
            sb.Append("  BusinessTypeOther: ").Append(BusinessTypeOther).Append("\n");
            sb.Append("  MonthlyIncomeLevel: ").Append(MonthlyIncomeLevel).Append("\n");
            sb.Append("  AssetValue: ").Append(AssetValue).Append("\n");
            sb.Append("  IncomeSource: ").Append(IncomeSource).Append("\n");
            sb.Append("  IncomeSourceOther: ").Append(IncomeSourceOther).Append("\n");
            sb.Append("  IdentificationDocument: ").Append(IdentificationDocument).Append("\n");
            sb.Append("  CurrentAddressSameAsFlag: ").Append(CurrentAddressSameAsFlag).Append("\n");
            sb.Append("  Current: ").Append(Current).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  Work: ").Append(Work).Append("\n");
            sb.Append("  WorkPosition: ").Append(WorkPosition).Append("\n");
            sb.Append("  RelatedPoliticalPerson: ").Append(RelatedPoliticalPerson).Append("\n");
            sb.Append("  PoliticalRelatedPersonPosition: ").Append(PoliticalRelatedPersonPosition).Append("\n");
            sb.Append("  CanAcceptFxRisk: ").Append(CanAcceptFxRisk).Append("\n");
            sb.Append("  CanAcceptDerivativeInvestment: ").Append(CanAcceptDerivativeInvestment).Append("\n");
            sb.Append("  SuitabilityRiskLevel: ").Append(SuitabilityRiskLevel).Append("\n");
            sb.Append("  SuitabilityEvaluationDate: ").Append(SuitabilityEvaluationDate).Append("\n");
            sb.Append("  Fatca: ").Append(Fatca).Append("\n");
            sb.Append("  FatcaDeclarationDate: ").Append(FatcaDeclarationDate).Append("\n");
            sb.Append("  CrsPlaceOfBirthCountry: ").Append(CrsPlaceOfBirthCountry).Append("\n");
            sb.Append("  CrsPlaceOfBirthCity: ").Append(CrsPlaceOfBirthCity).Append("\n");
            sb.Append("  CrsTaxResidenceInCountriesOtherThanTheUS: ").Append(CrsTaxResidenceInCountriesOtherThanTheUS).Append("\n");
            sb.Append("  CrsDetails: ").Append(CrsDetails).Append("\n");
            sb.Append("  CrsDeclarationDate: ").Append(CrsDeclarationDate).Append("\n");
            sb.Append("  CddScore: ").Append(CddScore).Append("\n");
            sb.Append("  CddDate: ").Append(CddDate).Append("\n");
            sb.Append("  ReferralPerson: ").Append(ReferralPerson).Append("\n");
            sb.Append("  ApplicationDate: ").Append(ApplicationDate).Append("\n");
            sb.Append("  IncomeSourceCountry: ").Append(IncomeSourceCountry).Append("\n");
            sb.Append("  AcceptedBy: ").Append(AcceptedBy).Append("\n");
            sb.Append("  OpenFundConnextFormFlag: ").Append(OpenFundConnextFormFlag).Append("\n");
            sb.Append("  VulnerableFlag: ").Append(VulnerableFlag).Append("\n");
            sb.Append("  VulnerableDetail: ").Append(VulnerableDetail).Append("\n");
            sb.Append("  NdidFlag: ").Append(NdidFlag).Append("\n");
            sb.Append("  NdidRequestId: ").Append(NdidRequestId).Append("\n");
            sb.Append("  OpenChannel: ").Append(OpenChannel).Append("\n");
            sb.Append("  InvestorType: ").Append(InvestorType).Append("\n");
            sb.Append("  Accounts: ").Append(Accounts).Append("\n");
            sb.Append("  ApprovedDate: ").Append(ApprovedDate).Append("\n");
            sb.Append("  ApprovedDateTime: ").Append(ApprovedDateTime).Append("\n");
            sb.Append("  SuitabilityForm: ").Append(SuitabilityForm).Append("\n");
            sb.Append("  InvestorClass: ").Append(InvestorClass).Append("\n");
            sb.Append("  KnowledgeAssessmentResult: ").Append(KnowledgeAssessmentResult).Append("\n");
            sb.Append("  KnowledgeAssessmentForm: ").Append(KnowledgeAssessmentForm).Append("\n");
            sb.Append("  IdentityVerificationDateTime: ").Append(IdentityVerificationDateTime).Append("\n");
            sb.Append("  DopaVerificationDateTime: ").Append(DopaVerificationDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PassportCountry (string) maxLength
            if (this.PassportCountry != null && this.PassportCountry.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PassportCountry, length must be less than 2.", new[] { "PassportCountry" });
            }

            // PassportCountry (string) minLength
            if (this.PassportCountry != null && this.PassportCountry.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PassportCountry, length must be greater than 2.", new[] { "PassportCountry" });
            }

            // TitleOther (string) maxLength
            if (this.TitleOther != null && this.TitleOther.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TitleOther, length must be less than 50.", new[] { "TitleOther" });
            }

            // EnFirstName (string) maxLength
            if (this.EnFirstName != null && this.EnFirstName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EnFirstName, length must be less than 100.", new[] { "EnFirstName" });
            }

            // EnFirstName (string) minLength
            if (this.EnFirstName != null && this.EnFirstName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EnFirstName, length must be greater than 1.", new[] { "EnFirstName" });
            }

            // EnLastName (string) maxLength
            if (this.EnLastName != null && this.EnLastName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EnLastName, length must be less than 100.", new[] { "EnLastName" });
            }

            // EnLastName (string) minLength
            if (this.EnLastName != null && this.EnLastName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EnLastName, length must be greater than 1.", new[] { "EnLastName" });
            }

            // ThFirstName (string) maxLength
            if (this.ThFirstName != null && this.ThFirstName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ThFirstName, length must be less than 100.", new[] { "ThFirstName" });
            }

            // ThFirstName (string) minLength
            if (this.ThFirstName != null && this.ThFirstName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ThFirstName, length must be greater than 1.", new[] { "ThFirstName" });
            }

            // ThLastName (string) maxLength
            if (this.ThLastName != null && this.ThLastName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ThLastName, length must be less than 100.", new[] { "ThLastName" });
            }

            // ThLastName (string) minLength
            if (this.ThLastName != null && this.ThLastName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ThLastName, length must be greater than 1.", new[] { "ThLastName" });
            }

            // BirthDate (string) maxLength
            if (this.BirthDate != null && this.BirthDate.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthDate, length must be less than 8.", new[] { "BirthDate" });
            }

            // BirthDate (string) minLength
            if (this.BirthDate != null && this.BirthDate.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthDate, length must be greater than 8.", new[] { "BirthDate" });
            }

            if (this.BirthDate != null)
            {
                // BirthDate (string) pattern
                Regex regexBirthDate = new Regex(@"^((19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))$", RegexOptions.CultureInvariant);
                if (!regexBirthDate.Match(this.BirthDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BirthDate, must match a pattern of " + regexBirthDate, new[] { "BirthDate" });
                }
            }

            // Nationality (string) maxLength
            if (this.Nationality != null && this.Nationality.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Nationality, length must be less than 2.", new[] { "Nationality" });
            }

            // Nationality (string) minLength
            if (this.Nationality != null && this.Nationality.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Nationality, length must be greater than 2.", new[] { "Nationality" });
            }

            // MobileNumber (string) maxLength
            if (this.MobileNumber != null && this.MobileNumber.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MobileNumber, length must be less than 10.", new[] { "MobileNumber" });
            }

            if (this.MobileNumber != null)
            {
                // MobileNumber (string) pattern
                Regex regexMobileNumber = new Regex(@"^\d{10}$", RegexOptions.CultureInvariant);
                if (!regexMobileNumber.Match(this.MobileNumber).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MobileNumber, must match a pattern of " + regexMobileNumber, new[] { "MobileNumber" });
                }
            }

            // Email (string) maxLength
            if (this.Email != null && this.Email.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 100.", new[] { "Email" });
            }

            if (this.Email != null)
            {
                // Email (string) pattern
                Regex regexEmail = new Regex(@"^[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$", RegexOptions.CultureInvariant);
                if (!regexEmail.Match(this.Email).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, must match a pattern of " + regexEmail, new[] { "Email" });
                }
            }

            // Phone (string) maxLength
            if (this.Phone != null && this.Phone.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone, length must be less than 20.", new[] { "Phone" });
            }

            // Fax (string) maxLength
            if (this.Fax != null && this.Fax.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Fax, length must be less than 20.", new[] { "Fax" });
            }

            // OccupationOther (string) maxLength
            if (this.OccupationOther != null && this.OccupationOther.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OccupationOther, length must be less than 100.", new[] { "OccupationOther" });
            }

            // BusinessTypeOther (string) maxLength
            if (this.BusinessTypeOther != null && this.BusinessTypeOther.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BusinessTypeOther, length must be less than 100.", new[] { "BusinessTypeOther" });
            }

            // IncomeSource (string) maxLength
            if (this.IncomeSource != null && this.IncomeSource.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IncomeSource, length must be less than 100.", new[] { "IncomeSource" });
            }

            if (this.IncomeSource != null)
            {
                // IncomeSource (string) pattern
                Regex regexIncomeSource = new Regex(@"^(SALARY|SAVINGS|RETIREMENT|HERITAGE|INVESTMENT|BUSINESS|OTHER){1}(,(SALARY|SAVINGS|RETIREMENT|HERITAGE|INVESTMENT|BUSINESS|OTHER))*$", RegexOptions.CultureInvariant);
                if (!regexIncomeSource.Match(this.IncomeSource).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IncomeSource, must match a pattern of " + regexIncomeSource, new[] { "IncomeSource" });
                }
            }

            // IncomeSourceOther (string) maxLength
            if (this.IncomeSourceOther != null && this.IncomeSourceOther.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IncomeSourceOther, length must be less than 100.", new[] { "IncomeSourceOther" });
            }

            // CompanyName (string) maxLength
            if (this.CompanyName != null && this.CompanyName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyName, length must be less than 100.", new[] { "CompanyName" });
            }

            // WorkPosition (string) maxLength
            if (this.WorkPosition != null && this.WorkPosition.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WorkPosition, length must be less than 50.", new[] { "WorkPosition" });
            }

            // PoliticalRelatedPersonPosition (string) maxLength
            if (this.PoliticalRelatedPersonPosition != null && this.PoliticalRelatedPersonPosition.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PoliticalRelatedPersonPosition, length must be less than 50.", new[] { "PoliticalRelatedPersonPosition" });
            }

            // SuitabilityEvaluationDate (string) maxLength
            if (this.SuitabilityEvaluationDate != null && this.SuitabilityEvaluationDate.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SuitabilityEvaluationDate, length must be less than 8.", new[] { "SuitabilityEvaluationDate" });
            }

            // SuitabilityEvaluationDate (string) minLength
            if (this.SuitabilityEvaluationDate != null && this.SuitabilityEvaluationDate.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SuitabilityEvaluationDate, length must be greater than 8.", new[] { "SuitabilityEvaluationDate" });
            }

            if (this.SuitabilityEvaluationDate != null)
            {
                // SuitabilityEvaluationDate (string) pattern
                Regex regexSuitabilityEvaluationDate = new Regex(@"^((19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))$", RegexOptions.CultureInvariant);
                if (!regexSuitabilityEvaluationDate.Match(this.SuitabilityEvaluationDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SuitabilityEvaluationDate, must match a pattern of " + regexSuitabilityEvaluationDate, new[] { "SuitabilityEvaluationDate" });
                }
            }

            // FatcaDeclarationDate (string) maxLength
            if (this.FatcaDeclarationDate != null && this.FatcaDeclarationDate.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FatcaDeclarationDate, length must be less than 8.", new[] { "FatcaDeclarationDate" });
            }

            // FatcaDeclarationDate (string) minLength
            if (this.FatcaDeclarationDate != null && this.FatcaDeclarationDate.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FatcaDeclarationDate, length must be greater than 8.", new[] { "FatcaDeclarationDate" });
            }

            if (this.FatcaDeclarationDate != null)
            {
                // FatcaDeclarationDate (string) pattern
                Regex regexFatcaDeclarationDate = new Regex(@"^((19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))$", RegexOptions.CultureInvariant);
                if (!regexFatcaDeclarationDate.Match(this.FatcaDeclarationDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FatcaDeclarationDate, must match a pattern of " + regexFatcaDeclarationDate, new[] { "FatcaDeclarationDate" });
                }
            }

            // CrsPlaceOfBirthCountry (string) maxLength
            if (this.CrsPlaceOfBirthCountry != null && this.CrsPlaceOfBirthCountry.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrsPlaceOfBirthCountry, length must be less than 2.", new[] { "CrsPlaceOfBirthCountry" });
            }

            // CrsPlaceOfBirthCountry (string) minLength
            if (this.CrsPlaceOfBirthCountry != null && this.CrsPlaceOfBirthCountry.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrsPlaceOfBirthCountry, length must be greater than 2.", new[] { "CrsPlaceOfBirthCountry" });
            }

            // CrsPlaceOfBirthCity (string) maxLength
            if (this.CrsPlaceOfBirthCity != null && this.CrsPlaceOfBirthCity.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrsPlaceOfBirthCity, length must be less than 50.", new[] { "CrsPlaceOfBirthCity" });
            }

            // CrsPlaceOfBirthCity (string) minLength
            if (this.CrsPlaceOfBirthCity != null && this.CrsPlaceOfBirthCity.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrsPlaceOfBirthCity, length must be greater than 1.", new[] { "CrsPlaceOfBirthCity" });
            }

            if (this.CrsPlaceOfBirthCity != null)
            {
                // CrsPlaceOfBirthCity (string) pattern
                Regex regexCrsPlaceOfBirthCity = new Regex(@"^[A-Za-zÀ-ÿĀ-žЀ-ӿ0-9\s!#$%&'()*+,-./:;<=>?@^_`~ ]+$", RegexOptions.CultureInvariant);
                if (!regexCrsPlaceOfBirthCity.Match(this.CrsPlaceOfBirthCity).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrsPlaceOfBirthCity, must match a pattern of " + regexCrsPlaceOfBirthCity, new[] { "CrsPlaceOfBirthCity" });
                }
            }

            // CrsDeclarationDate (string) maxLength
            if (this.CrsDeclarationDate != null && this.CrsDeclarationDate.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrsDeclarationDate, length must be less than 8.", new[] { "CrsDeclarationDate" });
            }

            // CrsDeclarationDate (string) minLength
            if (this.CrsDeclarationDate != null && this.CrsDeclarationDate.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrsDeclarationDate, length must be greater than 8.", new[] { "CrsDeclarationDate" });
            }

            if (this.CrsDeclarationDate != null)
            {
                // CrsDeclarationDate (string) pattern
                Regex regexCrsDeclarationDate = new Regex(@"^((19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))$", RegexOptions.CultureInvariant);
                if (!regexCrsDeclarationDate.Match(this.CrsDeclarationDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrsDeclarationDate, must match a pattern of " + regexCrsDeclarationDate, new[] { "CrsDeclarationDate" });
                }
            }

            // CddScore (decimal) maximum
            if (this.CddScore > (decimal)3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CddScore, must be a value less than or equal to 3.", new[] { "CddScore" });
            }

            // CddScore (decimal) minimum
            if (this.CddScore < (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CddScore, must be a value greater than or equal to 1.", new[] { "CddScore" });
            }

            // CddDate (string) maxLength
            if (this.CddDate != null && this.CddDate.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CddDate, length must be less than 8.", new[] { "CddDate" });
            }

            // CddDate (string) minLength
            if (this.CddDate != null && this.CddDate.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CddDate, length must be greater than 8.", new[] { "CddDate" });
            }

            if (this.CddDate != null)
            {
                // CddDate (string) pattern
                Regex regexCddDate = new Regex(@"^((19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))$", RegexOptions.CultureInvariant);
                if (!regexCddDate.Match(this.CddDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CddDate, must match a pattern of " + regexCddDate, new[] { "CddDate" });
                }
            }

            // ReferralPerson (string) maxLength
            if (this.ReferralPerson != null && this.ReferralPerson.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferralPerson, length must be less than 100.", new[] { "ReferralPerson" });
            }

            // ApplicationDate (string) maxLength
            if (this.ApplicationDate != null && this.ApplicationDate.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ApplicationDate, length must be less than 8.", new[] { "ApplicationDate" });
            }

            // ApplicationDate (string) minLength
            if (this.ApplicationDate != null && this.ApplicationDate.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ApplicationDate, length must be greater than 8.", new[] { "ApplicationDate" });
            }

            if (this.ApplicationDate != null)
            {
                // ApplicationDate (string) pattern
                Regex regexApplicationDate = new Regex(@"^((19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))$", RegexOptions.CultureInvariant);
                if (!regexApplicationDate.Match(this.ApplicationDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ApplicationDate, must match a pattern of " + regexApplicationDate, new[] { "ApplicationDate" });
                }
            }

            // IncomeSourceCountry (string) maxLength
            if (this.IncomeSourceCountry != null && this.IncomeSourceCountry.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IncomeSourceCountry, length must be less than 2.", new[] { "IncomeSourceCountry" });
            }

            // IncomeSourceCountry (string) minLength
            if (this.IncomeSourceCountry != null && this.IncomeSourceCountry.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IncomeSourceCountry, length must be greater than 2.", new[] { "IncomeSourceCountry" });
            }

            // AcceptedBy (string) maxLength
            if (this.AcceptedBy != null && this.AcceptedBy.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AcceptedBy, length must be less than 100.", new[] { "AcceptedBy" });
            }

            // VulnerableDetail (string) maxLength
            if (this.VulnerableDetail != null && this.VulnerableDetail.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VulnerableDetail, length must be less than 100.", new[] { "VulnerableDetail" });
            }

            if (this.VulnerableDetail != null)
            {
                // VulnerableDetail (string) pattern
                Regex regexVulnerableDetail = new Regex(@"^(60YearsOld|NoInvestmentKnowledge|Disability){1}(,(60YearsOld|NoInvestmentKnowledge|Disability))*$", RegexOptions.CultureInvariant);
                if (!regexVulnerableDetail.Match(this.VulnerableDetail).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VulnerableDetail, must match a pattern of " + regexVulnerableDetail, new[] { "VulnerableDetail" });
                }
            }

            // NdidRequestId (string) maxLength
            if (this.NdidRequestId != null && this.NdidRequestId.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NdidRequestId, length must be less than 64.", new[] { "NdidRequestId" });
            }

            yield break;
        }
    }

}
