/*
 * FundConnext
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Pi.Financial.Client.FundConnext.Client.FileParameter;
using OpenAPIDateConverter = Pi.Financial.Client.FundConnext.Client.OpenAPIDateConverter;

namespace Pi.Financial.Client.FundConnext.Model
{
    /// <summary>
    /// ApiOffshoreSwitchingsPostRequest
    /// </summary>
    [DataContract(Name = "_api_offshore_switchings_post_request")]
    public partial class ApiOffshoreSwitchingsPostRequest : IValidatableObject
    {
        /// <summary>
        /// [Y] - accept to invest in fund that has higher risk than risk profile.&lt;/br&gt;[N] - no override
        /// </summary>
        /// <value>[Y] - accept to invest in fund that has higher risk than risk profile.&lt;/br&gt;[N] - no override</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OverrideRiskProfileEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }


        /// <summary>
        /// [Y] - accept to invest in fund that has higher risk than risk profile.&lt;/br&gt;[N] - no override
        /// </summary>
        /// <value>[Y] - accept to invest in fund that has higher risk than risk profile.&lt;/br&gt;[N] - no override</value>
        [DataMember(Name = "overrideRiskProfile", IsRequired = true, EmitDefaultValue = true)]
        public OverrideRiskProfileEnum OverrideRiskProfile { get; set; }
        /// <summary>
        /// [MOB] &#x3D; Order from mobile device&lt;/br&gt;[ONL] &#x3D; Internet exclude mobile&lt;/br&gt;[MKT] &#x3D; Marketing/Counter
        /// </summary>
        /// <value>[MOB] &#x3D; Order from mobile device&lt;/br&gt;[ONL] &#x3D; Internet exclude mobile&lt;/br&gt;[MKT] &#x3D; Marketing/Counter</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChannelEnum
        {
            /// <summary>
            /// Enum MOB for value: MOB
            /// </summary>
            [EnumMember(Value = "MOB")]
            MOB = 1,

            /// <summary>
            /// Enum ONL for value: ONL
            /// </summary>
            [EnumMember(Value = "ONL")]
            ONL = 2,

            /// <summary>
            /// Enum MKT for value: MKT
            /// </summary>
            [EnumMember(Value = "MKT")]
            MKT = 3
        }


        /// <summary>
        /// [MOB] &#x3D; Order from mobile device&lt;/br&gt;[ONL] &#x3D; Internet exclude mobile&lt;/br&gt;[MKT] &#x3D; Marketing/Counter
        /// </summary>
        /// <value>[MOB] &#x3D; Order from mobile device&lt;/br&gt;[ONL] &#x3D; Internet exclude mobile&lt;/br&gt;[MKT] &#x3D; Marketing/Counter</value>
        [DataMember(Name = "channel", IsRequired = true, EmitDefaultValue = true)]
        public ChannelEnum Channel { get; set; }
        /// <summary>
        /// [APPROVED] &#x3D; create approved order
        /// </summary>
        /// <value>[APPROVED] &#x3D; create approved order</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum APPROVED for value: APPROVED
            /// </summary>
            [EnumMember(Value = "APPROVED")]
            APPROVED = 1,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 2
        }


        /// <summary>
        /// [APPROVED] &#x3D; create approved order
        /// </summary>
        /// <value>[APPROVED] &#x3D; create approved order</value>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiOffshoreSwitchingsPostRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApiOffshoreSwitchingsPostRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiOffshoreSwitchingsPostRequest" /> class.
        /// </summary>
        /// <param name="saOrderReferenceNo">Reference order from SA system (required).</param>
        /// <param name="transactionDateTime">Transaction Time from SA system&lt;/br&gt;System Format: YYYYMMDDHHMMSS (required).</param>
        /// <param name="saCode">saCode (required).</param>
        /// <param name="accountId">accountId (required).</param>
        /// <param name="overrideRiskProfile">[Y] - accept to invest in fund that has higher risk than risk profile.&lt;/br&gt;[N] - no override (required).</param>
        /// <param name="platform">Offshore platform i.e. CBL (required).</param>
        /// <param name="isin">ISIN of the fund (required).</param>
        /// <param name="currency">Example: USD (required).</param>
        /// <param name="unit">Example: 1000.123456 (required).</param>
        /// <param name="counterIsin">Switch in: ISIN of the fund (required).</param>
        /// <param name="counterCurrency">Example: USD&lt;/br&gt;Must be the same as “currency” (required).</param>
        /// <param name="effectiveDate">Format: YYYYMMDD (required).</param>
        /// <param name="channel">[MOB] &#x3D; Order from mobile device&lt;/br&gt;[ONL] &#x3D; Internet exclude mobile&lt;/br&gt;[MKT] &#x3D; Marketing/Counter (required).</param>
        /// <param name="icLicense">Existing IC License (required).</param>
        /// <param name="branchNo">SA Branch Code.</param>
        /// <param name="status">[APPROVED] &#x3D; create approved order.</param>
        /// <param name="frontendFee">Frontend fee charge customer by SA. This fee will deduct from amount. Defaulted fee will be applied if not filled.</param>
        public ApiOffshoreSwitchingsPostRequest(string saOrderReferenceNo = default(string), string transactionDateTime = default(string), string saCode = default(string), string accountId = default(string), OverrideRiskProfileEnum overrideRiskProfile = default(OverrideRiskProfileEnum), string platform = default(string), string isin = default(string), string currency = default(string), decimal unit = default(decimal), string counterIsin = default(string), string counterCurrency = default(string), string effectiveDate = default(string), ChannelEnum channel = default(ChannelEnum), string icLicense = default(string), string branchNo = default(string), StatusEnum? status = default(StatusEnum?), decimal? frontendFee = default(decimal?))
        {
            // to ensure "saOrderReferenceNo" is required (not null)
            if (saOrderReferenceNo == null)
            {
                throw new ArgumentNullException("saOrderReferenceNo is a required property for ApiOffshoreSwitchingsPostRequest and cannot be null");
            }
            this.SaOrderReferenceNo = saOrderReferenceNo;
            // to ensure "transactionDateTime" is required (not null)
            if (transactionDateTime == null)
            {
                throw new ArgumentNullException("transactionDateTime is a required property for ApiOffshoreSwitchingsPostRequest and cannot be null");
            }
            this.TransactionDateTime = transactionDateTime;
            // to ensure "saCode" is required (not null)
            if (saCode == null)
            {
                throw new ArgumentNullException("saCode is a required property for ApiOffshoreSwitchingsPostRequest and cannot be null");
            }
            this.SaCode = saCode;
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId is a required property for ApiOffshoreSwitchingsPostRequest and cannot be null");
            }
            this.AccountId = accountId;
            this.OverrideRiskProfile = overrideRiskProfile;
            // to ensure "platform" is required (not null)
            if (platform == null)
            {
                throw new ArgumentNullException("platform is a required property for ApiOffshoreSwitchingsPostRequest and cannot be null");
            }
            this.Platform = platform;
            // to ensure "isin" is required (not null)
            if (isin == null)
            {
                throw new ArgumentNullException("isin is a required property for ApiOffshoreSwitchingsPostRequest and cannot be null");
            }
            this.Isin = isin;
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for ApiOffshoreSwitchingsPostRequest and cannot be null");
            }
            this.Currency = currency;
            this.Unit = unit;
            // to ensure "counterIsin" is required (not null)
            if (counterIsin == null)
            {
                throw new ArgumentNullException("counterIsin is a required property for ApiOffshoreSwitchingsPostRequest and cannot be null");
            }
            this.CounterIsin = counterIsin;
            // to ensure "counterCurrency" is required (not null)
            if (counterCurrency == null)
            {
                throw new ArgumentNullException("counterCurrency is a required property for ApiOffshoreSwitchingsPostRequest and cannot be null");
            }
            this.CounterCurrency = counterCurrency;
            // to ensure "effectiveDate" is required (not null)
            if (effectiveDate == null)
            {
                throw new ArgumentNullException("effectiveDate is a required property for ApiOffshoreSwitchingsPostRequest and cannot be null");
            }
            this.EffectiveDate = effectiveDate;
            this.Channel = channel;
            // to ensure "icLicense" is required (not null)
            if (icLicense == null)
            {
                throw new ArgumentNullException("icLicense is a required property for ApiOffshoreSwitchingsPostRequest and cannot be null");
            }
            this.IcLicense = icLicense;
            this.BranchNo = branchNo;
            this.Status = status;
            this.FrontendFee = frontendFee;
        }

        /// <summary>
        /// Reference order from SA system
        /// </summary>
        /// <value>Reference order from SA system</value>
        [DataMember(Name = "saOrderReferenceNo", IsRequired = true, EmitDefaultValue = true)]
        public string SaOrderReferenceNo { get; set; }

        /// <summary>
        /// Transaction Time from SA system&lt;/br&gt;System Format: YYYYMMDDHHMMSS
        /// </summary>
        /// <value>Transaction Time from SA system&lt;/br&gt;System Format: YYYYMMDDHHMMSS</value>
        [DataMember(Name = "transactionDateTime", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionDateTime { get; set; }

        /// <summary>
        /// Gets or Sets SaCode
        /// </summary>
        [DataMember(Name = "saCode", IsRequired = true, EmitDefaultValue = true)]
        public string SaCode { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "accountId", IsRequired = true, EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// Offshore platform i.e. CBL
        /// </summary>
        /// <value>Offshore platform i.e. CBL</value>
        [DataMember(Name = "platform", IsRequired = true, EmitDefaultValue = true)]
        public string Platform { get; set; }

        /// <summary>
        /// ISIN of the fund
        /// </summary>
        /// <value>ISIN of the fund</value>
        [DataMember(Name = "isin", IsRequired = true, EmitDefaultValue = true)]
        public string Isin { get; set; }

        /// <summary>
        /// Example: USD
        /// </summary>
        /// <value>Example: USD</value>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Example: 1000.123456
        /// </summary>
        /// <value>Example: 1000.123456</value>
        [DataMember(Name = "unit", IsRequired = true, EmitDefaultValue = true)]
        public decimal Unit { get; set; }

        /// <summary>
        /// Switch in: ISIN of the fund
        /// </summary>
        /// <value>Switch in: ISIN of the fund</value>
        [DataMember(Name = "counterIsin", IsRequired = true, EmitDefaultValue = true)]
        public string CounterIsin { get; set; }

        /// <summary>
        /// Example: USD&lt;/br&gt;Must be the same as “currency”
        /// </summary>
        /// <value>Example: USD&lt;/br&gt;Must be the same as “currency”</value>
        [DataMember(Name = "counterCurrency", IsRequired = true, EmitDefaultValue = true)]
        public string CounterCurrency { get; set; }

        /// <summary>
        /// Format: YYYYMMDD
        /// </summary>
        /// <value>Format: YYYYMMDD</value>
        [DataMember(Name = "effectiveDate", IsRequired = true, EmitDefaultValue = true)]
        public string EffectiveDate { get; set; }

        /// <summary>
        /// Existing IC License
        /// </summary>
        /// <value>Existing IC License</value>
        [DataMember(Name = "icLicense", IsRequired = true, EmitDefaultValue = true)]
        public string IcLicense { get; set; }

        /// <summary>
        /// SA Branch Code
        /// </summary>
        /// <value>SA Branch Code</value>
        [DataMember(Name = "branchNo", EmitDefaultValue = true)]
        public string BranchNo { get; set; }

        /// <summary>
        /// Frontend fee charge customer by SA. This fee will deduct from amount. Defaulted fee will be applied if not filled
        /// </summary>
        /// <value>Frontend fee charge customer by SA. This fee will deduct from amount. Defaulted fee will be applied if not filled</value>
        [DataMember(Name = "frontendFee", EmitDefaultValue = true)]
        public decimal? FrontendFee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiOffshoreSwitchingsPostRequest {\n");
            sb.Append("  SaOrderReferenceNo: ").Append(SaOrderReferenceNo).Append("\n");
            sb.Append("  TransactionDateTime: ").Append(TransactionDateTime).Append("\n");
            sb.Append("  SaCode: ").Append(SaCode).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  OverrideRiskProfile: ").Append(OverrideRiskProfile).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  Isin: ").Append(Isin).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  CounterIsin: ").Append(CounterIsin).Append("\n");
            sb.Append("  CounterCurrency: ").Append(CounterCurrency).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  IcLicense: ").Append(IcLicense).Append("\n");
            sb.Append("  BranchNo: ").Append(BranchNo).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  FrontendFee: ").Append(FrontendFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SaOrderReferenceNo (string) maxLength
            if (this.SaOrderReferenceNo != null && this.SaOrderReferenceNo.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SaOrderReferenceNo, length must be less than 30.", new[] { "SaOrderReferenceNo" });
            }

            // TransactionDateTime (string) maxLength
            if (this.TransactionDateTime != null && this.TransactionDateTime.Length > 14)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionDateTime, length must be less than 14.", new[] { "TransactionDateTime" });
            }

            // TransactionDateTime (string) minLength
            if (this.TransactionDateTime != null && this.TransactionDateTime.Length < 14)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionDateTime, length must be greater than 14.", new[] { "TransactionDateTime" });
            }

            if (this.TransactionDateTime != null)
            {
                // TransactionDateTime (string) pattern
                Regex regexTransactionDateTime = new Regex(@"^((19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])(0[0-9]|1[0-9]|2[0-3])(0[0-9]|[12345]\d)(0[0-9]|[12345]\d))$", RegexOptions.CultureInvariant);
                if (!regexTransactionDateTime.Match(this.TransactionDateTime).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionDateTime, must match a pattern of " + regexTransactionDateTime, new[] { "TransactionDateTime" });
                }
            }

            // SaCode (string) maxLength
            if (this.SaCode != null && this.SaCode.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SaCode, length must be less than 15.", new[] { "SaCode" });
            }

            // AccountId (string) maxLength
            if (this.AccountId != null && this.AccountId.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be less than 15.", new[] { "AccountId" });
            }

            // Platform (string) maxLength
            if (this.Platform != null && this.Platform.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Platform, length must be less than 20.", new[] { "Platform" });
            }

            // Isin (string) maxLength
            if (this.Isin != null && this.Isin.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Isin, length must be less than 20.", new[] { "Isin" });
            }

            // Currency (string) maxLength
            if (this.Currency != null && this.Currency.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, length must be less than 3.", new[] { "Currency" });
            }

            // Unit (decimal) maximum
            if (this.Unit > (decimal)100000000000000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Unit, must be a value less than or equal to 100000000000000.", new[] { "Unit" });
            }

            // CounterIsin (string) maxLength
            if (this.CounterIsin != null && this.CounterIsin.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CounterIsin, length must be less than 20.", new[] { "CounterIsin" });
            }

            // CounterCurrency (string) maxLength
            if (this.CounterCurrency != null && this.CounterCurrency.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CounterCurrency, length must be less than 3.", new[] { "CounterCurrency" });
            }

            // EffectiveDate (string) maxLength
            if (this.EffectiveDate != null && this.EffectiveDate.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EffectiveDate, length must be less than 8.", new[] { "EffectiveDate" });
            }

            // EffectiveDate (string) minLength
            if (this.EffectiveDate != null && this.EffectiveDate.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EffectiveDate, length must be greater than 8.", new[] { "EffectiveDate" });
            }

            if (this.EffectiveDate != null)
            {
                // EffectiveDate (string) pattern
                Regex regexEffectiveDate = new Regex(@"^((19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))$", RegexOptions.CultureInvariant);
                if (!regexEffectiveDate.Match(this.EffectiveDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EffectiveDate, must match a pattern of " + regexEffectiveDate, new[] { "EffectiveDate" });
                }
            }

            // IcLicense (string) maxLength
            if (this.IcLicense != null && this.IcLicense.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IcLicense, length must be less than 50.", new[] { "IcLicense" });
            }

            // BranchNo (string) maxLength
            if (this.BranchNo != null && this.BranchNo.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BranchNo, length must be less than 5.", new[] { "BranchNo" });
            }

            // FrontendFee (decimal?) maximum
            if (this.FrontendFee > (decimal?)100000000000000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FrontendFee, must be a value less than or equal to 100000000000000.", new[] { "FrontendFee" });
            }

            yield break;
        }
    }

}
