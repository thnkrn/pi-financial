/*
 * FundConnext
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Pi.Financial.Client.FundConnext.Client.FileParameter;
using OpenAPIDateConverter = Pi.Financial.Client.FundConnext.Client.OpenAPIDateConverter;

namespace Pi.Financial.Client.FundConnext.Model
{
    /// <summary>
    /// ApiSubscriptionsRecurringFailOrderGet200Response
    /// </summary>
    [DataContract(Name = "_api_subscriptions_recurring_failOrder_get_200_response")]
    public partial class ApiSubscriptionsRecurringFailOrderGet200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiSubscriptionsRecurringFailOrderGet200Response" /> class.
        /// </summary>
        /// <param name="effectiveDate">Failed order’s effective date.</param>
        /// <param name="recurringOrderId">Recurring Transaction ID in FundConnex.</param>
        /// <param name="accountId">Account No.</param>
        /// <param name="unitholderId">Unitholder id.</param>
        /// <param name="unitholderType">AMC’s unitholder Type&lt;br&gt;[SEG] segregate&lt;br&gt;[OMN] omnibus.</param>
        /// <param name="orderType">Example SUB.</param>
        /// <param name="fundCode">Fund code.</param>
        /// <param name="amount">Amount 1234.45.</param>
        /// <param name="reason">Fail reason such as: Bank mapping not found.&lt;br&gt;Maximum LTF subscription is 500,000 baht.&lt;br&gt;Bank account not found &lt;br&gt;Nearest effective date is after effective date to Effective date not found.&lt;br&gt;Account is inactive autoRedeemFundCode is invalid.&lt;br&gt;Invalid Risk Profile.&lt;br&gt;Not found FinNet Customer No.&lt;br&gt;Passed Today&#39;s Payment Cutoff Time. Please change the date.&lt;br&gt;CDD score is expired, Please contact your investment consultant for update.&lt;br&gt;Passed Today&#39;s Cut-off Time. Please change the date..</param>
        public ApiSubscriptionsRecurringFailOrderGet200Response(string effectiveDate = default(string), string recurringOrderId = default(string), string accountId = default(string), string unitholderId = default(string), string unitholderType = default(string), string orderType = default(string), string fundCode = default(string), decimal amount = default(decimal), decimal reason = default(decimal))
        {
            this.EffectiveDate = effectiveDate;
            this.RecurringOrderId = recurringOrderId;
            this.AccountId = accountId;
            this.UnitholderId = unitholderId;
            this.UnitholderType = unitholderType;
            this.OrderType = orderType;
            this.FundCode = fundCode;
            this.Amount = amount;
            this.Reason = reason;
        }

        /// <summary>
        /// Failed order’s effective date
        /// </summary>
        /// <value>Failed order’s effective date</value>
        [DataMember(Name = "effectiveDate", EmitDefaultValue = false)]
        public string EffectiveDate { get; set; }

        /// <summary>
        /// Recurring Transaction ID in FundConnex
        /// </summary>
        /// <value>Recurring Transaction ID in FundConnex</value>
        [DataMember(Name = "recurringOrderId", EmitDefaultValue = false)]
        public string RecurringOrderId { get; set; }

        /// <summary>
        /// Account No
        /// </summary>
        /// <value>Account No</value>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Unitholder id
        /// </summary>
        /// <value>Unitholder id</value>
        [DataMember(Name = "unitholderId", EmitDefaultValue = false)]
        public string UnitholderId { get; set; }

        /// <summary>
        /// AMC’s unitholder Type&lt;br&gt;[SEG] segregate&lt;br&gt;[OMN] omnibus
        /// </summary>
        /// <value>AMC’s unitholder Type&lt;br&gt;[SEG] segregate&lt;br&gt;[OMN] omnibus</value>
        [DataMember(Name = "unitholderType", EmitDefaultValue = false)]
        public string UnitholderType { get; set; }

        /// <summary>
        /// Example SUB
        /// </summary>
        /// <value>Example SUB</value>
        [DataMember(Name = "orderType", EmitDefaultValue = false)]
        public string OrderType { get; set; }

        /// <summary>
        /// Fund code
        /// </summary>
        /// <value>Fund code</value>
        [DataMember(Name = "fundCode", EmitDefaultValue = false)]
        public string FundCode { get; set; }

        /// <summary>
        /// Amount 1234.45
        /// </summary>
        /// <value>Amount 1234.45</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Fail reason such as: Bank mapping not found.&lt;br&gt;Maximum LTF subscription is 500,000 baht.&lt;br&gt;Bank account not found &lt;br&gt;Nearest effective date is after effective date to Effective date not found.&lt;br&gt;Account is inactive autoRedeemFundCode is invalid.&lt;br&gt;Invalid Risk Profile.&lt;br&gt;Not found FinNet Customer No.&lt;br&gt;Passed Today&#39;s Payment Cutoff Time. Please change the date.&lt;br&gt;CDD score is expired, Please contact your investment consultant for update.&lt;br&gt;Passed Today&#39;s Cut-off Time. Please change the date.
        /// </summary>
        /// <value>Fail reason such as: Bank mapping not found.&lt;br&gt;Maximum LTF subscription is 500,000 baht.&lt;br&gt;Bank account not found &lt;br&gt;Nearest effective date is after effective date to Effective date not found.&lt;br&gt;Account is inactive autoRedeemFundCode is invalid.&lt;br&gt;Invalid Risk Profile.&lt;br&gt;Not found FinNet Customer No.&lt;br&gt;Passed Today&#39;s Payment Cutoff Time. Please change the date.&lt;br&gt;CDD score is expired, Please contact your investment consultant for update.&lt;br&gt;Passed Today&#39;s Cut-off Time. Please change the date.</value>
        [DataMember(Name = "reason", EmitDefaultValue = false)]
        public decimal Reason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiSubscriptionsRecurringFailOrderGet200Response {\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  RecurringOrderId: ").Append(RecurringOrderId).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  UnitholderId: ").Append(UnitholderId).Append("\n");
            sb.Append("  UnitholderType: ").Append(UnitholderType).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  FundCode: ").Append(FundCode).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
