/*
 * FundConnext
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Pi.Financial.Client.FundConnext.Client.FileParameter;
using OpenAPIDateConverter = Pi.Financial.Client.FundConnext.Client.OpenAPIDateConverter;

namespace Pi.Financial.Client.FundConnext.Model
{
    /// <summary>
    /// CustomerAccountCreateRequest
    /// </summary>
    [DataContract(Name = "CustomerAccountCreateRequest")]
    public partial class CustomerAccountCreateRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerAccountCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomerAccountCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerAccountCreateRequest" /> class.
        /// </summary>
        /// <param name="identificationCardType">identificationCardType (required).</param>
        /// <param name="cardNumber">cardNumber (required).</param>
        /// <param name="passportCountry">passportCountry.</param>
        /// <param name="accountId">accountId (required).</param>
        /// <param name="icLicense">icLicense (required).</param>
        /// <param name="accountOpenDate">accountOpenDate (required).</param>
        /// <param name="mailingAddressSameAsFlag">mailingAddressSameAsFlag.</param>
        /// <param name="mailing">mailing.</param>
        /// <param name="mailingMethod">mailingMethod (required).</param>
        /// <param name="investmentObjective">investmentObjective (required).</param>
        /// <param name="investmentObjectiveOther">investmentObjectiveOther.</param>
        /// <param name="redemptionBankAccounts">redemptionBankAccounts (required).</param>
        /// <param name="subscriptionBankAccounts">subscriptionBankAccounts.</param>
        /// <param name="approved">approved (required).</param>
        /// <param name="openOmnibusFormFlag">openOmnibusFormFlag.</param>
        public CustomerAccountCreateRequest(string identificationCardType = default(string), string cardNumber = default(string), string passportCountry = default(string), string accountId = default(string), string icLicense = default(string), string accountOpenDate = default(string), string mailingAddressSameAsFlag = default(string), Address mailing = default(Address), string mailingMethod = default(string), string investmentObjective = default(string), string investmentObjectiveOther = default(string), List<BankAccount> redemptionBankAccounts = default(List<BankAccount>), List<BankAccount> subscriptionBankAccounts = default(List<BankAccount>), bool approved = default(bool), bool openOmnibusFormFlag = default(bool))
        {
            // to ensure "identificationCardType" is required (not null)
            if (identificationCardType == null)
            {
                throw new ArgumentNullException("identificationCardType is a required property for CustomerAccountCreateRequest and cannot be null");
            }
            this.IdentificationCardType = identificationCardType;
            // to ensure "cardNumber" is required (not null)
            if (cardNumber == null)
            {
                throw new ArgumentNullException("cardNumber is a required property for CustomerAccountCreateRequest and cannot be null");
            }
            this.CardNumber = cardNumber;
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId is a required property for CustomerAccountCreateRequest and cannot be null");
            }
            this.AccountId = accountId;
            // to ensure "icLicense" is required (not null)
            if (icLicense == null)
            {
                throw new ArgumentNullException("icLicense is a required property for CustomerAccountCreateRequest and cannot be null");
            }
            this.IcLicense = icLicense;
            // to ensure "accountOpenDate" is required (not null)
            if (accountOpenDate == null)
            {
                throw new ArgumentNullException("accountOpenDate is a required property for CustomerAccountCreateRequest and cannot be null");
            }
            this.AccountOpenDate = accountOpenDate;
            // to ensure "mailingMethod" is required (not null)
            if (mailingMethod == null)
            {
                throw new ArgumentNullException("mailingMethod is a required property for CustomerAccountCreateRequest and cannot be null");
            }
            this.MailingMethod = mailingMethod;
            // to ensure "investmentObjective" is required (not null)
            if (investmentObjective == null)
            {
                throw new ArgumentNullException("investmentObjective is a required property for CustomerAccountCreateRequest and cannot be null");
            }
            this.InvestmentObjective = investmentObjective;
            // to ensure "redemptionBankAccounts" is required (not null)
            if (redemptionBankAccounts == null)
            {
                throw new ArgumentNullException("redemptionBankAccounts is a required property for CustomerAccountCreateRequest and cannot be null");
            }
            this.RedemptionBankAccounts = redemptionBankAccounts;
            this.Approved = approved;
            this.PassportCountry = passportCountry;
            this.MailingAddressSameAsFlag = mailingAddressSameAsFlag;
            this.Mailing = mailing;
            this.InvestmentObjectiveOther = investmentObjectiveOther;
            this.SubscriptionBankAccounts = subscriptionBankAccounts;
            this.OpenOmnibusFormFlag = openOmnibusFormFlag;
        }

        /// <summary>
        /// Gets or Sets IdentificationCardType
        /// </summary>
        [DataMember(Name = "identificationCardType", IsRequired = true, EmitDefaultValue = true)]
        public string IdentificationCardType { get; set; }

        /// <summary>
        /// Gets or Sets CardNumber
        /// </summary>
        [DataMember(Name = "cardNumber", IsRequired = true, EmitDefaultValue = true)]
        public string CardNumber { get; set; }

        /// <summary>
        /// Gets or Sets PassportCountry
        /// </summary>
        [DataMember(Name = "passportCountry", EmitDefaultValue = false)]
        public string PassportCountry { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "accountId", IsRequired = true, EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets IcLicense
        /// </summary>
        [DataMember(Name = "icLicense", IsRequired = true, EmitDefaultValue = true)]
        public string IcLicense { get; set; }

        /// <summary>
        /// Gets or Sets AccountOpenDate
        /// </summary>
        [DataMember(Name = "accountOpenDate", IsRequired = true, EmitDefaultValue = true)]
        public string AccountOpenDate { get; set; }

        /// <summary>
        /// Gets or Sets MailingAddressSameAsFlag
        /// </summary>
        [DataMember(Name = "mailingAddressSameAsFlag", EmitDefaultValue = false)]
        public string MailingAddressSameAsFlag { get; set; }

        /// <summary>
        /// Gets or Sets Mailing
        /// </summary>
        [DataMember(Name = "mailing", EmitDefaultValue = false)]
        public Address Mailing { get; set; }

        /// <summary>
        /// Gets or Sets MailingMethod
        /// </summary>
        [DataMember(Name = "mailingMethod", IsRequired = true, EmitDefaultValue = true)]
        public string MailingMethod { get; set; }

        /// <summary>
        /// Gets or Sets InvestmentObjective
        /// </summary>
        [DataMember(Name = "investmentObjective", IsRequired = true, EmitDefaultValue = true)]
        public string InvestmentObjective { get; set; }

        /// <summary>
        /// Gets or Sets InvestmentObjectiveOther
        /// </summary>
        [DataMember(Name = "investmentObjectiveOther", EmitDefaultValue = false)]
        public string InvestmentObjectiveOther { get; set; }

        /// <summary>
        /// Gets or Sets RedemptionBankAccounts
        /// </summary>
        [DataMember(Name = "redemptionBankAccounts", IsRequired = true, EmitDefaultValue = true)]
        public List<BankAccount> RedemptionBankAccounts { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionBankAccounts
        /// </summary>
        [DataMember(Name = "subscriptionBankAccounts", EmitDefaultValue = false)]
        public List<BankAccount> SubscriptionBankAccounts { get; set; }

        /// <summary>
        /// Gets or Sets Approved
        /// </summary>
        [DataMember(Name = "approved", IsRequired = true, EmitDefaultValue = true)]
        public bool Approved { get; set; }

        /// <summary>
        /// Gets or Sets OpenOmnibusFormFlag
        /// </summary>
        [DataMember(Name = "openOmnibusFormFlag", EmitDefaultValue = true)]
        public bool OpenOmnibusFormFlag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerAccountCreateRequest {\n");
            sb.Append("  IdentificationCardType: ").Append(IdentificationCardType).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  PassportCountry: ").Append(PassportCountry).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  IcLicense: ").Append(IcLicense).Append("\n");
            sb.Append("  AccountOpenDate: ").Append(AccountOpenDate).Append("\n");
            sb.Append("  MailingAddressSameAsFlag: ").Append(MailingAddressSameAsFlag).Append("\n");
            sb.Append("  Mailing: ").Append(Mailing).Append("\n");
            sb.Append("  MailingMethod: ").Append(MailingMethod).Append("\n");
            sb.Append("  InvestmentObjective: ").Append(InvestmentObjective).Append("\n");
            sb.Append("  InvestmentObjectiveOther: ").Append(InvestmentObjectiveOther).Append("\n");
            sb.Append("  RedemptionBankAccounts: ").Append(RedemptionBankAccounts).Append("\n");
            sb.Append("  SubscriptionBankAccounts: ").Append(SubscriptionBankAccounts).Append("\n");
            sb.Append("  Approved: ").Append(Approved).Append("\n");
            sb.Append("  OpenOmnibusFormFlag: ").Append(OpenOmnibusFormFlag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
