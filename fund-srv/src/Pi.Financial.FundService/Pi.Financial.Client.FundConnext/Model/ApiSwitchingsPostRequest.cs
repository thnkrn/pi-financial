/*
 * FundConnext
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Pi.Financial.Client.FundConnext.Client.FileParameter;
using OpenAPIDateConverter = Pi.Financial.Client.FundConnext.Client.OpenAPIDateConverter;

namespace Pi.Financial.Client.FundConnext.Model
{
    /// <summary>
    /// ApiSwitchingsPostRequest
    /// </summary>
    [DataContract(Name = "_api_switchings_post_request")]
    public partial class ApiSwitchingsPostRequest : IValidatableObject
    {
        /// <summary>
        /// [Y] - accept to invest in fund that has higher risk than risk profile.&lt;/br&gt;[N] - no override
        /// </summary>
        /// <value>[Y] - accept to invest in fund that has higher risk than risk profile.&lt;/br&gt;[N] - no override</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OverrideRiskProfileEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }


        /// <summary>
        /// [Y] - accept to invest in fund that has higher risk than risk profile.&lt;/br&gt;[N] - no override
        /// </summary>
        /// <value>[Y] - accept to invest in fund that has higher risk than risk profile.&lt;/br&gt;[N] - no override</value>
        [DataMember(Name = "overrideRiskProfile", IsRequired = true, EmitDefaultValue = true)]
        public OverrideRiskProfileEnum OverrideRiskProfile { get; set; }
        /// <summary>
        /// [Y] - accepts to invest in fund that has FX risk.&lt;/br&gt;[N] - no override
        /// </summary>
        /// <value>[Y] - accepts to invest in fund that has FX risk.&lt;/br&gt;[N] - no override</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OverrideFxRiskEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }


        /// <summary>
        /// [Y] - accepts to invest in fund that has FX risk.&lt;/br&gt;[N] - no override
        /// </summary>
        /// <value>[Y] - accepts to invest in fund that has FX risk.&lt;/br&gt;[N] - no override</value>
        [DataMember(Name = "overrideFxRisk", IsRequired = true, EmitDefaultValue = true)]
        public OverrideFxRiskEnum OverrideFxRisk { get; set; }
        /// <summary>
        /// [MOB] &#x3D; Order from mobile device&lt;/br&gt;[ONL] &#x3D; Internet exclude mobile&lt;/br&gt;[MKT] &#x3D; Marketing/Counter
        /// </summary>
        /// <value>[MOB] &#x3D; Order from mobile device&lt;/br&gt;[ONL] &#x3D; Internet exclude mobile&lt;/br&gt;[MKT] &#x3D; Marketing/Counter</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChannelEnum
        {
            /// <summary>
            /// Enum MOB for value: MOB
            /// </summary>
            [EnumMember(Value = "MOB")]
            MOB = 1,

            /// <summary>
            /// Enum ONL for value: ONL
            /// </summary>
            [EnumMember(Value = "ONL")]
            ONL = 2,

            /// <summary>
            /// Enum MKT for value: MKT
            /// </summary>
            [EnumMember(Value = "MKT")]
            MKT = 3
        }


        /// <summary>
        /// [MOB] &#x3D; Order from mobile device&lt;/br&gt;[ONL] &#x3D; Internet exclude mobile&lt;/br&gt;[MKT] &#x3D; Marketing/Counter
        /// </summary>
        /// <value>[MOB] &#x3D; Order from mobile device&lt;/br&gt;[ONL] &#x3D; Internet exclude mobile&lt;/br&gt;[MKT] &#x3D; Marketing/Counter</value>
        [DataMember(Name = "channel", IsRequired = true, EmitDefaultValue = true)]
        public ChannelEnum Channel { get; set; }
        /// <summary>
        /// [APPROVED] &#x3D; create approved order
        /// </summary>
        /// <value>[APPROVED] &#x3D; create approved order</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum APPROVED for value: APPROVED
            /// </summary>
            [EnumMember(Value = "APPROVED")]
            APPROVED = 1,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 2
        }


        /// <summary>
        /// [APPROVED] &#x3D; create approved order
        /// </summary>
        /// <value>[APPROVED] &#x3D; create approved order</value>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// [Y] &#x3D; Force to skip cut-off time validation&lt;/br&gt;[N] &#x3D; Normal order
        /// </summary>
        /// <value>[Y] &#x3D; Force to skip cut-off time validation&lt;/br&gt;[N] &#x3D; Normal order</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ForceEntryEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }


        /// <summary>
        /// [Y] &#x3D; Force to skip cut-off time validation&lt;/br&gt;[N] &#x3D; Normal order
        /// </summary>
        /// <value>[Y] &#x3D; Force to skip cut-off time validation&lt;/br&gt;[N] &#x3D; Normal order</value>
        [DataMember(Name = "forceEntry", IsRequired = true, EmitDefaultValue = true)]
        public ForceEntryEnum ForceEntry { get; set; }
        /// <summary>
        /// Y &#x3D; Sell all unit N &#x3D; Not sell all unit
        /// </summary>
        /// <value>Y &#x3D; Sell all unit N &#x3D; Not sell all unit</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SellAllUnitFlagEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }


        /// <summary>
        /// Y &#x3D; Sell all unit N &#x3D; Not sell all unit
        /// </summary>
        /// <value>Y &#x3D; Sell all unit N &#x3D; Not sell all unit</value>
        [DataMember(Name = "sellAllUnitFlag", EmitDefaultValue = false)]
        public SellAllUnitFlagEnum? SellAllUnitFlag { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiSwitchingsPostRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApiSwitchingsPostRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiSwitchingsPostRequest" /> class.
        /// </summary>
        /// <param name="saOrderReferenceNo">Reference order from SA system (required).</param>
        /// <param name="transactionDateTime">Transaction Time from SA system&lt;/br&gt;System Format: YYYYMMDDHHMMSS (required).</param>
        /// <param name="saCode">saCode (required).</param>
        /// <param name="accountId">accountId (required).</param>
        /// <param name="unitholderId">AMCâ€™s unitholder ID&lt;/br&gt;[SEG]when create new segregate unitholder ID&lt;/br&gt;[OMN]when create new omnibus unitholder ID&lt;/br&gt;[NEW_SEG]when create new segregate unitholder ID for each transaction&lt;/br&gt;[NEW_OMN]when create new omnibus unitholder ID for each transaction (required).</param>
        /// <param name="fundCode">fundCode (required).</param>
        /// <param name="counterFundCode">counterFundCode (required).</param>
        /// <param name="overrideRiskProfile">[Y] - accept to invest in fund that has higher risk than risk profile.&lt;/br&gt;[N] - no override (required).</param>
        /// <param name="overrideFxRisk">[Y] - accepts to invest in fund that has FX risk.&lt;/br&gt;[N] - no override (required).</param>
        /// <param name="amount">Require when redemption type is AMT.</param>
        /// <param name="unit">Require when redemption type is UNIT.</param>
        /// <param name="effectiveDate">Format: YYYYMMDD (required).</param>
        /// <param name="channel">[MOB] &#x3D; Order from mobile device&lt;/br&gt;[ONL] &#x3D; Internet exclude mobile&lt;/br&gt;[MKT] &#x3D; Marketing/Counter (required).</param>
        /// <param name="autoRedeemFundCode">Only term fund&lt;/br&gt;Fill fund code that subscription when auto redeem term fund.&lt;/br&gt;Mandatory if specified in fund rule..</param>
        /// <param name="icLicense">Existing IC License (required).</param>
        /// <param name="redemptionType">Only orderType &#x3D; &#39;RED&#39; and &#39;SWO&#39; AMT &#x3D; by amount UNIT &#x3D; by unit (required).</param>
        /// <param name="status">[APPROVED] &#x3D; create approved order.</param>
        /// <param name="forceEntry">[Y] &#x3D; Force to skip cut-off time validation&lt;/br&gt;[N] &#x3D; Normal order (required).</param>
        /// <param name="sellAllUnitFlag">Y &#x3D; Sell all unit N &#x3D; Not sell all unit.</param>
        /// <param name="branchNo">SA Branch Code.</param>
        public ApiSwitchingsPostRequest(string saOrderReferenceNo = default(string), string transactionDateTime = default(string), string saCode = default(string), string accountId = default(string), string unitholderId = default(string), string fundCode = default(string), string counterFundCode = default(string), OverrideRiskProfileEnum overrideRiskProfile = default(OverrideRiskProfileEnum), OverrideFxRiskEnum overrideFxRisk = default(OverrideFxRiskEnum), decimal amount = default(decimal), decimal unit = default(decimal), string effectiveDate = default(string), ChannelEnum channel = default(ChannelEnum), string autoRedeemFundCode = default(string), string icLicense = default(string), string redemptionType = default(string), StatusEnum? status = default(StatusEnum?), ForceEntryEnum forceEntry = default(ForceEntryEnum), SellAllUnitFlagEnum? sellAllUnitFlag = default(SellAllUnitFlagEnum?), string branchNo = default(string))
        {
            // to ensure "saOrderReferenceNo" is required (not null)
            if (saOrderReferenceNo == null)
            {
                throw new ArgumentNullException("saOrderReferenceNo is a required property for ApiSwitchingsPostRequest and cannot be null");
            }
            this.SaOrderReferenceNo = saOrderReferenceNo;
            // to ensure "transactionDateTime" is required (not null)
            if (transactionDateTime == null)
            {
                throw new ArgumentNullException("transactionDateTime is a required property for ApiSwitchingsPostRequest and cannot be null");
            }
            this.TransactionDateTime = transactionDateTime;
            // to ensure "saCode" is required (not null)
            if (saCode == null)
            {
                throw new ArgumentNullException("saCode is a required property for ApiSwitchingsPostRequest and cannot be null");
            }
            this.SaCode = saCode;
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId is a required property for ApiSwitchingsPostRequest and cannot be null");
            }
            this.AccountId = accountId;
            // to ensure "unitholderId" is required (not null)
            if (unitholderId == null)
            {
                throw new ArgumentNullException("unitholderId is a required property for ApiSwitchingsPostRequest and cannot be null");
            }
            this.UnitholderId = unitholderId;
            // to ensure "fundCode" is required (not null)
            if (fundCode == null)
            {
                throw new ArgumentNullException("fundCode is a required property for ApiSwitchingsPostRequest and cannot be null");
            }
            this.FundCode = fundCode;
            // to ensure "counterFundCode" is required (not null)
            if (counterFundCode == null)
            {
                throw new ArgumentNullException("counterFundCode is a required property for ApiSwitchingsPostRequest and cannot be null");
            }
            this.CounterFundCode = counterFundCode;
            this.OverrideRiskProfile = overrideRiskProfile;
            this.OverrideFxRisk = overrideFxRisk;
            // to ensure "effectiveDate" is required (not null)
            if (effectiveDate == null)
            {
                throw new ArgumentNullException("effectiveDate is a required property for ApiSwitchingsPostRequest and cannot be null");
            }
            this.EffectiveDate = effectiveDate;
            this.Channel = channel;
            // to ensure "icLicense" is required (not null)
            if (icLicense == null)
            {
                throw new ArgumentNullException("icLicense is a required property for ApiSwitchingsPostRequest and cannot be null");
            }
            this.IcLicense = icLicense;
            // to ensure "redemptionType" is required (not null)
            if (redemptionType == null)
            {
                throw new ArgumentNullException("redemptionType is a required property for ApiSwitchingsPostRequest and cannot be null");
            }
            this.RedemptionType = redemptionType;
            this.ForceEntry = forceEntry;
            this.Amount = amount;
            this.Unit = unit;
            this.AutoRedeemFundCode = autoRedeemFundCode;
            this.Status = status;
            this.SellAllUnitFlag = sellAllUnitFlag;
            this.BranchNo = branchNo;
        }

        /// <summary>
        /// Reference order from SA system
        /// </summary>
        /// <value>Reference order from SA system</value>
        [DataMember(Name = "saOrderReferenceNo", IsRequired = true, EmitDefaultValue = true)]
        public string SaOrderReferenceNo { get; set; }

        /// <summary>
        /// Transaction Time from SA system&lt;/br&gt;System Format: YYYYMMDDHHMMSS
        /// </summary>
        /// <value>Transaction Time from SA system&lt;/br&gt;System Format: YYYYMMDDHHMMSS</value>
        [DataMember(Name = "transactionDateTime", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionDateTime { get; set; }

        /// <summary>
        /// Gets or Sets SaCode
        /// </summary>
        [DataMember(Name = "saCode", IsRequired = true, EmitDefaultValue = true)]
        public string SaCode { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "accountId", IsRequired = true, EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// AMCâ€™s unitholder ID&lt;/br&gt;[SEG]when create new segregate unitholder ID&lt;/br&gt;[OMN]when create new omnibus unitholder ID&lt;/br&gt;[NEW_SEG]when create new segregate unitholder ID for each transaction&lt;/br&gt;[NEW_OMN]when create new omnibus unitholder ID for each transaction
        /// </summary>
        /// <value>AMCâ€™s unitholder ID&lt;/br&gt;[SEG]when create new segregate unitholder ID&lt;/br&gt;[OMN]when create new omnibus unitholder ID&lt;/br&gt;[NEW_SEG]when create new segregate unitholder ID for each transaction&lt;/br&gt;[NEW_OMN]when create new omnibus unitholder ID for each transaction</value>
        [DataMember(Name = "unitholderId", IsRequired = true, EmitDefaultValue = true)]
        public string UnitholderId { get; set; }

        /// <summary>
        /// Gets or Sets FundCode
        /// </summary>
        [DataMember(Name = "fundCode", IsRequired = true, EmitDefaultValue = true)]
        public string FundCode { get; set; }

        /// <summary>
        /// Gets or Sets CounterFundCode
        /// </summary>
        [DataMember(Name = "counterFundCode", IsRequired = true, EmitDefaultValue = true)]
        public string CounterFundCode { get; set; }

        /// <summary>
        /// Require when redemption type is AMT
        /// </summary>
        /// <value>Require when redemption type is AMT</value>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Require when redemption type is UNIT
        /// </summary>
        /// <value>Require when redemption type is UNIT</value>
        [DataMember(Name = "unit", EmitDefaultValue = false)]
        public decimal Unit { get; set; }

        /// <summary>
        /// Format: YYYYMMDD
        /// </summary>
        /// <value>Format: YYYYMMDD</value>
        [DataMember(Name = "effectiveDate", IsRequired = true, EmitDefaultValue = true)]
        public string EffectiveDate { get; set; }

        /// <summary>
        /// Only term fund&lt;/br&gt;Fill fund code that subscription when auto redeem term fund.&lt;/br&gt;Mandatory if specified in fund rule.
        /// </summary>
        /// <value>Only term fund&lt;/br&gt;Fill fund code that subscription when auto redeem term fund.&lt;/br&gt;Mandatory if specified in fund rule.</value>
        [DataMember(Name = "autoRedeemFundCode", EmitDefaultValue = true)]
        public string AutoRedeemFundCode { get; set; }

        /// <summary>
        /// Existing IC License
        /// </summary>
        /// <value>Existing IC License</value>
        [DataMember(Name = "icLicense", IsRequired = true, EmitDefaultValue = true)]
        public string IcLicense { get; set; }

        /// <summary>
        /// Only orderType &#x3D; &#39;RED&#39; and &#39;SWO&#39; AMT &#x3D; by amount UNIT &#x3D; by unit
        /// </summary>
        /// <value>Only orderType &#x3D; &#39;RED&#39; and &#39;SWO&#39; AMT &#x3D; by amount UNIT &#x3D; by unit</value>
        [DataMember(Name = "redemptionType", IsRequired = true, EmitDefaultValue = true)]
        public string RedemptionType { get; set; }

        /// <summary>
        /// SA Branch Code
        /// </summary>
        /// <value>SA Branch Code</value>
        [DataMember(Name = "branchNo", EmitDefaultValue = true)]
        public string BranchNo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiSwitchingsPostRequest {\n");
            sb.Append("  SaOrderReferenceNo: ").Append(SaOrderReferenceNo).Append("\n");
            sb.Append("  TransactionDateTime: ").Append(TransactionDateTime).Append("\n");
            sb.Append("  SaCode: ").Append(SaCode).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  UnitholderId: ").Append(UnitholderId).Append("\n");
            sb.Append("  FundCode: ").Append(FundCode).Append("\n");
            sb.Append("  CounterFundCode: ").Append(CounterFundCode).Append("\n");
            sb.Append("  OverrideRiskProfile: ").Append(OverrideRiskProfile).Append("\n");
            sb.Append("  OverrideFxRisk: ").Append(OverrideFxRisk).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  AutoRedeemFundCode: ").Append(AutoRedeemFundCode).Append("\n");
            sb.Append("  IcLicense: ").Append(IcLicense).Append("\n");
            sb.Append("  RedemptionType: ").Append(RedemptionType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ForceEntry: ").Append(ForceEntry).Append("\n");
            sb.Append("  SellAllUnitFlag: ").Append(SellAllUnitFlag).Append("\n");
            sb.Append("  BranchNo: ").Append(BranchNo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SaOrderReferenceNo (string) maxLength
            if (this.SaOrderReferenceNo != null && this.SaOrderReferenceNo.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SaOrderReferenceNo, length must be less than 30.", new[] { "SaOrderReferenceNo" });
            }

            // TransactionDateTime (string) maxLength
            if (this.TransactionDateTime != null && this.TransactionDateTime.Length > 14)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionDateTime, length must be less than 14.", new[] { "TransactionDateTime" });
            }

            // TransactionDateTime (string) minLength
            if (this.TransactionDateTime != null && this.TransactionDateTime.Length < 14)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionDateTime, length must be greater than 14.", new[] { "TransactionDateTime" });
            }

            if (this.TransactionDateTime != null)
            {
                // TransactionDateTime (string) pattern
                Regex regexTransactionDateTime = new Regex(@"^((19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])(0[0-9]|1[0-9]|2[0-3])(0[0-9]|[12345]\d)(0[0-9]|[12345]\d))$", RegexOptions.CultureInvariant);
                if (!regexTransactionDateTime.Match(this.TransactionDateTime).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionDateTime, must match a pattern of " + regexTransactionDateTime, new[] { "TransactionDateTime" });
                }
            }

            // SaCode (string) maxLength
            if (this.SaCode != null && this.SaCode.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SaCode, length must be less than 15.", new[] { "SaCode" });
            }

            // AccountId (string) maxLength
            if (this.AccountId != null && this.AccountId.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be less than 15.", new[] { "AccountId" });
            }

            // UnitholderId (string) maxLength
            if (this.UnitholderId != null && this.UnitholderId.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitholderId, length must be less than 15.", new[] { "UnitholderId" });
            }

            // FundCode (string) maxLength
            if (this.FundCode != null && this.FundCode.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FundCode, length must be less than 30.", new[] { "FundCode" });
            }

            // CounterFundCode (string) maxLength
            if (this.CounterFundCode != null && this.CounterFundCode.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CounterFundCode, length must be less than 30.", new[] { "CounterFundCode" });
            }

            // Amount (decimal) maximum
            if (this.Amount > (decimal)100000000000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, must be a value less than or equal to 100000000000.", new[] { "Amount" });
            }

            // Amount (decimal) minimum
            if (this.Amount < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, must be a value greater than or equal to 0.", new[] { "Amount" });
            }

            // Unit (decimal) maximum
            if (this.Unit > (decimal)1000000000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Unit, must be a value less than or equal to 1000000000.", new[] { "Unit" });
            }

            // Unit (decimal) minimum
            if (this.Unit < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Unit, must be a value greater than or equal to 0.", new[] { "Unit" });
            }

            // EffectiveDate (string) maxLength
            if (this.EffectiveDate != null && this.EffectiveDate.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EffectiveDate, length must be less than 8.", new[] { "EffectiveDate" });
            }

            // EffectiveDate (string) minLength
            if (this.EffectiveDate != null && this.EffectiveDate.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EffectiveDate, length must be greater than 8.", new[] { "EffectiveDate" });
            }

            if (this.EffectiveDate != null)
            {
                // EffectiveDate (string) pattern
                Regex regexEffectiveDate = new Regex(@"^((19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))$", RegexOptions.CultureInvariant);
                if (!regexEffectiveDate.Match(this.EffectiveDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EffectiveDate, must match a pattern of " + regexEffectiveDate, new[] { "EffectiveDate" });
                }
            }

            // AutoRedeemFundCode (string) maxLength
            if (this.AutoRedeemFundCode != null && this.AutoRedeemFundCode.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AutoRedeemFundCode, length must be less than 30.", new[] { "AutoRedeemFundCode" });
            }

            // IcLicense (string) maxLength
            if (this.IcLicense != null && this.IcLicense.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IcLicense, length must be less than 10.", new[] { "IcLicense" });
            }

            // RedemptionType (string) maxLength
            if (this.RedemptionType != null && this.RedemptionType.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RedemptionType, length must be less than 4.", new[] { "RedemptionType" });
            }

            // BranchNo (string) maxLength
            if (this.BranchNo != null && this.BranchNo.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BranchNo, length must be less than 5.", new[] { "BranchNo" });
            }

            yield break;
        }
    }

}
