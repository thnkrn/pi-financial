/*
 * FundConnext
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Pi.Financial.Client.FundConnext.Client.FileParameter;
using OpenAPIDateConverter = Pi.Financial.Client.FundConnext.Client.OpenAPIDateConverter;

namespace Pi.Financial.Client.FundConnext.Model
{
    /// <summary>
    /// AccountResponse
    /// </summary>
    [DataContract(Name = "AccountResponse")]
    public partial class AccountResponse : IValidatableObject
    {
        /// <summary>
        /// *เฉพาะกรณีเป็นบุคคลธรรมดา&lt;br/&gt;ประเภทบัตรที่เปิดบัญชี PASSPORT CITIZEN_CARD&#x3D;บัตรประชาชน 
        /// </summary>
        /// <value>*เฉพาะกรณีเป็นบุคคลธรรมดา&lt;br/&gt;ประเภทบัตรที่เปิดบัญชี PASSPORT CITIZEN_CARD&#x3D;บัตรประชาชน </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IdentificationCardTypeEnum
        {
            /// <summary>
            /// Enum PASSPORT for value: PASSPORT
            /// </summary>
            [EnumMember(Value = "PASSPORT")]
            PASSPORT = 1,

            /// <summary>
            /// Enum CITIZENCARD for value: CITIZEN_CARD
            /// </summary>
            [EnumMember(Value = "CITIZEN_CARD")]
            CITIZENCARD = 2
        }


        /// <summary>
        /// *เฉพาะกรณีเป็นบุคคลธรรมดา&lt;br/&gt;ประเภทบัตรที่เปิดบัญชี PASSPORT CITIZEN_CARD&#x3D;บัตรประชาชน 
        /// </summary>
        /// <value>*เฉพาะกรณีเป็นบุคคลธรรมดา&lt;br/&gt;ประเภทบัตรที่เปิดบัญชี PASSPORT CITIZEN_CARD&#x3D;บัตรประชาชน </value>
        [DataMember(Name = "identificationCardType", EmitDefaultValue = false)]
        public IdentificationCardTypeEnum? IdentificationCardType { get; set; }
        /// <summary>
        /// สถานะบัญชี&lt;br/&gt;ACTIVE &#x3D; ใช้งาน&lt;br/&gt;SUSPENDED &#x3D; ระงับการใช้งาน &lt;br/&gt;CLOSED &#x3D; ปิดบัญชี\&quot;
        /// </summary>
        /// <value>สถานะบัญชี&lt;br/&gt;ACTIVE &#x3D; ใช้งาน&lt;br/&gt;SUSPENDED &#x3D; ระงับการใช้งาน &lt;br/&gt;CLOSED &#x3D; ปิดบัญชี\&quot;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccountStatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,

            /// <summary>
            /// Enum SUSPENDED for value: SUSPENDED
            /// </summary>
            [EnumMember(Value = "SUSPENDED")]
            SUSPENDED = 2,

            /// <summary>
            /// Enum CLOSED for value: CLOSED
            /// </summary>
            [EnumMember(Value = "CLOSED")]
            CLOSED = 3
        }


        /// <summary>
        /// สถานะบัญชี&lt;br/&gt;ACTIVE &#x3D; ใช้งาน&lt;br/&gt;SUSPENDED &#x3D; ระงับการใช้งาน &lt;br/&gt;CLOSED &#x3D; ปิดบัญชี\&quot;
        /// </summary>
        /// <value>สถานะบัญชี&lt;br/&gt;ACTIVE &#x3D; ใช้งาน&lt;br/&gt;SUSPENDED &#x3D; ระงับการใช้งาน &lt;br/&gt;CLOSED &#x3D; ปิดบัญชี\&quot;</value>
        [DataMember(Name = "accountStatus", EmitDefaultValue = false)]
        public AccountStatusEnum? AccountStatus { get; set; }
        /// <summary>
        /// สถานะพร้อมใช้งาน&lt;br/&gt;ACTIVE &#x3D; พร้อมใช้งาน &lt;br/&gt;INACTIVE &#x3D; รออนุมัติ
        /// </summary>
        /// <value>สถานะพร้อมใช้งาน&lt;br/&gt;ACTIVE &#x3D; พร้อมใช้งาน &lt;br/&gt;INACTIVE &#x3D; รออนุมัติ</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProcessStatusEnum
        {
            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,

            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 2
        }


        /// <summary>
        /// สถานะพร้อมใช้งาน&lt;br/&gt;ACTIVE &#x3D; พร้อมใช้งาน &lt;br/&gt;INACTIVE &#x3D; รออนุมัติ
        /// </summary>
        /// <value>สถานะพร้อมใช้งาน&lt;br/&gt;ACTIVE &#x3D; พร้อมใช้งาน &lt;br/&gt;INACTIVE &#x3D; รออนุมัติ</value>
        [DataMember(Name = "processStatus", EmitDefaultValue = false)]
        public ProcessStatusEnum? ProcessStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountResponse" /> class.
        /// </summary>
        /// <param name="identificationCardType">*เฉพาะกรณีเป็นบุคคลธรรมดา&lt;br/&gt;ประเภทบัตรที่เปิดบัญชี PASSPORT CITIZEN_CARD&#x3D;บัตรประชาชน .</param>
        /// <param name="passportCountry">*เฉพาะกรณีเป็นบุคคลธรรมดา&lt;br/&gt;รหัสประเทศที่ออก passport (mandatory กรณี IdentificationCardType &#x3D; PASSPORT) .</param>
        /// <param name="cardNumber">cardNumber.</param>
        /// <param name="juristicNumber">*เฉพาะกรณีเป็นนิติบุคคล&lt;br/&gt;เลขที่ใบสำคัญการจดทะเบียน เช่น เลขทะเบียนการค้า เป็นต้น&lt;br/&gt;ต้อง unique ภายใต้ SA.</param>
        /// <param name="accountId">เลขที่บัญชี.</param>
        /// <param name="icLicense">เลขที่ IC License.</param>
        /// <param name="accountOpenDate">วันที่เปิดบัญชี.</param>
        /// <param name="mailingAddressSameAsFlag">การกำหนดที่อยู่ที่ติดต่อให้เหมือนที่อยู่ที่เคยระบุ&lt;br/&gt;+สำหรับบุคคลธรรมดา&lt;br/&gt;IdDocument &#x3D; เหมือนที่อยู่ตามประเภทหลักฐาน&lt;br/&gt;Current &#x3D; เหมือนที่อยู่ที่ติดต่อ&lt;br/&gt;Work &#x3D; เหมือนที่อยู่ที่ทำงาน&lt;br/&gt;Other &#x3D; ที่อยู่อื่นๆ&lt;br/&gt;+สำหรับนิติบุคคล&lt;br/&gt;JuristicRegistration &#x3D; เหมือนที่อยู่จดทะเบียน&lt;br/&gt;Other &#x3D; ที่อยู่อื่นๆ.</param>
        /// <param name="mailing">mailing.</param>
        /// <param name="mailingMethod">วิธีการรับเอกสาร&lt;br/&gt;Email &#x3D; อีเมล&lt;br/&gt;Fax &#x3D; โทรสาร&lt;br/&gt;Post &#x3D; ไปรษณีย์&lt;br/&gt;กรณีเลือก Email หรือ Fax จะต้องมีข้อมูลถึงจะเลือกได้.</param>
        /// <param name="investmentObjective">วัตถุประสงค์การลงทุน (สามารถเลือกได้มากกว่า 1 ข้อ แยกโดย comma (,)&lt;br/&gt;*สำหรับบุคคลธรรมดา&lt;br/&gt;Investment &lt;br/&gt;RetirementInvestment&lt;br/&gt;ForTaxBenefits&lt;br/&gt;PleaseSpecify&lt;br/&gt;&lt;br/&gt;*สำหรับนิติบุคคล&lt;br/&gt;CashManagementForInvestment&lt;br/&gt;Investment&lt;br/&gt;LiquidityManagement&lt;br/&gt;PleaseSpecify.</param>
        /// <param name="investmentObjectiveOther">mandatory when investmentObjective&#x3D;PleaseSpecify.</param>
        /// <param name="redemptionBankAccounts">บัญชีรับเงินค่าขายคืน&lt;br/&gt; (ต้องเลือก default 1 บัญชี/สกุลเงิน).</param>
        /// <param name="subscriptionBankAccounts">บัญชีตัดค่าซื้อกองทุน&lt;br/&gt; (เลือก default ได้ไม่เกิน 1 บัญชี/สกุลเงิน เท่านั้น).</param>
        /// <param name="approvedDate">วันที่ approve การเปิด/แก้ไข เป็น ค.ศ. (YYYYMMDD).</param>
        /// <param name="approvedDateTime">วันเวลาที่ approve การเปิด/แก้ไข เป็น ค.ศ.+ชั่วโมงนาทีวินาที (YYYYMMDDHHmmss).</param>
        /// <param name="openOmnibusFormFlag">มีการกรอกแบบฟอร์ม Omnibus แล้วหรือไม่&lt;br/&gt;true - กรอก&lt;br/&gt;false - ยังไม่ได้กรอก.</param>
        /// <param name="accountStatus">สถานะบัญชี&lt;br/&gt;ACTIVE &#x3D; ใช้งาน&lt;br/&gt;SUSPENDED &#x3D; ระงับการใช้งาน &lt;br/&gt;CLOSED &#x3D; ปิดบัญชี\&quot;.</param>
        /// <param name="processStatus">สถานะพร้อมใช้งาน&lt;br/&gt;ACTIVE &#x3D; พร้อมใช้งาน &lt;br/&gt;INACTIVE &#x3D; รออนุมัติ.</param>
        /// <param name="unitholders">ข้อมูลผู้ถือหน่วยลงทุน.</param>
        public AccountResponse(IdentificationCardTypeEnum? identificationCardType = default(IdentificationCardTypeEnum?), string passportCountry = default(string), AccountResponseCardNumber cardNumber = default(AccountResponseCardNumber), string juristicNumber = default(string), string accountId = default(string), string icLicense = default(string), string accountOpenDate = default(string), string mailingAddressSameAsFlag = default(string), Address mailing = default(Address), string mailingMethod = default(string), string investmentObjective = default(string), string investmentObjectiveOther = default(string), List<RedemptionBankAccountsResponse> redemptionBankAccounts = default(List<RedemptionBankAccountsResponse>), List<SubscriptionBankAccounts> subscriptionBankAccounts = default(List<SubscriptionBankAccounts>), string approvedDate = default(string), string approvedDateTime = default(string), bool openOmnibusFormFlag = default(bool), AccountStatusEnum? accountStatus = default(AccountStatusEnum?), ProcessStatusEnum? processStatus = default(ProcessStatusEnum?), List<Unitholders> unitholders = default(List<Unitholders>))
        {
            this.IdentificationCardType = identificationCardType;
            this.PassportCountry = passportCountry;
            this.CardNumber = cardNumber;
            this.JuristicNumber = juristicNumber;
            this.AccountId = accountId;
            this.IcLicense = icLicense;
            this.AccountOpenDate = accountOpenDate;
            this.MailingAddressSameAsFlag = mailingAddressSameAsFlag;
            this.Mailing = mailing;
            this.MailingMethod = mailingMethod;
            this.InvestmentObjective = investmentObjective;
            this.InvestmentObjectiveOther = investmentObjectiveOther;
            this.RedemptionBankAccounts = redemptionBankAccounts;
            this.SubscriptionBankAccounts = subscriptionBankAccounts;
            this.ApprovedDate = approvedDate;
            this.ApprovedDateTime = approvedDateTime;
            this.OpenOmnibusFormFlag = openOmnibusFormFlag;
            this.AccountStatus = accountStatus;
            this.ProcessStatus = processStatus;
            this.Unitholders = unitholders;
        }

        /// <summary>
        /// *เฉพาะกรณีเป็นบุคคลธรรมดา&lt;br/&gt;รหัสประเทศที่ออก passport (mandatory กรณี IdentificationCardType &#x3D; PASSPORT) 
        /// </summary>
        /// <value>*เฉพาะกรณีเป็นบุคคลธรรมดา&lt;br/&gt;รหัสประเทศที่ออก passport (mandatory กรณี IdentificationCardType &#x3D; PASSPORT) </value>
        [DataMember(Name = "passportCountry", EmitDefaultValue = true)]
        public string PassportCountry { get; set; }

        /// <summary>
        /// Gets or Sets CardNumber
        /// </summary>
        [DataMember(Name = "cardNumber", EmitDefaultValue = false)]
        public AccountResponseCardNumber CardNumber { get; set; }

        /// <summary>
        /// *เฉพาะกรณีเป็นนิติบุคคล&lt;br/&gt;เลขที่ใบสำคัญการจดทะเบียน เช่น เลขทะเบียนการค้า เป็นต้น&lt;br/&gt;ต้อง unique ภายใต้ SA
        /// </summary>
        /// <value>*เฉพาะกรณีเป็นนิติบุคคล&lt;br/&gt;เลขที่ใบสำคัญการจดทะเบียน เช่น เลขทะเบียนการค้า เป็นต้น&lt;br/&gt;ต้อง unique ภายใต้ SA</value>
        [DataMember(Name = "juristicNumber", EmitDefaultValue = false)]
        public string JuristicNumber { get; set; }

        /// <summary>
        /// เลขที่บัญชี
        /// </summary>
        /// <value>เลขที่บัญชี</value>
        [DataMember(Name = "accountId", EmitDefaultValue = false)]
        public string AccountId { get; set; }

        /// <summary>
        /// เลขที่ IC License
        /// </summary>
        /// <value>เลขที่ IC License</value>
        [DataMember(Name = "icLicense", EmitDefaultValue = false)]
        public string IcLicense { get; set; }

        /// <summary>
        /// วันที่เปิดบัญชี
        /// </summary>
        /// <value>วันที่เปิดบัญชี</value>
        [DataMember(Name = "accountOpenDate", EmitDefaultValue = false)]
        public string AccountOpenDate { get; set; }

        /// <summary>
        /// การกำหนดที่อยู่ที่ติดต่อให้เหมือนที่อยู่ที่เคยระบุ&lt;br/&gt;+สำหรับบุคคลธรรมดา&lt;br/&gt;IdDocument &#x3D; เหมือนที่อยู่ตามประเภทหลักฐาน&lt;br/&gt;Current &#x3D; เหมือนที่อยู่ที่ติดต่อ&lt;br/&gt;Work &#x3D; เหมือนที่อยู่ที่ทำงาน&lt;br/&gt;Other &#x3D; ที่อยู่อื่นๆ&lt;br/&gt;+สำหรับนิติบุคคล&lt;br/&gt;JuristicRegistration &#x3D; เหมือนที่อยู่จดทะเบียน&lt;br/&gt;Other &#x3D; ที่อยู่อื่นๆ
        /// </summary>
        /// <value>การกำหนดที่อยู่ที่ติดต่อให้เหมือนที่อยู่ที่เคยระบุ&lt;br/&gt;+สำหรับบุคคลธรรมดา&lt;br/&gt;IdDocument &#x3D; เหมือนที่อยู่ตามประเภทหลักฐาน&lt;br/&gt;Current &#x3D; เหมือนที่อยู่ที่ติดต่อ&lt;br/&gt;Work &#x3D; เหมือนที่อยู่ที่ทำงาน&lt;br/&gt;Other &#x3D; ที่อยู่อื่นๆ&lt;br/&gt;+สำหรับนิติบุคคล&lt;br/&gt;JuristicRegistration &#x3D; เหมือนที่อยู่จดทะเบียน&lt;br/&gt;Other &#x3D; ที่อยู่อื่นๆ</value>
        [DataMember(Name = "mailingAddressSameAsFlag", EmitDefaultValue = false)]
        public string MailingAddressSameAsFlag { get; set; }

        /// <summary>
        /// Gets or Sets Mailing
        /// </summary>
        [DataMember(Name = "mailing", EmitDefaultValue = false)]
        public Address Mailing { get; set; }

        /// <summary>
        /// วิธีการรับเอกสาร&lt;br/&gt;Email &#x3D; อีเมล&lt;br/&gt;Fax &#x3D; โทรสาร&lt;br/&gt;Post &#x3D; ไปรษณีย์&lt;br/&gt;กรณีเลือก Email หรือ Fax จะต้องมีข้อมูลถึงจะเลือกได้
        /// </summary>
        /// <value>วิธีการรับเอกสาร&lt;br/&gt;Email &#x3D; อีเมล&lt;br/&gt;Fax &#x3D; โทรสาร&lt;br/&gt;Post &#x3D; ไปรษณีย์&lt;br/&gt;กรณีเลือก Email หรือ Fax จะต้องมีข้อมูลถึงจะเลือกได้</value>
        [DataMember(Name = "mailingMethod", EmitDefaultValue = false)]
        public string MailingMethod { get; set; }

        /// <summary>
        /// วัตถุประสงค์การลงทุน (สามารถเลือกได้มากกว่า 1 ข้อ แยกโดย comma (,)&lt;br/&gt;*สำหรับบุคคลธรรมดา&lt;br/&gt;Investment &lt;br/&gt;RetirementInvestment&lt;br/&gt;ForTaxBenefits&lt;br/&gt;PleaseSpecify&lt;br/&gt;&lt;br/&gt;*สำหรับนิติบุคคล&lt;br/&gt;CashManagementForInvestment&lt;br/&gt;Investment&lt;br/&gt;LiquidityManagement&lt;br/&gt;PleaseSpecify
        /// </summary>
        /// <value>วัตถุประสงค์การลงทุน (สามารถเลือกได้มากกว่า 1 ข้อ แยกโดย comma (,)&lt;br/&gt;*สำหรับบุคคลธรรมดา&lt;br/&gt;Investment &lt;br/&gt;RetirementInvestment&lt;br/&gt;ForTaxBenefits&lt;br/&gt;PleaseSpecify&lt;br/&gt;&lt;br/&gt;*สำหรับนิติบุคคล&lt;br/&gt;CashManagementForInvestment&lt;br/&gt;Investment&lt;br/&gt;LiquidityManagement&lt;br/&gt;PleaseSpecify</value>
        [DataMember(Name = "investmentObjective", EmitDefaultValue = false)]
        public string InvestmentObjective { get; set; }

        /// <summary>
        /// mandatory when investmentObjective&#x3D;PleaseSpecify
        /// </summary>
        /// <value>mandatory when investmentObjective&#x3D;PleaseSpecify</value>
        [DataMember(Name = "investmentObjectiveOther", EmitDefaultValue = false)]
        public string InvestmentObjectiveOther { get; set; }

        /// <summary>
        /// บัญชีรับเงินค่าขายคืน&lt;br/&gt; (ต้องเลือก default 1 บัญชี/สกุลเงิน)
        /// </summary>
        /// <value>บัญชีรับเงินค่าขายคืน&lt;br/&gt; (ต้องเลือก default 1 บัญชี/สกุลเงิน)</value>
        [DataMember(Name = "redemptionBankAccounts", EmitDefaultValue = false)]
        public List<RedemptionBankAccountsResponse> RedemptionBankAccounts { get; set; }

        /// <summary>
        /// บัญชีตัดค่าซื้อกองทุน&lt;br/&gt; (เลือก default ได้ไม่เกิน 1 บัญชี/สกุลเงิน เท่านั้น)
        /// </summary>
        /// <value>บัญชีตัดค่าซื้อกองทุน&lt;br/&gt; (เลือก default ได้ไม่เกิน 1 บัญชี/สกุลเงิน เท่านั้น)</value>
        [DataMember(Name = "subscriptionBankAccounts", EmitDefaultValue = false)]
        public List<SubscriptionBankAccounts> SubscriptionBankAccounts { get; set; }

        /// <summary>
        /// วันที่ approve การเปิด/แก้ไข เป็น ค.ศ. (YYYYMMDD)
        /// </summary>
        /// <value>วันที่ approve การเปิด/แก้ไข เป็น ค.ศ. (YYYYMMDD)</value>
        [DataMember(Name = "approvedDate", EmitDefaultValue = false)]
        public string ApprovedDate { get; set; }

        /// <summary>
        /// วันเวลาที่ approve การเปิด/แก้ไข เป็น ค.ศ.+ชั่วโมงนาทีวินาที (YYYYMMDDHHmmss)
        /// </summary>
        /// <value>วันเวลาที่ approve การเปิด/แก้ไข เป็น ค.ศ.+ชั่วโมงนาทีวินาที (YYYYMMDDHHmmss)</value>
        [DataMember(Name = "approvedDateTime", EmitDefaultValue = false)]
        public string ApprovedDateTime { get; set; }

        /// <summary>
        /// มีการกรอกแบบฟอร์ม Omnibus แล้วหรือไม่&lt;br/&gt;true - กรอก&lt;br/&gt;false - ยังไม่ได้กรอก
        /// </summary>
        /// <value>มีการกรอกแบบฟอร์ม Omnibus แล้วหรือไม่&lt;br/&gt;true - กรอก&lt;br/&gt;false - ยังไม่ได้กรอก</value>
        [DataMember(Name = "openOmnibusFormFlag", EmitDefaultValue = true)]
        public bool OpenOmnibusFormFlag { get; set; }

        /// <summary>
        /// ข้อมูลผู้ถือหน่วยลงทุน
        /// </summary>
        /// <value>ข้อมูลผู้ถือหน่วยลงทุน</value>
        [DataMember(Name = "unitholders", EmitDefaultValue = false)]
        public List<Unitholders> Unitholders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountResponse {\n");
            sb.Append("  IdentificationCardType: ").Append(IdentificationCardType).Append("\n");
            sb.Append("  PassportCountry: ").Append(PassportCountry).Append("\n");
            sb.Append("  CardNumber: ").Append(CardNumber).Append("\n");
            sb.Append("  JuristicNumber: ").Append(JuristicNumber).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  IcLicense: ").Append(IcLicense).Append("\n");
            sb.Append("  AccountOpenDate: ").Append(AccountOpenDate).Append("\n");
            sb.Append("  MailingAddressSameAsFlag: ").Append(MailingAddressSameAsFlag).Append("\n");
            sb.Append("  Mailing: ").Append(Mailing).Append("\n");
            sb.Append("  MailingMethod: ").Append(MailingMethod).Append("\n");
            sb.Append("  InvestmentObjective: ").Append(InvestmentObjective).Append("\n");
            sb.Append("  InvestmentObjectiveOther: ").Append(InvestmentObjectiveOther).Append("\n");
            sb.Append("  RedemptionBankAccounts: ").Append(RedemptionBankAccounts).Append("\n");
            sb.Append("  SubscriptionBankAccounts: ").Append(SubscriptionBankAccounts).Append("\n");
            sb.Append("  ApprovedDate: ").Append(ApprovedDate).Append("\n");
            sb.Append("  ApprovedDateTime: ").Append(ApprovedDateTime).Append("\n");
            sb.Append("  OpenOmnibusFormFlag: ").Append(OpenOmnibusFormFlag).Append("\n");
            sb.Append("  AccountStatus: ").Append(AccountStatus).Append("\n");
            sb.Append("  ProcessStatus: ").Append(ProcessStatus).Append("\n");
            sb.Append("  Unitholders: ").Append(Unitholders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PassportCountry (string) maxLength
            if (this.PassportCountry != null && this.PassportCountry.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PassportCountry, length must be less than 2.", new[] { "PassportCountry" });
            }

            // PassportCountry (string) minLength
            if (this.PassportCountry != null && this.PassportCountry.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PassportCountry, length must be greater than 2.", new[] { "PassportCountry" });
            }

            // JuristicNumber (string) maxLength
            if (this.JuristicNumber != null && this.JuristicNumber.Length > 13)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JuristicNumber, length must be less than 13.", new[] { "JuristicNumber" });
            }

            // AccountId (string) maxLength
            if (this.AccountId != null && this.AccountId.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be less than 15.", new[] { "AccountId" });
            }

            // IcLicense (string) maxLength
            if (this.IcLicense != null && this.IcLicense.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IcLicense, length must be less than 10.", new[] { "IcLicense" });
            }

            // AccountOpenDate (string) maxLength
            if (this.AccountOpenDate != null && this.AccountOpenDate.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountOpenDate, length must be less than 8.", new[] { "AccountOpenDate" });
            }

            // MailingAddressSameAsFlag (string) maxLength
            if (this.MailingAddressSameAsFlag != null && this.MailingAddressSameAsFlag.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MailingAddressSameAsFlag, length must be less than 20.", new[] { "MailingAddressSameAsFlag" });
            }

            // MailingMethod (string) maxLength
            if (this.MailingMethod != null && this.MailingMethod.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MailingMethod, length must be less than 5.", new[] { "MailingMethod" });
            }

            // InvestmentObjective (string) maxLength
            if (this.InvestmentObjective != null && this.InvestmentObjective.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InvestmentObjective, length must be less than 200.", new[] { "InvestmentObjective" });
            }

            // InvestmentObjectiveOther (string) maxLength
            if (this.InvestmentObjectiveOther != null && this.InvestmentObjectiveOther.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InvestmentObjectiveOther, length must be less than 100.", new[] { "InvestmentObjectiveOther" });
            }

            yield break;
        }
    }

}
