/*
 * FundConnext
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Pi.Financial.Client.FundConnext.Client.FileParameter;
using OpenAPIDateConverter = Pi.Financial.Client.FundConnext.Client.OpenAPIDateConverter;

namespace Pi.Financial.Client.FundConnext.Model
{
    /// <summary>
    /// ApiSubscriptionsV2PostRequest
    /// </summary>
    [DataContract(Name = "_api_subscriptions_v2_post_request")]
    public partial class ApiSubscriptionsV2PostRequest : IValidatableObject
    {
        /// <summary>
        /// [Y] - accept to invest in fund that has higher risk than risk profile.&lt;/br&gt;[N] - no override
        /// </summary>
        /// <value>[Y] - accept to invest in fund that has higher risk than risk profile.&lt;/br&gt;[N] - no override</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OverrideRiskProfileEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }


        /// <summary>
        /// [Y] - accept to invest in fund that has higher risk than risk profile.&lt;/br&gt;[N] - no override
        /// </summary>
        /// <value>[Y] - accept to invest in fund that has higher risk than risk profile.&lt;/br&gt;[N] - no override</value>
        [DataMember(Name = "overrideRiskProfile", IsRequired = true, EmitDefaultValue = true)]
        public OverrideRiskProfileEnum OverrideRiskProfile { get; set; }
        /// <summary>
        /// [Y] - accepts to invest in fund that has FX risk.&lt;/br&gt;[N] - no override
        /// </summary>
        /// <value>[Y] - accepts to invest in fund that has FX risk.&lt;/br&gt;[N] - no override</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OverrideFxRiskEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }


        /// <summary>
        /// [Y] - accepts to invest in fund that has FX risk.&lt;/br&gt;[N] - no override
        /// </summary>
        /// <value>[Y] - accepts to invest in fund that has FX risk.&lt;/br&gt;[N] - no override</value>
        [DataMember(Name = "overrideFxRisk", IsRequired = true, EmitDefaultValue = true)]
        public OverrideFxRiskEnum OverrideFxRisk { get; set; }
        /// <summary>
        /// [ATS_SA] &#x3D; ATS to/by SA&lt;/br&gt;[EATS_SA] &#x3D; E-ATS to/by SA&lt;/br&gt;[TRN_SA] &#x3D; Bank Transfer to SA&lt;/br&gt;[CHQ_SA] &#x3D; Cheque pay to/by SA&lt;/br&gt;[CRC_SA] &#x3D; Credit card to SA&lt;/br&gt;[COL_SA] &#x3D; Collateral to SA&lt;/br&gt;[ATS_AMC] &#x3D; ATS to/by AMC&lt;/br&gt;[TRN_AMC] &#x3D; Bank Transfer to AMC&lt;/br&gt;[CHQ_AMC] &#x3D; Cheque pay to/by AMC&lt;/br&gt;[CRC_AMC] &#x3D; Credit card to AMC&lt;/br&gt;[QR_SA] &#x3D; QR to SA&lt;/br&gt;[QR_AMC] &#x3D; QR to AMC
        /// </summary>
        /// <value>[ATS_SA] &#x3D; ATS to/by SA&lt;/br&gt;[EATS_SA] &#x3D; E-ATS to/by SA&lt;/br&gt;[TRN_SA] &#x3D; Bank Transfer to SA&lt;/br&gt;[CHQ_SA] &#x3D; Cheque pay to/by SA&lt;/br&gt;[CRC_SA] &#x3D; Credit card to SA&lt;/br&gt;[COL_SA] &#x3D; Collateral to SA&lt;/br&gt;[ATS_AMC] &#x3D; ATS to/by AMC&lt;/br&gt;[TRN_AMC] &#x3D; Bank Transfer to AMC&lt;/br&gt;[CHQ_AMC] &#x3D; Cheque pay to/by AMC&lt;/br&gt;[CRC_AMC] &#x3D; Credit card to AMC&lt;/br&gt;[QR_SA] &#x3D; QR to SA&lt;/br&gt;[QR_AMC] &#x3D; QR to AMC</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentTypeEnum
        {
            /// <summary>
            /// Enum ATSSA for value: ATS_SA
            /// </summary>
            [EnumMember(Value = "ATS_SA")]
            ATSSA = 1,

            /// <summary>
            /// Enum EATSSA for value: EATS_SA
            /// </summary>
            [EnumMember(Value = "EATS_SA")]
            EATSSA = 2,

            /// <summary>
            /// Enum TRNSA for value: TRN_SA
            /// </summary>
            [EnumMember(Value = "TRN_SA")]
            TRNSA = 3,

            /// <summary>
            /// Enum CHQSA for value: CHQ_SA
            /// </summary>
            [EnumMember(Value = "CHQ_SA")]
            CHQSA = 4,

            /// <summary>
            /// Enum CRCSA for value: CRC_SA
            /// </summary>
            [EnumMember(Value = "CRC_SA")]
            CRCSA = 5,

            /// <summary>
            /// Enum COLSA for value: COL_SA
            /// </summary>
            [EnumMember(Value = "COL_SA")]
            COLSA = 6,

            /// <summary>
            /// Enum ATSAMC for value: ATS_AMC
            /// </summary>
            [EnumMember(Value = "ATS_AMC")]
            ATSAMC = 7,

            /// <summary>
            /// Enum TRNAMC for value: TRN_AMC
            /// </summary>
            [EnumMember(Value = "TRN_AMC")]
            TRNAMC = 8,

            /// <summary>
            /// Enum CHQAMC for value: CHQ_AMC
            /// </summary>
            [EnumMember(Value = "CHQ_AMC")]
            CHQAMC = 9,

            /// <summary>
            /// Enum CRCAMC for value: CRC_AMC
            /// </summary>
            [EnumMember(Value = "CRC_AMC")]
            CRCAMC = 10,

            /// <summary>
            /// Enum QRSA for value: QR_SA
            /// </summary>
            [EnumMember(Value = "QR_SA")]
            QRSA = 11,

            /// <summary>
            /// Enum QRAMC for value: QR_AMC
            /// </summary>
            [EnumMember(Value = "QR_AMC")]
            QRAMC = 12,

            /// <summary>
            /// Enum POINTSA for value: POINT_SA
            /// </summary>
            [EnumMember(Value = "POINT_SA")]
            POINTSA = 13
        }


        /// <summary>
        /// [ATS_SA] &#x3D; ATS to/by SA&lt;/br&gt;[EATS_SA] &#x3D; E-ATS to/by SA&lt;/br&gt;[TRN_SA] &#x3D; Bank Transfer to SA&lt;/br&gt;[CHQ_SA] &#x3D; Cheque pay to/by SA&lt;/br&gt;[CRC_SA] &#x3D; Credit card to SA&lt;/br&gt;[COL_SA] &#x3D; Collateral to SA&lt;/br&gt;[ATS_AMC] &#x3D; ATS to/by AMC&lt;/br&gt;[TRN_AMC] &#x3D; Bank Transfer to AMC&lt;/br&gt;[CHQ_AMC] &#x3D; Cheque pay to/by AMC&lt;/br&gt;[CRC_AMC] &#x3D; Credit card to AMC&lt;/br&gt;[QR_SA] &#x3D; QR to SA&lt;/br&gt;[QR_AMC] &#x3D; QR to AMC
        /// </summary>
        /// <value>[ATS_SA] &#x3D; ATS to/by SA&lt;/br&gt;[EATS_SA] &#x3D; E-ATS to/by SA&lt;/br&gt;[TRN_SA] &#x3D; Bank Transfer to SA&lt;/br&gt;[CHQ_SA] &#x3D; Cheque pay to/by SA&lt;/br&gt;[CRC_SA] &#x3D; Credit card to SA&lt;/br&gt;[COL_SA] &#x3D; Collateral to SA&lt;/br&gt;[ATS_AMC] &#x3D; ATS to/by AMC&lt;/br&gt;[TRN_AMC] &#x3D; Bank Transfer to AMC&lt;/br&gt;[CHQ_AMC] &#x3D; Cheque pay to/by AMC&lt;/br&gt;[CRC_AMC] &#x3D; Credit card to AMC&lt;/br&gt;[QR_SA] &#x3D; QR to SA&lt;/br&gt;[QR_AMC] &#x3D; QR to AMC</value>
        [DataMember(Name = "paymentType", IsRequired = true, EmitDefaultValue = true)]
        public PaymentTypeEnum PaymentType { get; set; }
        /// <summary>
        /// [MOB] &#x3D; Order from mobile device&lt;/br&gt;[ONL] &#x3D; Internet exclude mobile&lt;/br&gt;[MKT] &#x3D; Marketing/Counter
        /// </summary>
        /// <value>[MOB] &#x3D; Order from mobile device&lt;/br&gt;[ONL] &#x3D; Internet exclude mobile&lt;/br&gt;[MKT] &#x3D; Marketing/Counter</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChannelEnum
        {
            /// <summary>
            /// Enum MOB for value: MOB
            /// </summary>
            [EnumMember(Value = "MOB")]
            MOB = 1,

            /// <summary>
            /// Enum ONL for value: ONL
            /// </summary>
            [EnumMember(Value = "ONL")]
            ONL = 2,

            /// <summary>
            /// Enum MKT for value: MKT
            /// </summary>
            [EnumMember(Value = "MKT")]
            MKT = 3
        }


        /// <summary>
        /// [MOB] &#x3D; Order from mobile device&lt;/br&gt;[ONL] &#x3D; Internet exclude mobile&lt;/br&gt;[MKT] &#x3D; Marketing/Counter
        /// </summary>
        /// <value>[MOB] &#x3D; Order from mobile device&lt;/br&gt;[ONL] &#x3D; Internet exclude mobile&lt;/br&gt;[MKT] &#x3D; Marketing/Counter</value>
        [DataMember(Name = "channel", IsRequired = true, EmitDefaultValue = true)]
        public ChannelEnum Channel { get; set; }
        /// <summary>
        /// [Y] &#x3D; Force to skip cut-off time validation&lt;/br&gt;[N] &#x3D; Normal order
        /// </summary>
        /// <value>[Y] &#x3D; Force to skip cut-off time validation&lt;/br&gt;[N] &#x3D; Normal order</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ForceEntryEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }


        /// <summary>
        /// [Y] &#x3D; Force to skip cut-off time validation&lt;/br&gt;[N] &#x3D; Normal order
        /// </summary>
        /// <value>[Y] &#x3D; Force to skip cut-off time validation&lt;/br&gt;[N] &#x3D; Normal order</value>
        [DataMember(Name = "forceEntry", IsRequired = true, EmitDefaultValue = true)]
        public ForceEntryEnum ForceEntry { get; set; }
        /// <summary>
        /// [APPROVED] &#x3D; create approved order &lt;/br&gt;Not compatible with payment type QR_AMC or QR_SA
        /// </summary>
        /// <value>[APPROVED] &#x3D; create approved order &lt;/br&gt;Not compatible with payment type QR_AMC or QR_SA</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum APPROVED for value: APPROVED
            /// </summary>
            [EnumMember(Value = "APPROVED")]
            APPROVED = 1,

            /// <summary>
            /// Enum Null for value: null
            /// </summary>
            [EnumMember(Value = "null")]
            Null = 2
        }


        /// <summary>
        /// [APPROVED] &#x3D; create approved order &lt;/br&gt;Not compatible with payment type QR_AMC or QR_SA
        /// </summary>
        /// <value>[APPROVED] &#x3D; create approved order &lt;/br&gt;Not compatible with payment type QR_AMC or QR_SA</value>
        [DataMember(Name = "status", EmitDefaultValue = true)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiSubscriptionsV2PostRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApiSubscriptionsV2PostRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiSubscriptionsV2PostRequest" /> class.
        /// </summary>
        /// <param name="saOrderReferenceNo">Reference order from SA (required).</param>
        /// <param name="transactionDateTime">Transaction Time from SA&lt;/br&gt;System Format: YYYYMMDDHHMMSS (required).</param>
        /// <param name="saCode">saCode (required).</param>
        /// <param name="accountId">accountId (required).</param>
        /// <param name="unitholderId">AMC’s unitholder ID&lt;/br&gt;[SEG]when create new segregate unitholder ID&lt;/br&gt;[OMN]when create new omnibus unitholder ID&lt;/br&gt;[NEW_SEG]when create new segregate unitholder ID for each transaction&lt;/br&gt;[NEW_OMN]when create new omnibus unitholder ID for each transaction (required).</param>
        /// <param name="fundCode">fundCode (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="effectiveDate">Format: YYYYMMDD (required).</param>
        /// <param name="overrideRiskProfile">[Y] - accept to invest in fund that has higher risk than risk profile.&lt;/br&gt;[N] - no override (required).</param>
        /// <param name="overrideFxRisk">[Y] - accepts to invest in fund that has FX risk.&lt;/br&gt;[N] - no override (required).</param>
        /// <param name="paymentType">[ATS_SA] &#x3D; ATS to/by SA&lt;/br&gt;[EATS_SA] &#x3D; E-ATS to/by SA&lt;/br&gt;[TRN_SA] &#x3D; Bank Transfer to SA&lt;/br&gt;[CHQ_SA] &#x3D; Cheque pay to/by SA&lt;/br&gt;[CRC_SA] &#x3D; Credit card to SA&lt;/br&gt;[COL_SA] &#x3D; Collateral to SA&lt;/br&gt;[ATS_AMC] &#x3D; ATS to/by AMC&lt;/br&gt;[TRN_AMC] &#x3D; Bank Transfer to AMC&lt;/br&gt;[CHQ_AMC] &#x3D; Cheque pay to/by AMC&lt;/br&gt;[CRC_AMC] &#x3D; Credit card to AMC&lt;/br&gt;[QR_SA] &#x3D; QR to SA&lt;/br&gt;[QR_AMC] &#x3D; QR to AMC (required).</param>
        /// <param name="creditCardNo">Credit Card No Required if paymentType &#x3D; [CRC_*].</param>
        /// <param name="issuedBy">Credit card issuer Required if paymentType &#x3D; [CRC_*].</param>
        /// <param name="crcApprovalCode">Credit card approval code Required if paymentType &#x3D; [CRC_*].</param>
        /// <param name="bankCode">Required if paymentType &#x3D; [ATS_*], [EATS_*], [TRN_*], [CHQ_*].</param>
        /// <param name="bankAccount">Bank Account Required if paymentType &#x3D; [ATS_*].</param>
        /// <param name="payChequeNo">Required if paymentType &#x3D; [CHQ_*].</param>
        /// <param name="payChequeDate">Required if paymentType &#x3D; [CHQ_*].</param>
        /// <param name="channel">[MOB] &#x3D; Order from mobile device&lt;/br&gt;[ONL] &#x3D; Internet exclude mobile&lt;/br&gt;[MKT] &#x3D; Marketing/Counter (required).</param>
        /// <param name="icLicense">Existing IC License (required).</param>
        /// <param name="branchNo">SA Branch Code.</param>
        /// <param name="forceEntry">[Y] &#x3D; Force to skip cut-off time validation&lt;/br&gt;[N] &#x3D; Normal order (required).</param>
        /// <param name="ltfCondition">ltfCondition.</param>
        /// <param name="autoRedeemFundCode">Only term fund&lt;/br&gt;Fill fund code that subscription when auto redeem term fund.&lt;/br&gt;Mandatory if specified in fund rule..</param>
        /// <param name="settlementBankCode">Mandatory if paymentType is CHQ_AMC.</param>
        /// <param name="settlementBankAccount">Mandatory if paymentType is CHQ_AMC.</param>
        /// <param name="chqBranch">Mandatory if paymentType is CHQ_AMC.</param>
        /// <param name="status">[APPROVED] &#x3D; create approved order &lt;/br&gt;Not compatible with payment type QR_AMC or QR_SA.</param>
        /// <param name="collateralAccount">Collateral Account for payment type COL_SA.</param>
        public ApiSubscriptionsV2PostRequest(string saOrderReferenceNo = default(string), string transactionDateTime = default(string), string saCode = default(string), string accountId = default(string), string unitholderId = default(string), string fundCode = default(string), decimal amount = default(decimal), string effectiveDate = default(string), OverrideRiskProfileEnum overrideRiskProfile = default(OverrideRiskProfileEnum), OverrideFxRiskEnum overrideFxRisk = default(OverrideFxRiskEnum), PaymentTypeEnum paymentType = default(PaymentTypeEnum), string creditCardNo = default(string), string issuedBy = default(string), string crcApprovalCode = default(string), string bankCode = default(string), string bankAccount = default(string), string payChequeNo = default(string), string payChequeDate = default(string), ChannelEnum channel = default(ChannelEnum), string icLicense = default(string), string branchNo = default(string), ForceEntryEnum forceEntry = default(ForceEntryEnum), ApiSubscriptionsV2PostRequestLtfCondition ltfCondition = default(ApiSubscriptionsV2PostRequestLtfCondition), string autoRedeemFundCode = default(string), string settlementBankCode = default(string), string settlementBankAccount = default(string), string chqBranch = default(string), StatusEnum? status = default(StatusEnum?), string collateralAccount = default(string))
        {
            // to ensure "saOrderReferenceNo" is required (not null)
            if (saOrderReferenceNo == null)
            {
                throw new ArgumentNullException("saOrderReferenceNo is a required property for ApiSubscriptionsV2PostRequest and cannot be null");
            }
            this.SaOrderReferenceNo = saOrderReferenceNo;
            // to ensure "transactionDateTime" is required (not null)
            if (transactionDateTime == null)
            {
                throw new ArgumentNullException("transactionDateTime is a required property for ApiSubscriptionsV2PostRequest and cannot be null");
            }
            this.TransactionDateTime = transactionDateTime;
            // to ensure "saCode" is required (not null)
            if (saCode == null)
            {
                throw new ArgumentNullException("saCode is a required property for ApiSubscriptionsV2PostRequest and cannot be null");
            }
            this.SaCode = saCode;
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId is a required property for ApiSubscriptionsV2PostRequest and cannot be null");
            }
            this.AccountId = accountId;
            // to ensure "unitholderId" is required (not null)
            if (unitholderId == null)
            {
                throw new ArgumentNullException("unitholderId is a required property for ApiSubscriptionsV2PostRequest and cannot be null");
            }
            this.UnitholderId = unitholderId;
            // to ensure "fundCode" is required (not null)
            if (fundCode == null)
            {
                throw new ArgumentNullException("fundCode is a required property for ApiSubscriptionsV2PostRequest and cannot be null");
            }
            this.FundCode = fundCode;
            this.Amount = amount;
            // to ensure "effectiveDate" is required (not null)
            if (effectiveDate == null)
            {
                throw new ArgumentNullException("effectiveDate is a required property for ApiSubscriptionsV2PostRequest and cannot be null");
            }
            this.EffectiveDate = effectiveDate;
            this.OverrideRiskProfile = overrideRiskProfile;
            this.OverrideFxRisk = overrideFxRisk;
            this.PaymentType = paymentType;
            this.Channel = channel;
            // to ensure "icLicense" is required (not null)
            if (icLicense == null)
            {
                throw new ArgumentNullException("icLicense is a required property for ApiSubscriptionsV2PostRequest and cannot be null");
            }
            this.IcLicense = icLicense;
            this.ForceEntry = forceEntry;
            this.CreditCardNo = creditCardNo;
            this.IssuedBy = issuedBy;
            this.CrcApprovalCode = crcApprovalCode;
            this.BankCode = bankCode;
            this.BankAccount = bankAccount;
            this.PayChequeNo = payChequeNo;
            this.PayChequeDate = payChequeDate;
            this.BranchNo = branchNo;
            this.LtfCondition = ltfCondition;
            this.AutoRedeemFundCode = autoRedeemFundCode;
            this.SettlementBankCode = settlementBankCode;
            this.SettlementBankAccount = settlementBankAccount;
            this.ChqBranch = chqBranch;
            this.Status = status;
            this.CollateralAccount = collateralAccount;
        }

        /// <summary>
        /// Reference order from SA
        /// </summary>
        /// <value>Reference order from SA</value>
        [DataMember(Name = "saOrderReferenceNo", IsRequired = true, EmitDefaultValue = true)]
        public string SaOrderReferenceNo { get; set; }

        /// <summary>
        /// Transaction Time from SA&lt;/br&gt;System Format: YYYYMMDDHHMMSS
        /// </summary>
        /// <value>Transaction Time from SA&lt;/br&gt;System Format: YYYYMMDDHHMMSS</value>
        [DataMember(Name = "transactionDateTime", IsRequired = true, EmitDefaultValue = true)]
        public string TransactionDateTime { get; set; }

        /// <summary>
        /// Gets or Sets SaCode
        /// </summary>
        [DataMember(Name = "saCode", IsRequired = true, EmitDefaultValue = true)]
        public string SaCode { get; set; }

        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name = "accountId", IsRequired = true, EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// AMC’s unitholder ID&lt;/br&gt;[SEG]when create new segregate unitholder ID&lt;/br&gt;[OMN]when create new omnibus unitholder ID&lt;/br&gt;[NEW_SEG]when create new segregate unitholder ID for each transaction&lt;/br&gt;[NEW_OMN]when create new omnibus unitholder ID for each transaction
        /// </summary>
        /// <value>AMC’s unitholder ID&lt;/br&gt;[SEG]when create new segregate unitholder ID&lt;/br&gt;[OMN]when create new omnibus unitholder ID&lt;/br&gt;[NEW_SEG]when create new segregate unitholder ID for each transaction&lt;/br&gt;[NEW_OMN]when create new omnibus unitholder ID for each transaction</value>
        [DataMember(Name = "unitholderId", IsRequired = true, EmitDefaultValue = true)]
        public string UnitholderId { get; set; }

        /// <summary>
        /// Gets or Sets FundCode
        /// </summary>
        [DataMember(Name = "fundCode", IsRequired = true, EmitDefaultValue = true)]
        public string FundCode { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Format: YYYYMMDD
        /// </summary>
        /// <value>Format: YYYYMMDD</value>
        [DataMember(Name = "effectiveDate", IsRequired = true, EmitDefaultValue = true)]
        public string EffectiveDate { get; set; }

        /// <summary>
        /// Credit Card No Required if paymentType &#x3D; [CRC_*]
        /// </summary>
        /// <value>Credit Card No Required if paymentType &#x3D; [CRC_*]</value>
        [DataMember(Name = "creditCardNo", EmitDefaultValue = true)]
        public string CreditCardNo { get; set; }

        /// <summary>
        /// Credit card issuer Required if paymentType &#x3D; [CRC_*]
        /// </summary>
        /// <value>Credit card issuer Required if paymentType &#x3D; [CRC_*]</value>
        [DataMember(Name = "issuedBy", EmitDefaultValue = true)]
        public string IssuedBy { get; set; }

        /// <summary>
        /// Credit card approval code Required if paymentType &#x3D; [CRC_*]
        /// </summary>
        /// <value>Credit card approval code Required if paymentType &#x3D; [CRC_*]</value>
        [DataMember(Name = "crcApprovalCode", EmitDefaultValue = true)]
        public string CrcApprovalCode { get; set; }

        /// <summary>
        /// Required if paymentType &#x3D; [ATS_*], [EATS_*], [TRN_*], [CHQ_*]
        /// </summary>
        /// <value>Required if paymentType &#x3D; [ATS_*], [EATS_*], [TRN_*], [CHQ_*]</value>
        [DataMember(Name = "bankCode", EmitDefaultValue = true)]
        public string BankCode { get; set; }

        /// <summary>
        /// Bank Account Required if paymentType &#x3D; [ATS_*]
        /// </summary>
        /// <value>Bank Account Required if paymentType &#x3D; [ATS_*]</value>
        [DataMember(Name = "bankAccount", EmitDefaultValue = true)]
        public string BankAccount { get; set; }

        /// <summary>
        /// Required if paymentType &#x3D; [CHQ_*]
        /// </summary>
        /// <value>Required if paymentType &#x3D; [CHQ_*]</value>
        [DataMember(Name = "payChequeNo", EmitDefaultValue = true)]
        public string PayChequeNo { get; set; }

        /// <summary>
        /// Required if paymentType &#x3D; [CHQ_*]
        /// </summary>
        /// <value>Required if paymentType &#x3D; [CHQ_*]</value>
        [DataMember(Name = "payChequeDate", EmitDefaultValue = true)]
        public string PayChequeDate { get; set; }

        /// <summary>
        /// Existing IC License
        /// </summary>
        /// <value>Existing IC License</value>
        [DataMember(Name = "icLicense", IsRequired = true, EmitDefaultValue = true)]
        public string IcLicense { get; set; }

        /// <summary>
        /// SA Branch Code
        /// </summary>
        /// <value>SA Branch Code</value>
        [DataMember(Name = "branchNo", EmitDefaultValue = true)]
        public string BranchNo { get; set; }

        /// <summary>
        /// Gets or Sets LtfCondition
        /// </summary>
        [DataMember(Name = "ltfCondition", EmitDefaultValue = false)]
        public ApiSubscriptionsV2PostRequestLtfCondition LtfCondition { get; set; }

        /// <summary>
        /// Only term fund&lt;/br&gt;Fill fund code that subscription when auto redeem term fund.&lt;/br&gt;Mandatory if specified in fund rule.
        /// </summary>
        /// <value>Only term fund&lt;/br&gt;Fill fund code that subscription when auto redeem term fund.&lt;/br&gt;Mandatory if specified in fund rule.</value>
        [DataMember(Name = "autoRedeemFundCode", EmitDefaultValue = true)]
        public string AutoRedeemFundCode { get; set; }

        /// <summary>
        /// Mandatory if paymentType is CHQ_AMC
        /// </summary>
        /// <value>Mandatory if paymentType is CHQ_AMC</value>
        [DataMember(Name = "settlementBankCode", EmitDefaultValue = true)]
        public string SettlementBankCode { get; set; }

        /// <summary>
        /// Mandatory if paymentType is CHQ_AMC
        /// </summary>
        /// <value>Mandatory if paymentType is CHQ_AMC</value>
        [DataMember(Name = "settlementBankAccount", EmitDefaultValue = true)]
        public string SettlementBankAccount { get; set; }

        /// <summary>
        /// Mandatory if paymentType is CHQ_AMC
        /// </summary>
        /// <value>Mandatory if paymentType is CHQ_AMC</value>
        [DataMember(Name = "chqBranch", EmitDefaultValue = true)]
        public string ChqBranch { get; set; }

        /// <summary>
        /// Collateral Account for payment type COL_SA
        /// </summary>
        /// <value>Collateral Account for payment type COL_SA</value>
        [DataMember(Name = "collateralAccount", EmitDefaultValue = true)]
        public string CollateralAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiSubscriptionsV2PostRequest {\n");
            sb.Append("  SaOrderReferenceNo: ").Append(SaOrderReferenceNo).Append("\n");
            sb.Append("  TransactionDateTime: ").Append(TransactionDateTime).Append("\n");
            sb.Append("  SaCode: ").Append(SaCode).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  UnitholderId: ").Append(UnitholderId).Append("\n");
            sb.Append("  FundCode: ").Append(FundCode).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  OverrideRiskProfile: ").Append(OverrideRiskProfile).Append("\n");
            sb.Append("  OverrideFxRisk: ").Append(OverrideFxRisk).Append("\n");
            sb.Append("  PaymentType: ").Append(PaymentType).Append("\n");
            sb.Append("  CreditCardNo: ").Append(CreditCardNo).Append("\n");
            sb.Append("  IssuedBy: ").Append(IssuedBy).Append("\n");
            sb.Append("  CrcApprovalCode: ").Append(CrcApprovalCode).Append("\n");
            sb.Append("  BankCode: ").Append(BankCode).Append("\n");
            sb.Append("  BankAccount: ").Append(BankAccount).Append("\n");
            sb.Append("  PayChequeNo: ").Append(PayChequeNo).Append("\n");
            sb.Append("  PayChequeDate: ").Append(PayChequeDate).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  IcLicense: ").Append(IcLicense).Append("\n");
            sb.Append("  BranchNo: ").Append(BranchNo).Append("\n");
            sb.Append("  ForceEntry: ").Append(ForceEntry).Append("\n");
            sb.Append("  LtfCondition: ").Append(LtfCondition).Append("\n");
            sb.Append("  AutoRedeemFundCode: ").Append(AutoRedeemFundCode).Append("\n");
            sb.Append("  SettlementBankCode: ").Append(SettlementBankCode).Append("\n");
            sb.Append("  SettlementBankAccount: ").Append(SettlementBankAccount).Append("\n");
            sb.Append("  ChqBranch: ").Append(ChqBranch).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CollateralAccount: ").Append(CollateralAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SaOrderReferenceNo (string) maxLength
            if (this.SaOrderReferenceNo != null && this.SaOrderReferenceNo.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SaOrderReferenceNo, length must be less than 30.", new[] { "SaOrderReferenceNo" });
            }

            // TransactionDateTime (string) maxLength
            if (this.TransactionDateTime != null && this.TransactionDateTime.Length > 14)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionDateTime, length must be less than 14.", new[] { "TransactionDateTime" });
            }

            // TransactionDateTime (string) minLength
            if (this.TransactionDateTime != null && this.TransactionDateTime.Length < 14)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionDateTime, length must be greater than 14.", new[] { "TransactionDateTime" });
            }

            if (this.TransactionDateTime != null)
            {
                // TransactionDateTime (string) pattern
                Regex regexTransactionDateTime = new Regex(@"^((19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])(0[0-9]|1[0-9]|2[0-3])(0[0-9]|[12345]\d)(0[0-9]|[12345]\d))$", RegexOptions.CultureInvariant);
                if (!regexTransactionDateTime.Match(this.TransactionDateTime).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionDateTime, must match a pattern of " + regexTransactionDateTime, new[] { "TransactionDateTime" });
                }
            }

            // SaCode (string) maxLength
            if (this.SaCode != null && this.SaCode.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SaCode, length must be less than 15.", new[] { "SaCode" });
            }

            // AccountId (string) maxLength
            if (this.AccountId != null && this.AccountId.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccountId, length must be less than 15.", new[] { "AccountId" });
            }

            // UnitholderId (string) maxLength
            if (this.UnitholderId != null && this.UnitholderId.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitholderId, length must be less than 15.", new[] { "UnitholderId" });
            }

            // FundCode (string) maxLength
            if (this.FundCode != null && this.FundCode.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FundCode, length must be less than 30.", new[] { "FundCode" });
            }

            // EffectiveDate (string) maxLength
            if (this.EffectiveDate != null && this.EffectiveDate.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EffectiveDate, length must be less than 8.", new[] { "EffectiveDate" });
            }

            // EffectiveDate (string) minLength
            if (this.EffectiveDate != null && this.EffectiveDate.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EffectiveDate, length must be greater than 8.", new[] { "EffectiveDate" });
            }

            if (this.EffectiveDate != null)
            {
                // EffectiveDate (string) pattern
                Regex regexEffectiveDate = new Regex(@"^((19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))$", RegexOptions.CultureInvariant);
                if (!regexEffectiveDate.Match(this.EffectiveDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EffectiveDate, must match a pattern of " + regexEffectiveDate, new[] { "EffectiveDate" });
                }
            }

            // CreditCardNo (string) maxLength
            if (this.CreditCardNo != null && this.CreditCardNo.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CreditCardNo, length must be less than 16.", new[] { "CreditCardNo" });
            }

            // IssuedBy (string) maxLength
            if (this.IssuedBy != null && this.IssuedBy.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IssuedBy, length must be less than 20.", new[] { "IssuedBy" });
            }

            // CrcApprovalCode (string) maxLength
            if (this.CrcApprovalCode != null && this.CrcApprovalCode.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CrcApprovalCode, length must be less than 20.", new[] { "CrcApprovalCode" });
            }

            // BankCode (string) maxLength
            if (this.BankCode != null && this.BankCode.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BankCode, length must be less than 4.", new[] { "BankCode" });
            }

            // BankAccount (string) maxLength
            if (this.BankAccount != null && this.BankAccount.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BankAccount, length must be less than 20.", new[] { "BankAccount" });
            }

            // BankAccount (string) minLength
            if (this.BankAccount != null && this.BankAccount.Length < 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BankAccount, length must be greater than 10.", new[] { "BankAccount" });
            }

            // PayChequeNo (string) maxLength
            if (this.PayChequeNo != null && this.PayChequeNo.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayChequeNo, length must be less than 10.", new[] { "PayChequeNo" });
            }

            // PayChequeDate (string) maxLength
            if (this.PayChequeDate != null && this.PayChequeDate.Length > 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayChequeDate, length must be less than 8.", new[] { "PayChequeDate" });
            }

            // PayChequeDate (string) minLength
            if (this.PayChequeDate != null && this.PayChequeDate.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayChequeDate, length must be greater than 8.", new[] { "PayChequeDate" });
            }

            if (this.PayChequeDate != null)
            {
                // PayChequeDate (string) pattern
                Regex regexPayChequeDate = new Regex(@"^((19|20)\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))$", RegexOptions.CultureInvariant);
                if (!regexPayChequeDate.Match(this.PayChequeDate).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PayChequeDate, must match a pattern of " + regexPayChequeDate, new[] { "PayChequeDate" });
                }
            }

            // IcLicense (string) maxLength
            if (this.IcLicense != null && this.IcLicense.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IcLicense, length must be less than 10.", new[] { "IcLicense" });
            }

            // BranchNo (string) maxLength
            if (this.BranchNo != null && this.BranchNo.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BranchNo, length must be less than 5.", new[] { "BranchNo" });
            }

            // AutoRedeemFundCode (string) maxLength
            if (this.AutoRedeemFundCode != null && this.AutoRedeemFundCode.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AutoRedeemFundCode, length must be less than 30.", new[] { "AutoRedeemFundCode" });
            }

            // SettlementBankCode (string) maxLength
            if (this.SettlementBankCode != null && this.SettlementBankCode.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SettlementBankCode, length must be less than 4.", new[] { "SettlementBankCode" });
            }

            // SettlementBankAccount (string) maxLength
            if (this.SettlementBankAccount != null && this.SettlementBankAccount.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SettlementBankAccount, length must be less than 20.", new[] { "SettlementBankAccount" });
            }

            // SettlementBankAccount (string) minLength
            if (this.SettlementBankAccount != null && this.SettlementBankAccount.Length < 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SettlementBankAccount, length must be greater than 10.", new[] { "SettlementBankAccount" });
            }

            // ChqBranch (string) maxLength
            if (this.ChqBranch != null && this.ChqBranch.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChqBranch, length must be less than 5.", new[] { "ChqBranch" });
            }

            // CollateralAccount (string) maxLength
            if (this.CollateralAccount != null && this.CollateralAccount.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CollateralAccount, length must be less than 20.", new[] { "CollateralAccount" });
            }

            // CollateralAccount (string) minLength
            if (this.CollateralAccount != null && this.CollateralAccount.Length < 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CollateralAccount, length must be greater than 10.", new[] { "CollateralAccount" });
            }

            yield break;
        }
    }

}
