/*
Pi.GlobalEquities.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"encoding/json"
	"fmt"
)

// CorporateAssetType the model 'CorporateAssetType'
type CorporateAssetType string

// List of CorporateAssetType
const (
	CORPORATEASSETTYPE_INSTRUMENT CorporateAssetType = "Instrument"
	CORPORATEASSETTYPE_CASH       CorporateAssetType = "Cash"
	CORPORATEASSETTYPE_UNKNOWN    CorporateAssetType = "Unknown"
)

// All allowed values of CorporateAssetType enum
var AllowedCorporateAssetTypeEnumValues = []CorporateAssetType{
	"Instrument",
	"Cash",
	"Unknown",
}

func (v *CorporateAssetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CorporateAssetType(value)
	for _, existing := range AllowedCorporateAssetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CorporateAssetType", value)
}

// NewCorporateAssetTypeFromValue returns a pointer to a valid CorporateAssetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCorporateAssetTypeFromValue(v string) (*CorporateAssetType, error) {
	ev := CorporateAssetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CorporateAssetType: valid values are %v", v, AllowedCorporateAssetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CorporateAssetType) IsValid() bool {
	for _, existing := range AllowedCorporateAssetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CorporateAssetType value
func (v CorporateAssetType) Ptr() *CorporateAssetType {
	return &v
}

type NullableCorporateAssetType struct {
	value *CorporateAssetType
	isSet bool
}

func (v NullableCorporateAssetType) Get() *CorporateAssetType {
	return v.value
}

func (v *NullableCorporateAssetType) Set(val *CorporateAssetType) {
	v.value = val
	v.isSet = true
}

func (v NullableCorporateAssetType) IsSet() bool {
	return v.isSet
}

func (v *NullableCorporateAssetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorporateAssetType(val *CorporateAssetType) *NullableCorporateAssetType {
	return &NullableCorporateAssetType{value: val, isSet: true}
}

func (v NullableCorporateAssetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorporateAssetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
