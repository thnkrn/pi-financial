/*
Pi.GlobalEquities.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"encoding/json"
	"fmt"
)

// Currency the model 'Currency'
type Currency string

// List of Currency
const (
	CURRENCY_AED Currency = "AED"
	CURRENCY_AFN Currency = "AFN"
	CURRENCY_ALL Currency = "ALL"
	CURRENCY_AMD Currency = "AMD"
	CURRENCY_ANG Currency = "ANG"
	CURRENCY_AOA Currency = "AOA"
	CURRENCY_ARS Currency = "ARS"
	CURRENCY_AUD Currency = "AUD"
	CURRENCY_AWG Currency = "AWG"
	CURRENCY_AZN Currency = "AZN"
	CURRENCY_BAM Currency = "BAM"
	CURRENCY_BBD Currency = "BBD"
	CURRENCY_BDT Currency = "BDT"
	CURRENCY_BGN Currency = "BGN"
	CURRENCY_BHD Currency = "BHD"
	CURRENCY_BIF Currency = "BIF"
	CURRENCY_BMD Currency = "BMD"
	CURRENCY_BND Currency = "BND"
	CURRENCY_BOB Currency = "BOB"
	CURRENCY_BRL Currency = "BRL"
	CURRENCY_BSD Currency = "BSD"
	CURRENCY_BTN Currency = "BTN"
	CURRENCY_BWP Currency = "BWP"
	CURRENCY_BYR Currency = "BYR"
	CURRENCY_BZD Currency = "BZD"
	CURRENCY_CAD Currency = "CAD"
	CURRENCY_CDF Currency = "CDF"
	CURRENCY_CHF Currency = "CHF"
	CURRENCY_CLP Currency = "CLP"
	CURRENCY_CNY Currency = "CNY"
	CURRENCY_COP Currency = "COP"
	CURRENCY_CRC Currency = "CRC"
	CURRENCY_CUC Currency = "CUC"
	CURRENCY_CUP Currency = "CUP"
	CURRENCY_CVE Currency = "CVE"
	CURRENCY_CZK Currency = "CZK"
	CURRENCY_DJF Currency = "DJF"
	CURRENCY_DKK Currency = "DKK"
	CURRENCY_DOP Currency = "DOP"
	CURRENCY_DZD Currency = "DZD"
	CURRENCY_EGP Currency = "EGP"
	CURRENCY_ERN Currency = "ERN"
	CURRENCY_ETB Currency = "ETB"
	CURRENCY_EUR Currency = "EUR"
	CURRENCY_FJD Currency = "FJD"
	CURRENCY_FKP Currency = "FKP"
	CURRENCY_GBP Currency = "GBP"
	CURRENCY_GEL Currency = "GEL"
	CURRENCY_GGP Currency = "GGP"
	CURRENCY_GHS Currency = "GHS"
	CURRENCY_GIP Currency = "GIP"
	CURRENCY_GMD Currency = "GMD"
	CURRENCY_GNF Currency = "GNF"
	CURRENCY_GTQ Currency = "GTQ"
	CURRENCY_GYD Currency = "GYD"
	CURRENCY_HKD Currency = "HKD"
	CURRENCY_HNL Currency = "HNL"
	CURRENCY_HRK Currency = "HRK"
	CURRENCY_HTG Currency = "HTG"
	CURRENCY_HUF Currency = "HUF"
	CURRENCY_IDR Currency = "IDR"
	CURRENCY_ILS Currency = "ILS"
	CURRENCY_IMP Currency = "IMP"
	CURRENCY_INR Currency = "INR"
	CURRENCY_IQD Currency = "IQD"
	CURRENCY_IRR Currency = "IRR"
	CURRENCY_ISK Currency = "ISK"
	CURRENCY_JEP Currency = "JEP"
	CURRENCY_JMD Currency = "JMD"
	CURRENCY_JOD Currency = "JOD"
	CURRENCY_JPY Currency = "JPY"
	CURRENCY_KES Currency = "KES"
	CURRENCY_KGS Currency = "KGS"
	CURRENCY_KHR Currency = "KHR"
	CURRENCY_KMF Currency = "KMF"
	CURRENCY_KPW Currency = "KPW"
	CURRENCY_KRW Currency = "KRW"
	CURRENCY_KWD Currency = "KWD"
	CURRENCY_KYD Currency = "KYD"
	CURRENCY_KZT Currency = "KZT"
	CURRENCY_LAK Currency = "LAK"
	CURRENCY_LBP Currency = "LBP"
	CURRENCY_LKR Currency = "LKR"
	CURRENCY_LRD Currency = "LRD"
	CURRENCY_LSL Currency = "LSL"
	CURRENCY_LYD Currency = "LYD"
	CURRENCY_MAD Currency = "MAD"
	CURRENCY_MDL Currency = "MDL"
	CURRENCY_MGA Currency = "MGA"
	CURRENCY_MKD Currency = "MKD"
	CURRENCY_MMK Currency = "MMK"
	CURRENCY_MNT Currency = "MNT"
	CURRENCY_MOP Currency = "MOP"
	CURRENCY_MRO Currency = "MRO"
	CURRENCY_MUR Currency = "MUR"
	CURRENCY_MVR Currency = "MVR"
	CURRENCY_MWK Currency = "MWK"
	CURRENCY_MXN Currency = "MXN"
	CURRENCY_MYR Currency = "MYR"
	CURRENCY_MZN Currency = "MZN"
	CURRENCY_NAD Currency = "NAD"
	CURRENCY_NGN Currency = "NGN"
	CURRENCY_NIO Currency = "NIO"
	CURRENCY_NOK Currency = "NOK"
	CURRENCY_NPR Currency = "NPR"
	CURRENCY_NZD Currency = "NZD"
	CURRENCY_OMR Currency = "OMR"
	CURRENCY_PAB Currency = "PAB"
	CURRENCY_PEN Currency = "PEN"
	CURRENCY_PGK Currency = "PGK"
	CURRENCY_PHP Currency = "PHP"
	CURRENCY_PKR Currency = "PKR"
	CURRENCY_PLN Currency = "PLN"
	CURRENCY_PYG Currency = "PYG"
	CURRENCY_QAR Currency = "QAR"
	CURRENCY_RON Currency = "RON"
	CURRENCY_RSD Currency = "RSD"
	CURRENCY_RUB Currency = "RUB"
	CURRENCY_RWF Currency = "RWF"
	CURRENCY_SAR Currency = "SAR"
	CURRENCY_SBD Currency = "SBD"
	CURRENCY_SCR Currency = "SCR"
	CURRENCY_SDG Currency = "SDG"
	CURRENCY_SEK Currency = "SEK"
	CURRENCY_SGD Currency = "SGD"
	CURRENCY_SHP Currency = "SHP"
	CURRENCY_SLL Currency = "SLL"
	CURRENCY_SOS Currency = "SOS"
	CURRENCY_SPL Currency = "SPL"
	CURRENCY_SRD Currency = "SRD"
	CURRENCY_STD Currency = "STD"
	CURRENCY_SVC Currency = "SVC"
	CURRENCY_SYP Currency = "SYP"
	CURRENCY_SZL Currency = "SZL"
	CURRENCY_THB Currency = "THB"
	CURRENCY_TJS Currency = "TJS"
	CURRENCY_TMT Currency = "TMT"
	CURRENCY_TND Currency = "TND"
	CURRENCY_TOP Currency = "TOP"
	CURRENCY_TRY Currency = "TRY"
	CURRENCY_TTD Currency = "TTD"
	CURRENCY_TVD Currency = "TVD"
	CURRENCY_TWD Currency = "TWD"
	CURRENCY_TZS Currency = "TZS"
	CURRENCY_UAH Currency = "UAH"
	CURRENCY_UGX Currency = "UGX"
	CURRENCY_USD Currency = "USD"
	CURRENCY_UYU Currency = "UYU"
	CURRENCY_UZS Currency = "UZS"
	CURRENCY_VEF Currency = "VEF"
	CURRENCY_VND Currency = "VND"
	CURRENCY_VUV Currency = "VUV"
	CURRENCY_WST Currency = "WST"
	CURRENCY_XAF Currency = "XAF"
	CURRENCY_XCD Currency = "XCD"
	CURRENCY_XOF Currency = "XOF"
	CURRENCY_XPF Currency = "XPF"
	CURRENCY_YER Currency = "YER"
	CURRENCY_ZAR Currency = "ZAR"
	CURRENCY_ZMW Currency = "ZMW"
	CURRENCY_ZWD Currency = "ZWD"
)

// All allowed values of Currency enum
var AllowedCurrencyEnumValues = []Currency{
	"AED",
	"AFN",
	"ALL",
	"AMD",
	"ANG",
	"AOA",
	"ARS",
	"AUD",
	"AWG",
	"AZN",
	"BAM",
	"BBD",
	"BDT",
	"BGN",
	"BHD",
	"BIF",
	"BMD",
	"BND",
	"BOB",
	"BRL",
	"BSD",
	"BTN",
	"BWP",
	"BYR",
	"BZD",
	"CAD",
	"CDF",
	"CHF",
	"CLP",
	"CNY",
	"COP",
	"CRC",
	"CUC",
	"CUP",
	"CVE",
	"CZK",
	"DJF",
	"DKK",
	"DOP",
	"DZD",
	"EGP",
	"ERN",
	"ETB",
	"EUR",
	"FJD",
	"FKP",
	"GBP",
	"GEL",
	"GGP",
	"GHS",
	"GIP",
	"GMD",
	"GNF",
	"GTQ",
	"GYD",
	"HKD",
	"HNL",
	"HRK",
	"HTG",
	"HUF",
	"IDR",
	"ILS",
	"IMP",
	"INR",
	"IQD",
	"IRR",
	"ISK",
	"JEP",
	"JMD",
	"JOD",
	"JPY",
	"KES",
	"KGS",
	"KHR",
	"KMF",
	"KPW",
	"KRW",
	"KWD",
	"KYD",
	"KZT",
	"LAK",
	"LBP",
	"LKR",
	"LRD",
	"LSL",
	"LYD",
	"MAD",
	"MDL",
	"MGA",
	"MKD",
	"MMK",
	"MNT",
	"MOP",
	"MRO",
	"MUR",
	"MVR",
	"MWK",
	"MXN",
	"MYR",
	"MZN",
	"NAD",
	"NGN",
	"NIO",
	"NOK",
	"NPR",
	"NZD",
	"OMR",
	"PAB",
	"PEN",
	"PGK",
	"PHP",
	"PKR",
	"PLN",
	"PYG",
	"QAR",
	"RON",
	"RSD",
	"RUB",
	"RWF",
	"SAR",
	"SBD",
	"SCR",
	"SDG",
	"SEK",
	"SGD",
	"SHP",
	"SLL",
	"SOS",
	"SPL",
	"SRD",
	"STD",
	"SVC",
	"SYP",
	"SZL",
	"THB",
	"TJS",
	"TMT",
	"TND",
	"TOP",
	"TRY",
	"TTD",
	"TVD",
	"TWD",
	"TZS",
	"UAH",
	"UGX",
	"USD",
	"UYU",
	"UZS",
	"VEF",
	"VND",
	"VUV",
	"WST",
	"XAF",
	"XCD",
	"XOF",
	"XPF",
	"YER",
	"ZAR",
	"ZMW",
	"ZWD",
}

func (v *Currency) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Currency(value)
	for _, existing := range AllowedCurrencyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Currency", value)
}

// NewCurrencyFromValue returns a pointer to a valid Currency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCurrencyFromValue(v string) (*Currency, error) {
	ev := Currency(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Currency: valid values are %v", v, AllowedCurrencyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Currency) IsValid() bool {
	for _, existing := range AllowedCurrencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Currency value
func (v Currency) Ptr() *Currency {
	return &v
}

type NullableCurrency struct {
	value *Currency
	isSet bool
}

func (v NullableCurrency) Get() *Currency {
	return v.value
}

func (v *NullableCurrency) Set(val *Currency) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrency) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrency(val *Currency) *NullableCurrency {
	return &NullableCurrency{value: val, isSet: true}
}

func (v NullableCurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
