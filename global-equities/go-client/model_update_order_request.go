/*
Pi.GlobalEquities.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"encoding/json"
)

// checks if the UpdateOrderRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateOrderRequest{}

// UpdateOrderRequest struct for UpdateOrderRequest
type UpdateOrderRequest struct {
	Quantity   *float32        `json:"quantity,omitempty"`
	LimitPrice NullableFloat32 `json:"limitPrice,omitempty"`
	StopPrice  NullableFloat32 `json:"stopPrice,omitempty"`
}

// NewUpdateOrderRequest instantiates a new UpdateOrderRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateOrderRequest() *UpdateOrderRequest {
	this := UpdateOrderRequest{}
	return &this
}

// NewUpdateOrderRequestWithDefaults instantiates a new UpdateOrderRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateOrderRequestWithDefaults() *UpdateOrderRequest {
	this := UpdateOrderRequest{}
	return &this
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *UpdateOrderRequest) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateOrderRequest) GetQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *UpdateOrderRequest) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *UpdateOrderRequest) SetQuantity(v float32) {
	o.Quantity = &v
}

// GetLimitPrice returns the LimitPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateOrderRequest) GetLimitPrice() float32 {
	if o == nil || IsNil(o.LimitPrice.Get()) {
		var ret float32
		return ret
	}
	return *o.LimitPrice.Get()
}

// GetLimitPriceOk returns a tuple with the LimitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateOrderRequest) GetLimitPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LimitPrice.Get(), o.LimitPrice.IsSet()
}

// HasLimitPrice returns a boolean if a field has been set.
func (o *UpdateOrderRequest) HasLimitPrice() bool {
	if o != nil && o.LimitPrice.IsSet() {
		return true
	}

	return false
}

// SetLimitPrice gets a reference to the given NullableFloat32 and assigns it to the LimitPrice field.
func (o *UpdateOrderRequest) SetLimitPrice(v float32) {
	o.LimitPrice.Set(&v)
}

// SetLimitPriceNil sets the value for LimitPrice to be an explicit nil
func (o *UpdateOrderRequest) SetLimitPriceNil() {
	o.LimitPrice.Set(nil)
}

// UnsetLimitPrice ensures that no value is present for LimitPrice, not even an explicit nil
func (o *UpdateOrderRequest) UnsetLimitPrice() {
	o.LimitPrice.Unset()
}

// GetStopPrice returns the StopPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateOrderRequest) GetStopPrice() float32 {
	if o == nil || IsNil(o.StopPrice.Get()) {
		var ret float32
		return ret
	}
	return *o.StopPrice.Get()
}

// GetStopPriceOk returns a tuple with the StopPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateOrderRequest) GetStopPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StopPrice.Get(), o.StopPrice.IsSet()
}

// HasStopPrice returns a boolean if a field has been set.
func (o *UpdateOrderRequest) HasStopPrice() bool {
	if o != nil && o.StopPrice.IsSet() {
		return true
	}

	return false
}

// SetStopPrice gets a reference to the given NullableFloat32 and assigns it to the StopPrice field.
func (o *UpdateOrderRequest) SetStopPrice(v float32) {
	o.StopPrice.Set(&v)
}

// SetStopPriceNil sets the value for StopPrice to be an explicit nil
func (o *UpdateOrderRequest) SetStopPriceNil() {
	o.StopPrice.Set(nil)
}

// UnsetStopPrice ensures that no value is present for StopPrice, not even an explicit nil
func (o *UpdateOrderRequest) UnsetStopPrice() {
	o.StopPrice.Unset()
}

func (o UpdateOrderRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateOrderRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if o.LimitPrice.IsSet() {
		toSerialize["limitPrice"] = o.LimitPrice.Get()
	}
	if o.StopPrice.IsSet() {
		toSerialize["stopPrice"] = o.StopPrice.Get()
	}
	return toSerialize, nil
}

type NullableUpdateOrderRequest struct {
	value *UpdateOrderRequest
	isSet bool
}

func (v NullableUpdateOrderRequest) Get() *UpdateOrderRequest {
	return v.value
}

func (v *NullableUpdateOrderRequest) Set(val *UpdateOrderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateOrderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateOrderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateOrderRequest(val *UpdateOrderRequest) *NullableUpdateOrderRequest {
	return &NullableUpdateOrderRequest{value: val, isSet: true}
}

func (v NullableUpdateOrderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateOrderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
