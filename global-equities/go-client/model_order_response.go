/*
Pi.GlobalEquities.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"encoding/json"
	"time"
)

// checks if the OrderResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderResponse{}

// OrderResponse struct for OrderResponse
type OrderResponse struct {
	Id                NullableString  `json:"id,omitempty"`
	AccountId         NullableString  `json:"accountId,omitempty"`
	Venue             NullableString  `json:"venue,omitempty"`
	Symbol            NullableString  `json:"symbol,omitempty"`
	SymbolId          NullableString  `json:"symbolId,omitempty"`
	OrderType         *OrderType      `json:"orderType,omitempty"`
	Side              *OrderSide      `json:"side,omitempty"`
	Status            *OrderStatus    `json:"status,omitempty"`
	Currency          *Currency       `json:"currency,omitempty"`
	LimitPrice        NullableFloat32 `json:"limitPrice,omitempty"`
	StopPrice         NullableFloat32 `json:"stopPrice,omitempty"`
	AverageFillPrice  NullableFloat32 `json:"averageFillPrice,omitempty"`
	Quantity          *float32        `json:"quantity,omitempty"`
	QuantityFilled    *float32        `json:"quantityFilled,omitempty"`
	QuantityCancelled *float32        `json:"quantityCancelled,omitempty"`
	Provider          *Provider       `json:"provider,omitempty"`
	StatusReason      *OrderReason    `json:"statusReason,omitempty"`
	// Deprecated
	AsOfDate        *time.Time                `json:"asOfDate,omitempty"`
	CreatedAt       *time.Time                `json:"createdAt,omitempty"`
	UpdatedAt       *time.Time                `json:"updatedAt,omitempty"`
	Logo            NullableString            `json:"logo,omitempty"`
	TransactionInfo *OrderTransactionResponse `json:"transactionInfo,omitempty"`
}

// NewOrderResponse instantiates a new OrderResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderResponse() *OrderResponse {
	this := OrderResponse{}
	return &this
}

// NewOrderResponseWithDefaults instantiates a new OrderResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderResponseWithDefaults() *OrderResponse {
	this := OrderResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderResponse) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *OrderResponse) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *OrderResponse) SetId(v string) {
	o.Id.Set(&v)
}

// SetIdNil sets the value for Id to be an explicit nil
func (o *OrderResponse) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *OrderResponse) UnsetId() {
	o.Id.Unset()
}

// GetAccountId returns the AccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderResponse) GetAccountId() string {
	if o == nil || IsNil(o.AccountId.Get()) {
		var ret string
		return ret
	}
	return *o.AccountId.Get()
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderResponse) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountId.Get(), o.AccountId.IsSet()
}

// HasAccountId returns a boolean if a field has been set.
func (o *OrderResponse) HasAccountId() bool {
	if o != nil && o.AccountId.IsSet() {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given NullableString and assigns it to the AccountId field.
func (o *OrderResponse) SetAccountId(v string) {
	o.AccountId.Set(&v)
}

// SetAccountIdNil sets the value for AccountId to be an explicit nil
func (o *OrderResponse) SetAccountIdNil() {
	o.AccountId.Set(nil)
}

// UnsetAccountId ensures that no value is present for AccountId, not even an explicit nil
func (o *OrderResponse) UnsetAccountId() {
	o.AccountId.Unset()
}

// GetVenue returns the Venue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderResponse) GetVenue() string {
	if o == nil || IsNil(o.Venue.Get()) {
		var ret string
		return ret
	}
	return *o.Venue.Get()
}

// GetVenueOk returns a tuple with the Venue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderResponse) GetVenueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Venue.Get(), o.Venue.IsSet()
}

// HasVenue returns a boolean if a field has been set.
func (o *OrderResponse) HasVenue() bool {
	if o != nil && o.Venue.IsSet() {
		return true
	}

	return false
}

// SetVenue gets a reference to the given NullableString and assigns it to the Venue field.
func (o *OrderResponse) SetVenue(v string) {
	o.Venue.Set(&v)
}

// SetVenueNil sets the value for Venue to be an explicit nil
func (o *OrderResponse) SetVenueNil() {
	o.Venue.Set(nil)
}

// UnsetVenue ensures that no value is present for Venue, not even an explicit nil
func (o *OrderResponse) UnsetVenue() {
	o.Venue.Unset()
}

// GetSymbol returns the Symbol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderResponse) GetSymbol() string {
	if o == nil || IsNil(o.Symbol.Get()) {
		var ret string
		return ret
	}
	return *o.Symbol.Get()
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderResponse) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Symbol.Get(), o.Symbol.IsSet()
}

// HasSymbol returns a boolean if a field has been set.
func (o *OrderResponse) HasSymbol() bool {
	if o != nil && o.Symbol.IsSet() {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given NullableString and assigns it to the Symbol field.
func (o *OrderResponse) SetSymbol(v string) {
	o.Symbol.Set(&v)
}

// SetSymbolNil sets the value for Symbol to be an explicit nil
func (o *OrderResponse) SetSymbolNil() {
	o.Symbol.Set(nil)
}

// UnsetSymbol ensures that no value is present for Symbol, not even an explicit nil
func (o *OrderResponse) UnsetSymbol() {
	o.Symbol.Unset()
}

// GetSymbolId returns the SymbolId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderResponse) GetSymbolId() string {
	if o == nil || IsNil(o.SymbolId.Get()) {
		var ret string
		return ret
	}
	return *o.SymbolId.Get()
}

// GetSymbolIdOk returns a tuple with the SymbolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderResponse) GetSymbolIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SymbolId.Get(), o.SymbolId.IsSet()
}

// HasSymbolId returns a boolean if a field has been set.
func (o *OrderResponse) HasSymbolId() bool {
	if o != nil && o.SymbolId.IsSet() {
		return true
	}

	return false
}

// SetSymbolId gets a reference to the given NullableString and assigns it to the SymbolId field.
func (o *OrderResponse) SetSymbolId(v string) {
	o.SymbolId.Set(&v)
}

// SetSymbolIdNil sets the value for SymbolId to be an explicit nil
func (o *OrderResponse) SetSymbolIdNil() {
	o.SymbolId.Set(nil)
}

// UnsetSymbolId ensures that no value is present for SymbolId, not even an explicit nil
func (o *OrderResponse) UnsetSymbolId() {
	o.SymbolId.Unset()
}

// GetOrderType returns the OrderType field value if set, zero value otherwise.
func (o *OrderResponse) GetOrderType() OrderType {
	if o == nil || IsNil(o.OrderType) {
		var ret OrderType
		return ret
	}
	return *o.OrderType
}

// GetOrderTypeOk returns a tuple with the OrderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderResponse) GetOrderTypeOk() (*OrderType, bool) {
	if o == nil || IsNil(o.OrderType) {
		return nil, false
	}
	return o.OrderType, true
}

// HasOrderType returns a boolean if a field has been set.
func (o *OrderResponse) HasOrderType() bool {
	if o != nil && !IsNil(o.OrderType) {
		return true
	}

	return false
}

// SetOrderType gets a reference to the given OrderType and assigns it to the OrderType field.
func (o *OrderResponse) SetOrderType(v OrderType) {
	o.OrderType = &v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *OrderResponse) GetSide() OrderSide {
	if o == nil || IsNil(o.Side) {
		var ret OrderSide
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderResponse) GetSideOk() (*OrderSide, bool) {
	if o == nil || IsNil(o.Side) {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *OrderResponse) HasSide() bool {
	if o != nil && !IsNil(o.Side) {
		return true
	}

	return false
}

// SetSide gets a reference to the given OrderSide and assigns it to the Side field.
func (o *OrderResponse) SetSide(v OrderSide) {
	o.Side = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *OrderResponse) GetStatus() OrderStatus {
	if o == nil || IsNil(o.Status) {
		var ret OrderStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderResponse) GetStatusOk() (*OrderStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *OrderResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given OrderStatus and assigns it to the Status field.
func (o *OrderResponse) SetStatus(v OrderStatus) {
	o.Status = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *OrderResponse) GetCurrency() Currency {
	if o == nil || IsNil(o.Currency) {
		var ret Currency
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderResponse) GetCurrencyOk() (*Currency, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *OrderResponse) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given Currency and assigns it to the Currency field.
func (o *OrderResponse) SetCurrency(v Currency) {
	o.Currency = &v
}

// GetLimitPrice returns the LimitPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderResponse) GetLimitPrice() float32 {
	if o == nil || IsNil(o.LimitPrice.Get()) {
		var ret float32
		return ret
	}
	return *o.LimitPrice.Get()
}

// GetLimitPriceOk returns a tuple with the LimitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderResponse) GetLimitPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LimitPrice.Get(), o.LimitPrice.IsSet()
}

// HasLimitPrice returns a boolean if a field has been set.
func (o *OrderResponse) HasLimitPrice() bool {
	if o != nil && o.LimitPrice.IsSet() {
		return true
	}

	return false
}

// SetLimitPrice gets a reference to the given NullableFloat32 and assigns it to the LimitPrice field.
func (o *OrderResponse) SetLimitPrice(v float32) {
	o.LimitPrice.Set(&v)
}

// SetLimitPriceNil sets the value for LimitPrice to be an explicit nil
func (o *OrderResponse) SetLimitPriceNil() {
	o.LimitPrice.Set(nil)
}

// UnsetLimitPrice ensures that no value is present for LimitPrice, not even an explicit nil
func (o *OrderResponse) UnsetLimitPrice() {
	o.LimitPrice.Unset()
}

// GetStopPrice returns the StopPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderResponse) GetStopPrice() float32 {
	if o == nil || IsNil(o.StopPrice.Get()) {
		var ret float32
		return ret
	}
	return *o.StopPrice.Get()
}

// GetStopPriceOk returns a tuple with the StopPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderResponse) GetStopPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StopPrice.Get(), o.StopPrice.IsSet()
}

// HasStopPrice returns a boolean if a field has been set.
func (o *OrderResponse) HasStopPrice() bool {
	if o != nil && o.StopPrice.IsSet() {
		return true
	}

	return false
}

// SetStopPrice gets a reference to the given NullableFloat32 and assigns it to the StopPrice field.
func (o *OrderResponse) SetStopPrice(v float32) {
	o.StopPrice.Set(&v)
}

// SetStopPriceNil sets the value for StopPrice to be an explicit nil
func (o *OrderResponse) SetStopPriceNil() {
	o.StopPrice.Set(nil)
}

// UnsetStopPrice ensures that no value is present for StopPrice, not even an explicit nil
func (o *OrderResponse) UnsetStopPrice() {
	o.StopPrice.Unset()
}

// GetAverageFillPrice returns the AverageFillPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderResponse) GetAverageFillPrice() float32 {
	if o == nil || IsNil(o.AverageFillPrice.Get()) {
		var ret float32
		return ret
	}
	return *o.AverageFillPrice.Get()
}

// GetAverageFillPriceOk returns a tuple with the AverageFillPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderResponse) GetAverageFillPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AverageFillPrice.Get(), o.AverageFillPrice.IsSet()
}

// HasAverageFillPrice returns a boolean if a field has been set.
func (o *OrderResponse) HasAverageFillPrice() bool {
	if o != nil && o.AverageFillPrice.IsSet() {
		return true
	}

	return false
}

// SetAverageFillPrice gets a reference to the given NullableFloat32 and assigns it to the AverageFillPrice field.
func (o *OrderResponse) SetAverageFillPrice(v float32) {
	o.AverageFillPrice.Set(&v)
}

// SetAverageFillPriceNil sets the value for AverageFillPrice to be an explicit nil
func (o *OrderResponse) SetAverageFillPriceNil() {
	o.AverageFillPrice.Set(nil)
}

// UnsetAverageFillPrice ensures that no value is present for AverageFillPrice, not even an explicit nil
func (o *OrderResponse) UnsetAverageFillPrice() {
	o.AverageFillPrice.Unset()
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *OrderResponse) GetQuantity() float32 {
	if o == nil || IsNil(o.Quantity) {
		var ret float32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderResponse) GetQuantityOk() (*float32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *OrderResponse) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float32 and assigns it to the Quantity field.
func (o *OrderResponse) SetQuantity(v float32) {
	o.Quantity = &v
}

// GetQuantityFilled returns the QuantityFilled field value if set, zero value otherwise.
func (o *OrderResponse) GetQuantityFilled() float32 {
	if o == nil || IsNil(o.QuantityFilled) {
		var ret float32
		return ret
	}
	return *o.QuantityFilled
}

// GetQuantityFilledOk returns a tuple with the QuantityFilled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderResponse) GetQuantityFilledOk() (*float32, bool) {
	if o == nil || IsNil(o.QuantityFilled) {
		return nil, false
	}
	return o.QuantityFilled, true
}

// HasQuantityFilled returns a boolean if a field has been set.
func (o *OrderResponse) HasQuantityFilled() bool {
	if o != nil && !IsNil(o.QuantityFilled) {
		return true
	}

	return false
}

// SetQuantityFilled gets a reference to the given float32 and assigns it to the QuantityFilled field.
func (o *OrderResponse) SetQuantityFilled(v float32) {
	o.QuantityFilled = &v
}

// GetQuantityCancelled returns the QuantityCancelled field value if set, zero value otherwise.
func (o *OrderResponse) GetQuantityCancelled() float32 {
	if o == nil || IsNil(o.QuantityCancelled) {
		var ret float32
		return ret
	}
	return *o.QuantityCancelled
}

// GetQuantityCancelledOk returns a tuple with the QuantityCancelled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderResponse) GetQuantityCancelledOk() (*float32, bool) {
	if o == nil || IsNil(o.QuantityCancelled) {
		return nil, false
	}
	return o.QuantityCancelled, true
}

// HasQuantityCancelled returns a boolean if a field has been set.
func (o *OrderResponse) HasQuantityCancelled() bool {
	if o != nil && !IsNil(o.QuantityCancelled) {
		return true
	}

	return false
}

// SetQuantityCancelled gets a reference to the given float32 and assigns it to the QuantityCancelled field.
func (o *OrderResponse) SetQuantityCancelled(v float32) {
	o.QuantityCancelled = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *OrderResponse) GetProvider() Provider {
	if o == nil || IsNil(o.Provider) {
		var ret Provider
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderResponse) GetProviderOk() (*Provider, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *OrderResponse) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given Provider and assigns it to the Provider field.
func (o *OrderResponse) SetProvider(v Provider) {
	o.Provider = &v
}

// GetStatusReason returns the StatusReason field value if set, zero value otherwise.
func (o *OrderResponse) GetStatusReason() OrderReason {
	if o == nil || IsNil(o.StatusReason) {
		var ret OrderReason
		return ret
	}
	return *o.StatusReason
}

// GetStatusReasonOk returns a tuple with the StatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderResponse) GetStatusReasonOk() (*OrderReason, bool) {
	if o == nil || IsNil(o.StatusReason) {
		return nil, false
	}
	return o.StatusReason, true
}

// HasStatusReason returns a boolean if a field has been set.
func (o *OrderResponse) HasStatusReason() bool {
	if o != nil && !IsNil(o.StatusReason) {
		return true
	}

	return false
}

// SetStatusReason gets a reference to the given OrderReason and assigns it to the StatusReason field.
func (o *OrderResponse) SetStatusReason(v OrderReason) {
	o.StatusReason = &v
}

// GetAsOfDate returns the AsOfDate field value if set, zero value otherwise.
// Deprecated
func (o *OrderResponse) GetAsOfDate() time.Time {
	if o == nil || IsNil(o.AsOfDate) {
		var ret time.Time
		return ret
	}
	return *o.AsOfDate
}

// GetAsOfDateOk returns a tuple with the AsOfDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *OrderResponse) GetAsOfDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AsOfDate) {
		return nil, false
	}
	return o.AsOfDate, true
}

// HasAsOfDate returns a boolean if a field has been set.
func (o *OrderResponse) HasAsOfDate() bool {
	if o != nil && !IsNil(o.AsOfDate) {
		return true
	}

	return false
}

// SetAsOfDate gets a reference to the given time.Time and assigns it to the AsOfDate field.
// Deprecated
func (o *OrderResponse) SetAsOfDate(v time.Time) {
	o.AsOfDate = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *OrderResponse) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *OrderResponse) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *OrderResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *OrderResponse) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *OrderResponse) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *OrderResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OrderResponse) GetLogo() string {
	if o == nil || IsNil(o.Logo.Get()) {
		var ret string
		return ret
	}
	return *o.Logo.Get()
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OrderResponse) GetLogoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Logo.Get(), o.Logo.IsSet()
}

// HasLogo returns a boolean if a field has been set.
func (o *OrderResponse) HasLogo() bool {
	if o != nil && o.Logo.IsSet() {
		return true
	}

	return false
}

// SetLogo gets a reference to the given NullableString and assigns it to the Logo field.
func (o *OrderResponse) SetLogo(v string) {
	o.Logo.Set(&v)
}

// SetLogoNil sets the value for Logo to be an explicit nil
func (o *OrderResponse) SetLogoNil() {
	o.Logo.Set(nil)
}

// UnsetLogo ensures that no value is present for Logo, not even an explicit nil
func (o *OrderResponse) UnsetLogo() {
	o.Logo.Unset()
}

// GetTransactionInfo returns the TransactionInfo field value if set, zero value otherwise.
func (o *OrderResponse) GetTransactionInfo() OrderTransactionResponse {
	if o == nil || IsNil(o.TransactionInfo) {
		var ret OrderTransactionResponse
		return ret
	}
	return *o.TransactionInfo
}

// GetTransactionInfoOk returns a tuple with the TransactionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderResponse) GetTransactionInfoOk() (*OrderTransactionResponse, bool) {
	if o == nil || IsNil(o.TransactionInfo) {
		return nil, false
	}
	return o.TransactionInfo, true
}

// HasTransactionInfo returns a boolean if a field has been set.
func (o *OrderResponse) HasTransactionInfo() bool {
	if o != nil && !IsNil(o.TransactionInfo) {
		return true
	}

	return false
}

// SetTransactionInfo gets a reference to the given OrderTransactionResponse and assigns it to the TransactionInfo field.
func (o *OrderResponse) SetTransactionInfo(v OrderTransactionResponse) {
	o.TransactionInfo = &v
}

func (o OrderResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.AccountId.IsSet() {
		toSerialize["accountId"] = o.AccountId.Get()
	}
	if o.Venue.IsSet() {
		toSerialize["venue"] = o.Venue.Get()
	}
	if o.Symbol.IsSet() {
		toSerialize["symbol"] = o.Symbol.Get()
	}
	if o.SymbolId.IsSet() {
		toSerialize["symbolId"] = o.SymbolId.Get()
	}
	if !IsNil(o.OrderType) {
		toSerialize["orderType"] = o.OrderType
	}
	if !IsNil(o.Side) {
		toSerialize["side"] = o.Side
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if o.LimitPrice.IsSet() {
		toSerialize["limitPrice"] = o.LimitPrice.Get()
	}
	if o.StopPrice.IsSet() {
		toSerialize["stopPrice"] = o.StopPrice.Get()
	}
	if o.AverageFillPrice.IsSet() {
		toSerialize["averageFillPrice"] = o.AverageFillPrice.Get()
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.QuantityFilled) {
		toSerialize["quantityFilled"] = o.QuantityFilled
	}
	if !IsNil(o.QuantityCancelled) {
		toSerialize["quantityCancelled"] = o.QuantityCancelled
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.StatusReason) {
		toSerialize["statusReason"] = o.StatusReason
	}
	if !IsNil(o.AsOfDate) {
		toSerialize["asOfDate"] = o.AsOfDate
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if o.Logo.IsSet() {
		toSerialize["logo"] = o.Logo.Get()
	}
	if !IsNil(o.TransactionInfo) {
		toSerialize["transactionInfo"] = o.TransactionInfo
	}
	return toSerialize, nil
}

type NullableOrderResponse struct {
	value *OrderResponse
	isSet bool
}

func (v NullableOrderResponse) Get() *OrderResponse {
	return v.value
}

func (v *NullableOrderResponse) Set(val *OrderResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderResponse(val *OrderResponse) *NullableOrderResponse {
	return &NullableOrderResponse{value: val, isSet: true}
}

func (v NullableOrderResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
