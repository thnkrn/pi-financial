/*
Pi.GlobalEquities.API, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package go_client

import (
	"encoding/json"
	"fmt"
)

// OrderReason the model 'OrderReason'
type OrderReason string

// List of OrderReason
const (
	ORDERREASON_UNKNOWN                      OrderReason = "Unknown"
	ORDERREASON_INSUFFICIENT_FUND            OrderReason = "InsufficientFund"
	ORDERREASON_INCORRECT_QUANTITY           OrderReason = "IncorrectQuantity"
	ORDERREASON_INVALID_PRICE                OrderReason = "InvalidPrice"
	ORDERREASON_OPERATION_REJECTED           OrderReason = "OperationRejected"
	ORDERREASON_WAITING_PARENT_EXECUTION     OrderReason = "WaitingParentExecution"
	ORDERREASON_WAITING_NEXT_TRADING_SESSION OrderReason = "WaitingNextTradingSession"
)

// All allowed values of OrderReason enum
var AllowedOrderReasonEnumValues = []OrderReason{
	"Unknown",
	"InsufficientFund",
	"IncorrectQuantity",
	"InvalidPrice",
	"OperationRejected",
	"WaitingParentExecution",
	"WaitingNextTradingSession",
}

func (v *OrderReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderReason(value)
	for _, existing := range AllowedOrderReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderReason", value)
}

// NewOrderReasonFromValue returns a pointer to a valid OrderReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderReasonFromValue(v string) (*OrderReason, error) {
	ev := OrderReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderReason: valid values are %v", v, AllowedOrderReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderReason) IsValid() bool {
	for _, existing := range AllowedOrderReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderReason value
func (v OrderReason) Ptr() *OrderReason {
	return &v
}

type NullableOrderReason struct {
	value *OrderReason
	isSet bool
}

func (v NullableOrderReason) Get() *OrderReason {
	return v.value
}

func (v *NullableOrderReason) Set(val *OrderReason) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderReason) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderReason(val *OrderReason) *NullableOrderReason {
	return &NullableOrderReason{value: val, isSet: true}
}

func (v NullableOrderReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
