// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/pi-financial/bond-srv/cmd/api"
	"github.com/pi-financial/bond-srv/config"
	adapter2 "github.com/pi-financial/bond-srv/internal/adapter"
	adapter3 "github.com/pi-financial/bond-srv/internal/driver/cache/adapter"
	"github.com/pi-financial/bond-srv/internal/driver/growthbook"
	"github.com/pi-financial/bond-srv/internal/driver/http"
	"github.com/pi-financial/bond-srv/internal/driver/log/adapter"
	config2 "github.com/pi-financial/bond-srv/internal/driver/log/config"
	"github.com/pi-financial/bond-srv/internal/driver/mysql"
	"github.com/pi-financial/bond-srv/internal/handler"
	"github.com/pi-financial/bond-srv/internal/middleware"
	"github.com/pi-financial/bond-srv/internal/repository"
	"github.com/pi-financial/bond-srv/internal/service"
)

// Injectors from wire.go:

func InitializeAPI(cfg config.Config) (*api.ServerHTTP, error) {
	logger, err := config2.ProvidZapLogger()
	if err != nil {
		return nil, err
	}
	zapImplement := adapter.ProvideLogger(logger)
	echoErrorHandler := middleware.NewEchoErrorHandler()
	echoHeaderValidation := middleware.NewEchoHeaderValidation()
	echoContext := middleware.NewEchoContext()
	growthBookClient, err := growthbook.ConnectGrowthbook(cfg)
	if err != nil {
		return nil, err
	}
	middlewares := &api.Middlewares{
		ErrorHandler:     echoErrorHandler,
		HeaderValidation: echoHeaderValidation,
		Context:          echoContext,
		GrowthBookClient: growthBookClient,
	}
	featureService := service.NewFeatureService(growthBookClient)
	oneportAdapter := adapter2.NewOnePortAdapter(cfg)
	db, err := mysql.ConnectDatabase(cfg)
	if err != nil {
		return nil, err
	}
	bondRepository := repository.NewBondRepository(db)
	client := http.NewHttpClient()
	cacheAdapter := adapter3.NewCache()
	marketDataAdapter := adapter2.NewFisApi(cfg, client, zapImplement, cacheAdapter)
	marketDataService := service.NewMarketDataService(bondRepository, marketDataAdapter, zapImplement)
	userAdapter := adapter2.NewUserAdapter(cfg)
	userV2Adapter := adapter2.NewUserV2Adapter(cfg)
	portfolioV2Adapter := adapter2.NewPortfolioV2Api(cfg, zapImplement)
	accountService := service.NewAccountService(zapImplement, cfg, featureService, oneportAdapter, marketDataService, userAdapter, userV2Adapter, portfolioV2Adapter, client)
	accountHandler := handler.NewAccountHandler(accountService, zapImplement)
	bondHandler := handler.NewBondHandler(marketDataService, zapImplement)
	handlers := api.Handlers{
		AccountHandler:    accountHandler,
		MarketDataHandler: bondHandler,
	}
	serverHTTP := api.NewServerHTTP(zapImplement, middlewares, handlers, cfg)
	return serverHTTP, nil
}
