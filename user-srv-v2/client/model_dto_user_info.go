/*
Pi User Service V2

Contain Generic Information.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the DtoUserInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoUserInfo{}

// DtoUserInfo struct for DtoUserInfo
type DtoUserInfo struct {
	CitizenId *string  `json:"citizenId,omitempty"`
	CustCodes []string `json:"custCodes,omitempty"`
	// 2024-12-27
	DateOfBirth     *string     `json:"dateOfBirth,omitempty"`
	Devices         []DtoDevice `json:"devices,omitempty"`
	Email           *string     `json:"email,omitempty"`
	FirstnameEn     *string     `json:"firstnameEn,omitempty"`
	FirstnameTh     *string     `json:"firstnameTh,omitempty"`
	Id              *string     `json:"id,omitempty"`
	LastnameEn      *string     `json:"lastnameEn,omitempty"`
	LastnameTh      *string     `json:"lastnameTh,omitempty"`
	PhoneNumber     *string     `json:"phoneNumber,omitempty"`
	TradingAccounts []string    `json:"tradingAccounts,omitempty"`
	WealthType      *string     `json:"wealthType,omitempty"`
}

// NewDtoUserInfo instantiates a new DtoUserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoUserInfo() *DtoUserInfo {
	this := DtoUserInfo{}
	return &this
}

// NewDtoUserInfoWithDefaults instantiates a new DtoUserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoUserInfoWithDefaults() *DtoUserInfo {
	this := DtoUserInfo{}
	return &this
}

// GetCitizenId returns the CitizenId field value if set, zero value otherwise.
func (o *DtoUserInfo) GetCitizenId() string {
	if o == nil || IsNil(o.CitizenId) {
		var ret string
		return ret
	}
	return *o.CitizenId
}

// GetCitizenIdOk returns a tuple with the CitizenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUserInfo) GetCitizenIdOk() (*string, bool) {
	if o == nil || IsNil(o.CitizenId) {
		return nil, false
	}
	return o.CitizenId, true
}

// HasCitizenId returns a boolean if a field has been set.
func (o *DtoUserInfo) HasCitizenId() bool {
	if o != nil && !IsNil(o.CitizenId) {
		return true
	}

	return false
}

// SetCitizenId gets a reference to the given string and assigns it to the CitizenId field.
func (o *DtoUserInfo) SetCitizenId(v string) {
	o.CitizenId = &v
}

// GetCustCodes returns the CustCodes field value if set, zero value otherwise.
func (o *DtoUserInfo) GetCustCodes() []string {
	if o == nil || IsNil(o.CustCodes) {
		var ret []string
		return ret
	}
	return o.CustCodes
}

// GetCustCodesOk returns a tuple with the CustCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUserInfo) GetCustCodesOk() ([]string, bool) {
	if o == nil || IsNil(o.CustCodes) {
		return nil, false
	}
	return o.CustCodes, true
}

// HasCustCodes returns a boolean if a field has been set.
func (o *DtoUserInfo) HasCustCodes() bool {
	if o != nil && !IsNil(o.CustCodes) {
		return true
	}

	return false
}

// SetCustCodes gets a reference to the given []string and assigns it to the CustCodes field.
func (o *DtoUserInfo) SetCustCodes(v []string) {
	o.CustCodes = v
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise.
func (o *DtoUserInfo) GetDateOfBirth() string {
	if o == nil || IsNil(o.DateOfBirth) {
		var ret string
		return ret
	}
	return *o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUserInfo) GetDateOfBirthOk() (*string, bool) {
	if o == nil || IsNil(o.DateOfBirth) {
		return nil, false
	}
	return o.DateOfBirth, true
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *DtoUserInfo) HasDateOfBirth() bool {
	if o != nil && !IsNil(o.DateOfBirth) {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given string and assigns it to the DateOfBirth field.
func (o *DtoUserInfo) SetDateOfBirth(v string) {
	o.DateOfBirth = &v
}

// GetDevices returns the Devices field value if set, zero value otherwise.
func (o *DtoUserInfo) GetDevices() []DtoDevice {
	if o == nil || IsNil(o.Devices) {
		var ret []DtoDevice
		return ret
	}
	return o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUserInfo) GetDevicesOk() ([]DtoDevice, bool) {
	if o == nil || IsNil(o.Devices) {
		return nil, false
	}
	return o.Devices, true
}

// HasDevices returns a boolean if a field has been set.
func (o *DtoUserInfo) HasDevices() bool {
	if o != nil && !IsNil(o.Devices) {
		return true
	}

	return false
}

// SetDevices gets a reference to the given []DtoDevice and assigns it to the Devices field.
func (o *DtoUserInfo) SetDevices(v []DtoDevice) {
	o.Devices = v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *DtoUserInfo) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUserInfo) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *DtoUserInfo) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *DtoUserInfo) SetEmail(v string) {
	o.Email = &v
}

// GetFirstnameEn returns the FirstnameEn field value if set, zero value otherwise.
func (o *DtoUserInfo) GetFirstnameEn() string {
	if o == nil || IsNil(o.FirstnameEn) {
		var ret string
		return ret
	}
	return *o.FirstnameEn
}

// GetFirstnameEnOk returns a tuple with the FirstnameEn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUserInfo) GetFirstnameEnOk() (*string, bool) {
	if o == nil || IsNil(o.FirstnameEn) {
		return nil, false
	}
	return o.FirstnameEn, true
}

// HasFirstnameEn returns a boolean if a field has been set.
func (o *DtoUserInfo) HasFirstnameEn() bool {
	if o != nil && !IsNil(o.FirstnameEn) {
		return true
	}

	return false
}

// SetFirstnameEn gets a reference to the given string and assigns it to the FirstnameEn field.
func (o *DtoUserInfo) SetFirstnameEn(v string) {
	o.FirstnameEn = &v
}

// GetFirstnameTh returns the FirstnameTh field value if set, zero value otherwise.
func (o *DtoUserInfo) GetFirstnameTh() string {
	if o == nil || IsNil(o.FirstnameTh) {
		var ret string
		return ret
	}
	return *o.FirstnameTh
}

// GetFirstnameThOk returns a tuple with the FirstnameTh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUserInfo) GetFirstnameThOk() (*string, bool) {
	if o == nil || IsNil(o.FirstnameTh) {
		return nil, false
	}
	return o.FirstnameTh, true
}

// HasFirstnameTh returns a boolean if a field has been set.
func (o *DtoUserInfo) HasFirstnameTh() bool {
	if o != nil && !IsNil(o.FirstnameTh) {
		return true
	}

	return false
}

// SetFirstnameTh gets a reference to the given string and assigns it to the FirstnameTh field.
func (o *DtoUserInfo) SetFirstnameTh(v string) {
	o.FirstnameTh = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DtoUserInfo) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUserInfo) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DtoUserInfo) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DtoUserInfo) SetId(v string) {
	o.Id = &v
}

// GetLastnameEn returns the LastnameEn field value if set, zero value otherwise.
func (o *DtoUserInfo) GetLastnameEn() string {
	if o == nil || IsNil(o.LastnameEn) {
		var ret string
		return ret
	}
	return *o.LastnameEn
}

// GetLastnameEnOk returns a tuple with the LastnameEn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUserInfo) GetLastnameEnOk() (*string, bool) {
	if o == nil || IsNil(o.LastnameEn) {
		return nil, false
	}
	return o.LastnameEn, true
}

// HasLastnameEn returns a boolean if a field has been set.
func (o *DtoUserInfo) HasLastnameEn() bool {
	if o != nil && !IsNil(o.LastnameEn) {
		return true
	}

	return false
}

// SetLastnameEn gets a reference to the given string and assigns it to the LastnameEn field.
func (o *DtoUserInfo) SetLastnameEn(v string) {
	o.LastnameEn = &v
}

// GetLastnameTh returns the LastnameTh field value if set, zero value otherwise.
func (o *DtoUserInfo) GetLastnameTh() string {
	if o == nil || IsNil(o.LastnameTh) {
		var ret string
		return ret
	}
	return *o.LastnameTh
}

// GetLastnameThOk returns a tuple with the LastnameTh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUserInfo) GetLastnameThOk() (*string, bool) {
	if o == nil || IsNil(o.LastnameTh) {
		return nil, false
	}
	return o.LastnameTh, true
}

// HasLastnameTh returns a boolean if a field has been set.
func (o *DtoUserInfo) HasLastnameTh() bool {
	if o != nil && !IsNil(o.LastnameTh) {
		return true
	}

	return false
}

// SetLastnameTh gets a reference to the given string and assigns it to the LastnameTh field.
func (o *DtoUserInfo) SetLastnameTh(v string) {
	o.LastnameTh = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *DtoUserInfo) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUserInfo) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *DtoUserInfo) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *DtoUserInfo) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetTradingAccounts returns the TradingAccounts field value if set, zero value otherwise.
func (o *DtoUserInfo) GetTradingAccounts() []string {
	if o == nil || IsNil(o.TradingAccounts) {
		var ret []string
		return ret
	}
	return o.TradingAccounts
}

// GetTradingAccountsOk returns a tuple with the TradingAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUserInfo) GetTradingAccountsOk() ([]string, bool) {
	if o == nil || IsNil(o.TradingAccounts) {
		return nil, false
	}
	return o.TradingAccounts, true
}

// HasTradingAccounts returns a boolean if a field has been set.
func (o *DtoUserInfo) HasTradingAccounts() bool {
	if o != nil && !IsNil(o.TradingAccounts) {
		return true
	}

	return false
}

// SetTradingAccounts gets a reference to the given []string and assigns it to the TradingAccounts field.
func (o *DtoUserInfo) SetTradingAccounts(v []string) {
	o.TradingAccounts = v
}

// GetWealthType returns the WealthType field value if set, zero value otherwise.
func (o *DtoUserInfo) GetWealthType() string {
	if o == nil || IsNil(o.WealthType) {
		var ret string
		return ret
	}
	return *o.WealthType
}

// GetWealthTypeOk returns a tuple with the WealthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUserInfo) GetWealthTypeOk() (*string, bool) {
	if o == nil || IsNil(o.WealthType) {
		return nil, false
	}
	return o.WealthType, true
}

// HasWealthType returns a boolean if a field has been set.
func (o *DtoUserInfo) HasWealthType() bool {
	if o != nil && !IsNil(o.WealthType) {
		return true
	}

	return false
}

// SetWealthType gets a reference to the given string and assigns it to the WealthType field.
func (o *DtoUserInfo) SetWealthType(v string) {
	o.WealthType = &v
}

func (o DtoUserInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoUserInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CitizenId) {
		toSerialize["citizenId"] = o.CitizenId
	}
	if !IsNil(o.CustCodes) {
		toSerialize["custCodes"] = o.CustCodes
	}
	if !IsNil(o.DateOfBirth) {
		toSerialize["dateOfBirth"] = o.DateOfBirth
	}
	if !IsNil(o.Devices) {
		toSerialize["devices"] = o.Devices
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.FirstnameEn) {
		toSerialize["firstnameEn"] = o.FirstnameEn
	}
	if !IsNil(o.FirstnameTh) {
		toSerialize["firstnameTh"] = o.FirstnameTh
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastnameEn) {
		toSerialize["lastnameEn"] = o.LastnameEn
	}
	if !IsNil(o.LastnameTh) {
		toSerialize["lastnameTh"] = o.LastnameTh
	}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if !IsNil(o.TradingAccounts) {
		toSerialize["tradingAccounts"] = o.TradingAccounts
	}
	if !IsNil(o.WealthType) {
		toSerialize["wealthType"] = o.WealthType
	}
	return toSerialize, nil
}

type NullableDtoUserInfo struct {
	value *DtoUserInfo
	isSet bool
}

func (v NullableDtoUserInfo) Get() *DtoUserInfo {
	return v.value
}

func (v *NullableDtoUserInfo) Set(val *DtoUserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoUserInfo(val *DtoUserInfo) *NullableDtoUserInfo {
	return &NullableDtoUserInfo{value: val, isSet: true}
}

func (v NullableDtoUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
