/*
Pi User Service V2

Contain Generic Information.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the DtoSuitabilityTestRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoSuitabilityTestRequest{}

// DtoSuitabilityTestRequest struct for DtoSuitabilityTestRequest
type DtoSuitabilityTestRequest struct {
	ExpiredDate *string `json:"expiredDate,omitempty"`
	Grade       *string `json:"grade,omitempty"`
	ReviewDate  *string `json:"reviewDate,omitempty"`
	Score       *int32  `json:"score,omitempty"`
	Version     *string `json:"version,omitempty"`
}

// NewDtoSuitabilityTestRequest instantiates a new DtoSuitabilityTestRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoSuitabilityTestRequest() *DtoSuitabilityTestRequest {
	this := DtoSuitabilityTestRequest{}
	return &this
}

// NewDtoSuitabilityTestRequestWithDefaults instantiates a new DtoSuitabilityTestRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoSuitabilityTestRequestWithDefaults() *DtoSuitabilityTestRequest {
	this := DtoSuitabilityTestRequest{}
	return &this
}

// GetExpiredDate returns the ExpiredDate field value if set, zero value otherwise.
func (o *DtoSuitabilityTestRequest) GetExpiredDate() string {
	if o == nil || IsNil(o.ExpiredDate) {
		var ret string
		return ret
	}
	return *o.ExpiredDate
}

// GetExpiredDateOk returns a tuple with the ExpiredDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSuitabilityTestRequest) GetExpiredDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiredDate) {
		return nil, false
	}
	return o.ExpiredDate, true
}

// HasExpiredDate returns a boolean if a field has been set.
func (o *DtoSuitabilityTestRequest) HasExpiredDate() bool {
	if o != nil && !IsNil(o.ExpiredDate) {
		return true
	}

	return false
}

// SetExpiredDate gets a reference to the given string and assigns it to the ExpiredDate field.
func (o *DtoSuitabilityTestRequest) SetExpiredDate(v string) {
	o.ExpiredDate = &v
}

// GetGrade returns the Grade field value if set, zero value otherwise.
func (o *DtoSuitabilityTestRequest) GetGrade() string {
	if o == nil || IsNil(o.Grade) {
		var ret string
		return ret
	}
	return *o.Grade
}

// GetGradeOk returns a tuple with the Grade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSuitabilityTestRequest) GetGradeOk() (*string, bool) {
	if o == nil || IsNil(o.Grade) {
		return nil, false
	}
	return o.Grade, true
}

// HasGrade returns a boolean if a field has been set.
func (o *DtoSuitabilityTestRequest) HasGrade() bool {
	if o != nil && !IsNil(o.Grade) {
		return true
	}

	return false
}

// SetGrade gets a reference to the given string and assigns it to the Grade field.
func (o *DtoSuitabilityTestRequest) SetGrade(v string) {
	o.Grade = &v
}

// GetReviewDate returns the ReviewDate field value if set, zero value otherwise.
func (o *DtoSuitabilityTestRequest) GetReviewDate() string {
	if o == nil || IsNil(o.ReviewDate) {
		var ret string
		return ret
	}
	return *o.ReviewDate
}

// GetReviewDateOk returns a tuple with the ReviewDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSuitabilityTestRequest) GetReviewDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReviewDate) {
		return nil, false
	}
	return o.ReviewDate, true
}

// HasReviewDate returns a boolean if a field has been set.
func (o *DtoSuitabilityTestRequest) HasReviewDate() bool {
	if o != nil && !IsNil(o.ReviewDate) {
		return true
	}

	return false
}

// SetReviewDate gets a reference to the given string and assigns it to the ReviewDate field.
func (o *DtoSuitabilityTestRequest) SetReviewDate(v string) {
	o.ReviewDate = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *DtoSuitabilityTestRequest) GetScore() int32 {
	if o == nil || IsNil(o.Score) {
		var ret int32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSuitabilityTestRequest) GetScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *DtoSuitabilityTestRequest) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given int32 and assigns it to the Score field.
func (o *DtoSuitabilityTestRequest) SetScore(v int32) {
	o.Score = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *DtoSuitabilityTestRequest) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoSuitabilityTestRequest) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DtoSuitabilityTestRequest) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *DtoSuitabilityTestRequest) SetVersion(v string) {
	o.Version = &v
}

func (o DtoSuitabilityTestRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoSuitabilityTestRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpiredDate) {
		toSerialize["expiredDate"] = o.ExpiredDate
	}
	if !IsNil(o.Grade) {
		toSerialize["grade"] = o.Grade
	}
	if !IsNil(o.ReviewDate) {
		toSerialize["reviewDate"] = o.ReviewDate
	}
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableDtoSuitabilityTestRequest struct {
	value *DtoSuitabilityTestRequest
	isSet bool
}

func (v NullableDtoSuitabilityTestRequest) Get() *DtoSuitabilityTestRequest {
	return v.value
}

func (v *NullableDtoSuitabilityTestRequest) Set(val *DtoSuitabilityTestRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoSuitabilityTestRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoSuitabilityTestRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoSuitabilityTestRequest(val *DtoSuitabilityTestRequest) *NullableDtoSuitabilityTestRequest {
	return &NullableDtoSuitabilityTestRequest{value: val, isSet: true}
}

func (v NullableDtoSuitabilityTestRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoSuitabilityTestRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
