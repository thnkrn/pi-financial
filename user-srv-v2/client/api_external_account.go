/*
Pi User Service V2

Contain Generic Information.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// ExternalAccountAPIService ExternalAccountAPI service
type ExternalAccountAPIService service

type ApiInternalV1ExternalAccountPostRequest struct {
	ctx                             context.Context
	ApiService                      *ExternalAccountAPIService
	userId                          *string
	dtoCreateExternalAccountRequest *DtoCreateExternalAccountRequest
}

// User ID
func (r ApiInternalV1ExternalAccountPostRequest) UserId(userId string) ApiInternalV1ExternalAccountPostRequest {
	r.userId = &userId
	return r
}

// Create External Account Request
func (r ApiInternalV1ExternalAccountPostRequest) DtoCreateExternalAccountRequest(dtoCreateExternalAccountRequest DtoCreateExternalAccountRequest) ApiInternalV1ExternalAccountPostRequest {
	r.dtoCreateExternalAccountRequest = &dtoCreateExternalAccountRequest
	return r
}

func (r ApiInternalV1ExternalAccountPostRequest) Execute() (*ResultResponseSuccess, *http.Response, error) {
	return r.ApiService.InternalV1ExternalAccountPostExecute(r)
}

/*
InternalV1ExternalAccountPost Create external account.

Create external account for user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalV1ExternalAccountPostRequest
*/
func (a *ExternalAccountAPIService) InternalV1ExternalAccountPost(ctx context.Context) ApiInternalV1ExternalAccountPostRequest {
	return ApiInternalV1ExternalAccountPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ResultResponseSuccess
func (a *ExternalAccountAPIService) InternalV1ExternalAccountPostExecute(r ApiInternalV1ExternalAccountPostRequest) (*ResultResponseSuccess, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResultResponseSuccess
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExternalAccountAPIService.InternalV1ExternalAccountPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/v1/external-account"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}
	if r.dtoCreateExternalAccountRequest == nil {
		return localVarReturnValue, nil, reportError("dtoCreateExternalAccountRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "")
	// body params
	localVarPostBody = r.dtoCreateExternalAccountRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResultResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
