/*
Pi User Service V2

Contain Generic Information.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the DtoUserAccountResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoUserAccountResponse{}

// DtoUserAccountResponse struct for DtoUserAccountResponse
type DtoUserAccountResponse struct {
	Status          *DomainUserAccountStatus `json:"status,omitempty"`
	UserAccountId   *string                  `json:"userAccountId,omitempty"`
	UserAccountType *DomainUserAccountType   `json:"userAccountType,omitempty"`
}

// NewDtoUserAccountResponse instantiates a new DtoUserAccountResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoUserAccountResponse() *DtoUserAccountResponse {
	this := DtoUserAccountResponse{}
	return &this
}

// NewDtoUserAccountResponseWithDefaults instantiates a new DtoUserAccountResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoUserAccountResponseWithDefaults() *DtoUserAccountResponse {
	this := DtoUserAccountResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DtoUserAccountResponse) GetStatus() DomainUserAccountStatus {
	if o == nil || IsNil(o.Status) {
		var ret DomainUserAccountStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUserAccountResponse) GetStatusOk() (*DomainUserAccountStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DtoUserAccountResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given DomainUserAccountStatus and assigns it to the Status field.
func (o *DtoUserAccountResponse) SetStatus(v DomainUserAccountStatus) {
	o.Status = &v
}

// GetUserAccountId returns the UserAccountId field value if set, zero value otherwise.
func (o *DtoUserAccountResponse) GetUserAccountId() string {
	if o == nil || IsNil(o.UserAccountId) {
		var ret string
		return ret
	}
	return *o.UserAccountId
}

// GetUserAccountIdOk returns a tuple with the UserAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUserAccountResponse) GetUserAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserAccountId) {
		return nil, false
	}
	return o.UserAccountId, true
}

// HasUserAccountId returns a boolean if a field has been set.
func (o *DtoUserAccountResponse) HasUserAccountId() bool {
	if o != nil && !IsNil(o.UserAccountId) {
		return true
	}

	return false
}

// SetUserAccountId gets a reference to the given string and assigns it to the UserAccountId field.
func (o *DtoUserAccountResponse) SetUserAccountId(v string) {
	o.UserAccountId = &v
}

// GetUserAccountType returns the UserAccountType field value if set, zero value otherwise.
func (o *DtoUserAccountResponse) GetUserAccountType() DomainUserAccountType {
	if o == nil || IsNil(o.UserAccountType) {
		var ret DomainUserAccountType
		return ret
	}
	return *o.UserAccountType
}

// GetUserAccountTypeOk returns a tuple with the UserAccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoUserAccountResponse) GetUserAccountTypeOk() (*DomainUserAccountType, bool) {
	if o == nil || IsNil(o.UserAccountType) {
		return nil, false
	}
	return o.UserAccountType, true
}

// HasUserAccountType returns a boolean if a field has been set.
func (o *DtoUserAccountResponse) HasUserAccountType() bool {
	if o != nil && !IsNil(o.UserAccountType) {
		return true
	}

	return false
}

// SetUserAccountType gets a reference to the given DomainUserAccountType and assigns it to the UserAccountType field.
func (o *DtoUserAccountResponse) SetUserAccountType(v DomainUserAccountType) {
	o.UserAccountType = &v
}

func (o DtoUserAccountResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoUserAccountResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.UserAccountId) {
		toSerialize["userAccountId"] = o.UserAccountId
	}
	if !IsNil(o.UserAccountType) {
		toSerialize["userAccountType"] = o.UserAccountType
	}
	return toSerialize, nil
}

type NullableDtoUserAccountResponse struct {
	value *DtoUserAccountResponse
	isSet bool
}

func (v NullableDtoUserAccountResponse) Get() *DtoUserAccountResponse {
	return v.value
}

func (v *NullableDtoUserAccountResponse) Set(val *DtoUserAccountResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoUserAccountResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoUserAccountResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoUserAccountResponse(val *DtoUserAccountResponse) *NullableDtoUserAccountResponse {
	return &NullableDtoUserAccountResponse{value: val, isSet: true}
}

func (v NullableDtoUserAccountResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoUserAccountResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
