/*
Pi User Service V2

Contain Generic Information.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// DomainUserAccountStatus the model 'DomainUserAccountStatus'
type DomainUserAccountStatus string

// List of domain.UserAccountStatus
const (
	NormalUserAccountStatus DomainUserAccountStatus = "N"
	ClosedUserAccountStatus DomainUserAccountStatus = "C"
)

// All allowed values of DomainUserAccountStatus enum
var AllowedDomainUserAccountStatusEnumValues = []DomainUserAccountStatus{
	"N",
	"C",
}

func (v *DomainUserAccountStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DomainUserAccountStatus(value)
	for _, existing := range AllowedDomainUserAccountStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DomainUserAccountStatus", value)
}

// NewDomainUserAccountStatusFromValue returns a pointer to a valid DomainUserAccountStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDomainUserAccountStatusFromValue(v string) (*DomainUserAccountStatus, error) {
	ev := DomainUserAccountStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DomainUserAccountStatus: valid values are %v", v, AllowedDomainUserAccountStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DomainUserAccountStatus) IsValid() bool {
	for _, existing := range AllowedDomainUserAccountStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to domain.UserAccountStatus value
func (v DomainUserAccountStatus) Ptr() *DomainUserAccountStatus {
	return &v
}

type NullableDomainUserAccountStatus struct {
	value *DomainUserAccountStatus
	isSet bool
}

func (v NullableDomainUserAccountStatus) Get() *DomainUserAccountStatus {
	return v.value
}

func (v *NullableDomainUserAccountStatus) Set(val *DomainUserAccountStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainUserAccountStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainUserAccountStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainUserAccountStatus(val *DomainUserAccountStatus) *NullableDomainUserAccountStatus {
	return &NullableDomainUserAccountStatus{value: val, isSet: true}
}

func (v NullableDomainUserAccountStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainUserAccountStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
