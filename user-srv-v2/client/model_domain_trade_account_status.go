/*
Pi User Service V2

Contain Generic Information.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// DomainTradeAccountStatus the model 'DomainTradeAccountStatus'
type DomainTradeAccountStatus string

// List of domain.TradeAccountStatus
const (
	NormalTradeAccountStatus DomainTradeAccountStatus = "N"
	ClosedTradeAccountStatus DomainTradeAccountStatus = "C"
)

// All allowed values of DomainTradeAccountStatus enum
var AllowedDomainTradeAccountStatusEnumValues = []DomainTradeAccountStatus{
	"N",
	"C",
}

func (v *DomainTradeAccountStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DomainTradeAccountStatus(value)
	for _, existing := range AllowedDomainTradeAccountStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DomainTradeAccountStatus", value)
}

// NewDomainTradeAccountStatusFromValue returns a pointer to a valid DomainTradeAccountStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDomainTradeAccountStatusFromValue(v string) (*DomainTradeAccountStatus, error) {
	ev := DomainTradeAccountStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DomainTradeAccountStatus: valid values are %v", v, AllowedDomainTradeAccountStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DomainTradeAccountStatus) IsValid() bool {
	for _, existing := range AllowedDomainTradeAccountStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to domain.TradeAccountStatus value
func (v DomainTradeAccountStatus) Ptr() *DomainTradeAccountStatus {
	return &v
}

type NullableDomainTradeAccountStatus struct {
	value *DomainTradeAccountStatus
	isSet bool
}

func (v NullableDomainTradeAccountStatus) Get() *DomainTradeAccountStatus {
	return v.value
}

func (v *NullableDomainTradeAccountStatus) Set(val *DomainTradeAccountStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainTradeAccountStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainTradeAccountStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainTradeAccountStatus(val *DomainTradeAccountStatus) *NullableDomainTradeAccountStatus {
	return &NullableDomainTradeAccountStatus{value: val, isSet: true}
}

func (v NullableDomainTradeAccountStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainTradeAccountStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
