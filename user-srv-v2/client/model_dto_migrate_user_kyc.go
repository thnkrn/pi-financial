/*
Pi User Service V2

Contain Generic Information.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the DtoMigrateUserKyc type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoMigrateUserKyc{}

// DtoMigrateUserKyc struct for DtoMigrateUserKyc
type DtoMigrateUserKyc struct {
	ExpiredDate *string `json:"expiredDate,omitempty"`
	ReviewDate  *string `json:"reviewDate,omitempty"`
}

// NewDtoMigrateUserKyc instantiates a new DtoMigrateUserKyc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoMigrateUserKyc() *DtoMigrateUserKyc {
	this := DtoMigrateUserKyc{}
	return &this
}

// NewDtoMigrateUserKycWithDefaults instantiates a new DtoMigrateUserKyc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoMigrateUserKycWithDefaults() *DtoMigrateUserKyc {
	this := DtoMigrateUserKyc{}
	return &this
}

// GetExpiredDate returns the ExpiredDate field value if set, zero value otherwise.
func (o *DtoMigrateUserKyc) GetExpiredDate() string {
	if o == nil || IsNil(o.ExpiredDate) {
		var ret string
		return ret
	}
	return *o.ExpiredDate
}

// GetExpiredDateOk returns a tuple with the ExpiredDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserKyc) GetExpiredDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiredDate) {
		return nil, false
	}
	return o.ExpiredDate, true
}

// HasExpiredDate returns a boolean if a field has been set.
func (o *DtoMigrateUserKyc) HasExpiredDate() bool {
	if o != nil && !IsNil(o.ExpiredDate) {
		return true
	}

	return false
}

// SetExpiredDate gets a reference to the given string and assigns it to the ExpiredDate field.
func (o *DtoMigrateUserKyc) SetExpiredDate(v string) {
	o.ExpiredDate = &v
}

// GetReviewDate returns the ReviewDate field value if set, zero value otherwise.
func (o *DtoMigrateUserKyc) GetReviewDate() string {
	if o == nil || IsNil(o.ReviewDate) {
		var ret string
		return ret
	}
	return *o.ReviewDate
}

// GetReviewDateOk returns a tuple with the ReviewDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserKyc) GetReviewDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReviewDate) {
		return nil, false
	}
	return o.ReviewDate, true
}

// HasReviewDate returns a boolean if a field has been set.
func (o *DtoMigrateUserKyc) HasReviewDate() bool {
	if o != nil && !IsNil(o.ReviewDate) {
		return true
	}

	return false
}

// SetReviewDate gets a reference to the given string and assigns it to the ReviewDate field.
func (o *DtoMigrateUserKyc) SetReviewDate(v string) {
	o.ReviewDate = &v
}

func (o DtoMigrateUserKyc) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoMigrateUserKyc) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExpiredDate) {
		toSerialize["expiredDate"] = o.ExpiredDate
	}
	if !IsNil(o.ReviewDate) {
		toSerialize["reviewDate"] = o.ReviewDate
	}
	return toSerialize, nil
}

type NullableDtoMigrateUserKyc struct {
	value *DtoMigrateUserKyc
	isSet bool
}

func (v NullableDtoMigrateUserKyc) Get() *DtoMigrateUserKyc {
	return v.value
}

func (v *NullableDtoMigrateUserKyc) Set(val *DtoMigrateUserKyc) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoMigrateUserKyc) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoMigrateUserKyc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoMigrateUserKyc(val *DtoMigrateUserKyc) *NullableDtoMigrateUserKyc {
	return &NullableDtoMigrateUserKyc{value: val, isSet: true}
}

func (v NullableDtoMigrateUserKyc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoMigrateUserKyc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
