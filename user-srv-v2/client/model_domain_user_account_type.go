/*
Pi User Service V2

Contain Generic Information.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// DomainUserAccountType the model 'DomainUserAccountType'
type DomainUserAccountType string

// List of domain.UserAccountType
const (
	CashWallet DomainUserAccountType = "CashWallet"
	Freewill   DomainUserAccountType = "Freewill"
)

// All allowed values of DomainUserAccountType enum
var AllowedDomainUserAccountTypeEnumValues = []DomainUserAccountType{
	"CashWallet",
	"Freewill",
}

func (v *DomainUserAccountType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DomainUserAccountType(value)
	for _, existing := range AllowedDomainUserAccountTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DomainUserAccountType", value)
}

// NewDomainUserAccountTypeFromValue returns a pointer to a valid DomainUserAccountType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDomainUserAccountTypeFromValue(v string) (*DomainUserAccountType, error) {
	ev := DomainUserAccountType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DomainUserAccountType: valid values are %v", v, AllowedDomainUserAccountTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DomainUserAccountType) IsValid() bool {
	for _, existing := range AllowedDomainUserAccountTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to domain.UserAccountType value
func (v DomainUserAccountType) Ptr() *DomainUserAccountType {
	return &v
}

type NullableDomainUserAccountType struct {
	value *DomainUserAccountType
	isSet bool
}

func (v NullableDomainUserAccountType) Get() *DomainUserAccountType {
	return v.value
}

func (v *NullableDomainUserAccountType) Set(val *DomainUserAccountType) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainUserAccountType) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainUserAccountType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainUserAccountType(val *DomainUserAccountType) *NullableDomainUserAccountType {
	return &NullableDomainUserAccountType{value: val, isSet: true}
}

func (v NullableDomainUserAccountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainUserAccountType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
