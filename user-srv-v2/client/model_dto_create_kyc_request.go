/*
Pi User Service V2

Contain Generic Information.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DtoCreateKycRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoCreateKycRequest{}

// DtoCreateKycRequest struct for DtoCreateKycRequest
type DtoCreateKycRequest struct {
	ExpiredDate string `json:"expiredDate"`
	ReviewDate  string `json:"reviewDate"`
}

type _DtoCreateKycRequest DtoCreateKycRequest

// NewDtoCreateKycRequest instantiates a new DtoCreateKycRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoCreateKycRequest(expiredDate string, reviewDate string) *DtoCreateKycRequest {
	this := DtoCreateKycRequest{}
	this.ExpiredDate = expiredDate
	this.ReviewDate = reviewDate
	return &this
}

// NewDtoCreateKycRequestWithDefaults instantiates a new DtoCreateKycRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoCreateKycRequestWithDefaults() *DtoCreateKycRequest {
	this := DtoCreateKycRequest{}
	return &this
}

// GetExpiredDate returns the ExpiredDate field value
func (o *DtoCreateKycRequest) GetExpiredDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpiredDate
}

// GetExpiredDateOk returns a tuple with the ExpiredDate field value
// and a boolean to check if the value has been set.
func (o *DtoCreateKycRequest) GetExpiredDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiredDate, true
}

// SetExpiredDate sets field value
func (o *DtoCreateKycRequest) SetExpiredDate(v string) {
	o.ExpiredDate = v
}

// GetReviewDate returns the ReviewDate field value
func (o *DtoCreateKycRequest) GetReviewDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReviewDate
}

// GetReviewDateOk returns a tuple with the ReviewDate field value
// and a boolean to check if the value has been set.
func (o *DtoCreateKycRequest) GetReviewDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReviewDate, true
}

// SetReviewDate sets field value
func (o *DtoCreateKycRequest) SetReviewDate(v string) {
	o.ReviewDate = v
}

func (o DtoCreateKycRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoCreateKycRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["expiredDate"] = o.ExpiredDate
	toSerialize["reviewDate"] = o.ReviewDate
	return toSerialize, nil
}

func (o *DtoCreateKycRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"expiredDate",
		"reviewDate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDtoCreateKycRequest := _DtoCreateKycRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDtoCreateKycRequest)

	if err != nil {
		return err
	}

	*o = DtoCreateKycRequest(varDtoCreateKycRequest)

	return err
}

type NullableDtoCreateKycRequest struct {
	value *DtoCreateKycRequest
	isSet bool
}

func (v NullableDtoCreateKycRequest) Get() *DtoCreateKycRequest {
	return v.value
}

func (v *NullableDtoCreateKycRequest) Set(val *DtoCreateKycRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoCreateKycRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoCreateKycRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoCreateKycRequest(val *DtoCreateKycRequest) *NullableDtoCreateKycRequest {
	return &NullableDtoCreateKycRequest{value: val, isSet: true}
}

func (v NullableDtoCreateKycRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoCreateKycRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
