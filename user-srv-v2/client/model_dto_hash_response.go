/*
Pi User Service V2

Contain Generic Information.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the DtoHashResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoHashResponse{}

// DtoHashResponse struct for DtoHashResponse
type DtoHashResponse struct {
	Hash *string `json:"hash,omitempty"`
}

// NewDtoHashResponse instantiates a new DtoHashResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoHashResponse() *DtoHashResponse {
	this := DtoHashResponse{}
	return &this
}

// NewDtoHashResponseWithDefaults instantiates a new DtoHashResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoHashResponseWithDefaults() *DtoHashResponse {
	this := DtoHashResponse{}
	return &this
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *DtoHashResponse) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoHashResponse) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *DtoHashResponse) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *DtoHashResponse) SetHash(v string) {
	o.Hash = &v
}

func (o DtoHashResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoHashResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	return toSerialize, nil
}

type NullableDtoHashResponse struct {
	value *DtoHashResponse
	isSet bool
}

func (v NullableDtoHashResponse) Get() *DtoHashResponse {
	return v.value
}

func (v *NullableDtoHashResponse) Set(val *DtoHashResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoHashResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoHashResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoHashResponse(val *DtoHashResponse) *NullableDtoHashResponse {
	return &NullableDtoHashResponse{value: val, isSet: true}
}

func (v NullableDtoHashResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoHashResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
