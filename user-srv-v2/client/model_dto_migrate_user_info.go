/*
Pi User Service V2

Contain Generic Information.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the DtoMigrateUserInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoMigrateUserInfo{}

// DtoMigrateUserInfo struct for DtoMigrateUserInfo
type DtoMigrateUserInfo struct {
	DateOfBirth         *string `json:"dateOfBirth,omitempty"`
	Email               *string `json:"email,omitempty"`
	FirstnameEn         *string `json:"firstnameEn,omitempty"`
	FirstnameTh         *string `json:"firstnameTh,omitempty"`
	LastnameEn          *string `json:"lastnameEn,omitempty"`
	LastnameTh          *string `json:"lastnameTh,omitempty"`
	PhoneNumber         *string `json:"phoneNumber,omitempty"`
	PlaceOfBirthCity    *string `json:"placeOfBirthCity,omitempty"`
	PlaceOfBirthCountry *string `json:"placeOfBirthCountry,omitempty"`
	WealthType          *string `json:"wealthType,omitempty"`
}

// NewDtoMigrateUserInfo instantiates a new DtoMigrateUserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoMigrateUserInfo() *DtoMigrateUserInfo {
	this := DtoMigrateUserInfo{}
	return &this
}

// NewDtoMigrateUserInfoWithDefaults instantiates a new DtoMigrateUserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoMigrateUserInfoWithDefaults() *DtoMigrateUserInfo {
	this := DtoMigrateUserInfo{}
	return &this
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise.
func (o *DtoMigrateUserInfo) GetDateOfBirth() string {
	if o == nil || IsNil(o.DateOfBirth) {
		var ret string
		return ret
	}
	return *o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserInfo) GetDateOfBirthOk() (*string, bool) {
	if o == nil || IsNil(o.DateOfBirth) {
		return nil, false
	}
	return o.DateOfBirth, true
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *DtoMigrateUserInfo) HasDateOfBirth() bool {
	if o != nil && !IsNil(o.DateOfBirth) {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given string and assigns it to the DateOfBirth field.
func (o *DtoMigrateUserInfo) SetDateOfBirth(v string) {
	o.DateOfBirth = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *DtoMigrateUserInfo) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserInfo) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *DtoMigrateUserInfo) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *DtoMigrateUserInfo) SetEmail(v string) {
	o.Email = &v
}

// GetFirstnameEn returns the FirstnameEn field value if set, zero value otherwise.
func (o *DtoMigrateUserInfo) GetFirstnameEn() string {
	if o == nil || IsNil(o.FirstnameEn) {
		var ret string
		return ret
	}
	return *o.FirstnameEn
}

// GetFirstnameEnOk returns a tuple with the FirstnameEn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserInfo) GetFirstnameEnOk() (*string, bool) {
	if o == nil || IsNil(o.FirstnameEn) {
		return nil, false
	}
	return o.FirstnameEn, true
}

// HasFirstnameEn returns a boolean if a field has been set.
func (o *DtoMigrateUserInfo) HasFirstnameEn() bool {
	if o != nil && !IsNil(o.FirstnameEn) {
		return true
	}

	return false
}

// SetFirstnameEn gets a reference to the given string and assigns it to the FirstnameEn field.
func (o *DtoMigrateUserInfo) SetFirstnameEn(v string) {
	o.FirstnameEn = &v
}

// GetFirstnameTh returns the FirstnameTh field value if set, zero value otherwise.
func (o *DtoMigrateUserInfo) GetFirstnameTh() string {
	if o == nil || IsNil(o.FirstnameTh) {
		var ret string
		return ret
	}
	return *o.FirstnameTh
}

// GetFirstnameThOk returns a tuple with the FirstnameTh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserInfo) GetFirstnameThOk() (*string, bool) {
	if o == nil || IsNil(o.FirstnameTh) {
		return nil, false
	}
	return o.FirstnameTh, true
}

// HasFirstnameTh returns a boolean if a field has been set.
func (o *DtoMigrateUserInfo) HasFirstnameTh() bool {
	if o != nil && !IsNil(o.FirstnameTh) {
		return true
	}

	return false
}

// SetFirstnameTh gets a reference to the given string and assigns it to the FirstnameTh field.
func (o *DtoMigrateUserInfo) SetFirstnameTh(v string) {
	o.FirstnameTh = &v
}

// GetLastnameEn returns the LastnameEn field value if set, zero value otherwise.
func (o *DtoMigrateUserInfo) GetLastnameEn() string {
	if o == nil || IsNil(o.LastnameEn) {
		var ret string
		return ret
	}
	return *o.LastnameEn
}

// GetLastnameEnOk returns a tuple with the LastnameEn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserInfo) GetLastnameEnOk() (*string, bool) {
	if o == nil || IsNil(o.LastnameEn) {
		return nil, false
	}
	return o.LastnameEn, true
}

// HasLastnameEn returns a boolean if a field has been set.
func (o *DtoMigrateUserInfo) HasLastnameEn() bool {
	if o != nil && !IsNil(o.LastnameEn) {
		return true
	}

	return false
}

// SetLastnameEn gets a reference to the given string and assigns it to the LastnameEn field.
func (o *DtoMigrateUserInfo) SetLastnameEn(v string) {
	o.LastnameEn = &v
}

// GetLastnameTh returns the LastnameTh field value if set, zero value otherwise.
func (o *DtoMigrateUserInfo) GetLastnameTh() string {
	if o == nil || IsNil(o.LastnameTh) {
		var ret string
		return ret
	}
	return *o.LastnameTh
}

// GetLastnameThOk returns a tuple with the LastnameTh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserInfo) GetLastnameThOk() (*string, bool) {
	if o == nil || IsNil(o.LastnameTh) {
		return nil, false
	}
	return o.LastnameTh, true
}

// HasLastnameTh returns a boolean if a field has been set.
func (o *DtoMigrateUserInfo) HasLastnameTh() bool {
	if o != nil && !IsNil(o.LastnameTh) {
		return true
	}

	return false
}

// SetLastnameTh gets a reference to the given string and assigns it to the LastnameTh field.
func (o *DtoMigrateUserInfo) SetLastnameTh(v string) {
	o.LastnameTh = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *DtoMigrateUserInfo) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserInfo) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *DtoMigrateUserInfo) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *DtoMigrateUserInfo) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetPlaceOfBirthCity returns the PlaceOfBirthCity field value if set, zero value otherwise.
func (o *DtoMigrateUserInfo) GetPlaceOfBirthCity() string {
	if o == nil || IsNil(o.PlaceOfBirthCity) {
		var ret string
		return ret
	}
	return *o.PlaceOfBirthCity
}

// GetPlaceOfBirthCityOk returns a tuple with the PlaceOfBirthCity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserInfo) GetPlaceOfBirthCityOk() (*string, bool) {
	if o == nil || IsNil(o.PlaceOfBirthCity) {
		return nil, false
	}
	return o.PlaceOfBirthCity, true
}

// HasPlaceOfBirthCity returns a boolean if a field has been set.
func (o *DtoMigrateUserInfo) HasPlaceOfBirthCity() bool {
	if o != nil && !IsNil(o.PlaceOfBirthCity) {
		return true
	}

	return false
}

// SetPlaceOfBirthCity gets a reference to the given string and assigns it to the PlaceOfBirthCity field.
func (o *DtoMigrateUserInfo) SetPlaceOfBirthCity(v string) {
	o.PlaceOfBirthCity = &v
}

// GetPlaceOfBirthCountry returns the PlaceOfBirthCountry field value if set, zero value otherwise.
func (o *DtoMigrateUserInfo) GetPlaceOfBirthCountry() string {
	if o == nil || IsNil(o.PlaceOfBirthCountry) {
		var ret string
		return ret
	}
	return *o.PlaceOfBirthCountry
}

// GetPlaceOfBirthCountryOk returns a tuple with the PlaceOfBirthCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserInfo) GetPlaceOfBirthCountryOk() (*string, bool) {
	if o == nil || IsNil(o.PlaceOfBirthCountry) {
		return nil, false
	}
	return o.PlaceOfBirthCountry, true
}

// HasPlaceOfBirthCountry returns a boolean if a field has been set.
func (o *DtoMigrateUserInfo) HasPlaceOfBirthCountry() bool {
	if o != nil && !IsNil(o.PlaceOfBirthCountry) {
		return true
	}

	return false
}

// SetPlaceOfBirthCountry gets a reference to the given string and assigns it to the PlaceOfBirthCountry field.
func (o *DtoMigrateUserInfo) SetPlaceOfBirthCountry(v string) {
	o.PlaceOfBirthCountry = &v
}

// GetWealthType returns the WealthType field value if set, zero value otherwise.
func (o *DtoMigrateUserInfo) GetWealthType() string {
	if o == nil || IsNil(o.WealthType) {
		var ret string
		return ret
	}
	return *o.WealthType
}

// GetWealthTypeOk returns a tuple with the WealthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserInfo) GetWealthTypeOk() (*string, bool) {
	if o == nil || IsNil(o.WealthType) {
		return nil, false
	}
	return o.WealthType, true
}

// HasWealthType returns a boolean if a field has been set.
func (o *DtoMigrateUserInfo) HasWealthType() bool {
	if o != nil && !IsNil(o.WealthType) {
		return true
	}

	return false
}

// SetWealthType gets a reference to the given string and assigns it to the WealthType field.
func (o *DtoMigrateUserInfo) SetWealthType(v string) {
	o.WealthType = &v
}

func (o DtoMigrateUserInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoMigrateUserInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateOfBirth) {
		toSerialize["dateOfBirth"] = o.DateOfBirth
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.FirstnameEn) {
		toSerialize["firstnameEn"] = o.FirstnameEn
	}
	if !IsNil(o.FirstnameTh) {
		toSerialize["firstnameTh"] = o.FirstnameTh
	}
	if !IsNil(o.LastnameEn) {
		toSerialize["lastnameEn"] = o.LastnameEn
	}
	if !IsNil(o.LastnameTh) {
		toSerialize["lastnameTh"] = o.LastnameTh
	}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if !IsNil(o.PlaceOfBirthCity) {
		toSerialize["placeOfBirthCity"] = o.PlaceOfBirthCity
	}
	if !IsNil(o.PlaceOfBirthCountry) {
		toSerialize["placeOfBirthCountry"] = o.PlaceOfBirthCountry
	}
	if !IsNil(o.WealthType) {
		toSerialize["wealthType"] = o.WealthType
	}
	return toSerialize, nil
}

type NullableDtoMigrateUserInfo struct {
	value *DtoMigrateUserInfo
	isSet bool
}

func (v NullableDtoMigrateUserInfo) Get() *DtoMigrateUserInfo {
	return v.value
}

func (v *NullableDtoMigrateUserInfo) Set(val *DtoMigrateUserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoMigrateUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoMigrateUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoMigrateUserInfo(val *DtoMigrateUserInfo) *NullableDtoMigrateUserInfo {
	return &NullableDtoMigrateUserInfo{value: val, isSet: true}
}

func (v NullableDtoMigrateUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoMigrateUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
