/*
Pi User Service V2

Contain Generic Information.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the DtoMigrateUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoMigrateUserRequest{}

// DtoMigrateUserRequest struct for DtoMigrateUserRequest
type DtoMigrateUserRequest struct {
	Address                  *DtoMigrateUserRequestAddress                        `json:"address,omitempty"`
	Kyc                      *DtoMigrateUserKyc                                   `json:"kyc,omitempty"`
	SuitabilityTests         []DtoMigrateUserRequestSuitabilityTestsInner         `json:"suitabilityTests,omitempty"`
	TradeAccountBankAccounts []DtoMigrateUserRequestTradeAccountBankAccountsInner `json:"tradeAccountBankAccounts,omitempty"`
	UserInfo                 *DtoMigrateUserInfo                                  `json:"userInfo,omitempty"`
}

// NewDtoMigrateUserRequest instantiates a new DtoMigrateUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoMigrateUserRequest() *DtoMigrateUserRequest {
	this := DtoMigrateUserRequest{}
	return &this
}

// NewDtoMigrateUserRequestWithDefaults instantiates a new DtoMigrateUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoMigrateUserRequestWithDefaults() *DtoMigrateUserRequest {
	this := DtoMigrateUserRequest{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *DtoMigrateUserRequest) GetAddress() DtoMigrateUserRequestAddress {
	if o == nil || IsNil(o.Address) {
		var ret DtoMigrateUserRequestAddress
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserRequest) GetAddressOk() (*DtoMigrateUserRequestAddress, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *DtoMigrateUserRequest) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given DtoMigrateUserRequestAddress and assigns it to the Address field.
func (o *DtoMigrateUserRequest) SetAddress(v DtoMigrateUserRequestAddress) {
	o.Address = &v
}

// GetKyc returns the Kyc field value if set, zero value otherwise.
func (o *DtoMigrateUserRequest) GetKyc() DtoMigrateUserKyc {
	if o == nil || IsNil(o.Kyc) {
		var ret DtoMigrateUserKyc
		return ret
	}
	return *o.Kyc
}

// GetKycOk returns a tuple with the Kyc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserRequest) GetKycOk() (*DtoMigrateUserKyc, bool) {
	if o == nil || IsNil(o.Kyc) {
		return nil, false
	}
	return o.Kyc, true
}

// HasKyc returns a boolean if a field has been set.
func (o *DtoMigrateUserRequest) HasKyc() bool {
	if o != nil && !IsNil(o.Kyc) {
		return true
	}

	return false
}

// SetKyc gets a reference to the given DtoMigrateUserKyc and assigns it to the Kyc field.
func (o *DtoMigrateUserRequest) SetKyc(v DtoMigrateUserKyc) {
	o.Kyc = &v
}

// GetSuitabilityTests returns the SuitabilityTests field value if set, zero value otherwise.
func (o *DtoMigrateUserRequest) GetSuitabilityTests() []DtoMigrateUserRequestSuitabilityTestsInner {
	if o == nil || IsNil(o.SuitabilityTests) {
		var ret []DtoMigrateUserRequestSuitabilityTestsInner
		return ret
	}
	return o.SuitabilityTests
}

// GetSuitabilityTestsOk returns a tuple with the SuitabilityTests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserRequest) GetSuitabilityTestsOk() ([]DtoMigrateUserRequestSuitabilityTestsInner, bool) {
	if o == nil || IsNil(o.SuitabilityTests) {
		return nil, false
	}
	return o.SuitabilityTests, true
}

// HasSuitabilityTests returns a boolean if a field has been set.
func (o *DtoMigrateUserRequest) HasSuitabilityTests() bool {
	if o != nil && !IsNil(o.SuitabilityTests) {
		return true
	}

	return false
}

// SetSuitabilityTests gets a reference to the given []DtoMigrateUserRequestSuitabilityTestsInner and assigns it to the SuitabilityTests field.
func (o *DtoMigrateUserRequest) SetSuitabilityTests(v []DtoMigrateUserRequestSuitabilityTestsInner) {
	o.SuitabilityTests = v
}

// GetTradeAccountBankAccounts returns the TradeAccountBankAccounts field value if set, zero value otherwise.
func (o *DtoMigrateUserRequest) GetTradeAccountBankAccounts() []DtoMigrateUserRequestTradeAccountBankAccountsInner {
	if o == nil || IsNil(o.TradeAccountBankAccounts) {
		var ret []DtoMigrateUserRequestTradeAccountBankAccountsInner
		return ret
	}
	return o.TradeAccountBankAccounts
}

// GetTradeAccountBankAccountsOk returns a tuple with the TradeAccountBankAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserRequest) GetTradeAccountBankAccountsOk() ([]DtoMigrateUserRequestTradeAccountBankAccountsInner, bool) {
	if o == nil || IsNil(o.TradeAccountBankAccounts) {
		return nil, false
	}
	return o.TradeAccountBankAccounts, true
}

// HasTradeAccountBankAccounts returns a boolean if a field has been set.
func (o *DtoMigrateUserRequest) HasTradeAccountBankAccounts() bool {
	if o != nil && !IsNil(o.TradeAccountBankAccounts) {
		return true
	}

	return false
}

// SetTradeAccountBankAccounts gets a reference to the given []DtoMigrateUserRequestTradeAccountBankAccountsInner and assigns it to the TradeAccountBankAccounts field.
func (o *DtoMigrateUserRequest) SetTradeAccountBankAccounts(v []DtoMigrateUserRequestTradeAccountBankAccountsInner) {
	o.TradeAccountBankAccounts = v
}

// GetUserInfo returns the UserInfo field value if set, zero value otherwise.
func (o *DtoMigrateUserRequest) GetUserInfo() DtoMigrateUserInfo {
	if o == nil || IsNil(o.UserInfo) {
		var ret DtoMigrateUserInfo
		return ret
	}
	return *o.UserInfo
}

// GetUserInfoOk returns a tuple with the UserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserRequest) GetUserInfoOk() (*DtoMigrateUserInfo, bool) {
	if o == nil || IsNil(o.UserInfo) {
		return nil, false
	}
	return o.UserInfo, true
}

// HasUserInfo returns a boolean if a field has been set.
func (o *DtoMigrateUserRequest) HasUserInfo() bool {
	if o != nil && !IsNil(o.UserInfo) {
		return true
	}

	return false
}

// SetUserInfo gets a reference to the given DtoMigrateUserInfo and assigns it to the UserInfo field.
func (o *DtoMigrateUserRequest) SetUserInfo(v DtoMigrateUserInfo) {
	o.UserInfo = &v
}

func (o DtoMigrateUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoMigrateUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Kyc) {
		toSerialize["kyc"] = o.Kyc
	}
	if !IsNil(o.SuitabilityTests) {
		toSerialize["suitabilityTests"] = o.SuitabilityTests
	}
	if !IsNil(o.TradeAccountBankAccounts) {
		toSerialize["tradeAccountBankAccounts"] = o.TradeAccountBankAccounts
	}
	if !IsNil(o.UserInfo) {
		toSerialize["userInfo"] = o.UserInfo
	}
	return toSerialize, nil
}

type NullableDtoMigrateUserRequest struct {
	value *DtoMigrateUserRequest
	isSet bool
}

func (v NullableDtoMigrateUserRequest) Get() *DtoMigrateUserRequest {
	return v.value
}

func (v *NullableDtoMigrateUserRequest) Set(val *DtoMigrateUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoMigrateUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoMigrateUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoMigrateUserRequest(val *DtoMigrateUserRequest) *NullableDtoMigrateUserRequest {
	return &NullableDtoMigrateUserRequest{value: val, isSet: true}
}

func (v NullableDtoMigrateUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoMigrateUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
