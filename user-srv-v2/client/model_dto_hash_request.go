/*
Pi User Service V2

Contain Generic Information.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DtoHashRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoHashRequest{}

// DtoHashRequest struct for DtoHashRequest
type DtoHashRequest struct {
	Input string `json:"input"`
}

type _DtoHashRequest DtoHashRequest

// NewDtoHashRequest instantiates a new DtoHashRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoHashRequest(input string) *DtoHashRequest {
	this := DtoHashRequest{}
	this.Input = input
	return &this
}

// NewDtoHashRequestWithDefaults instantiates a new DtoHashRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoHashRequestWithDefaults() *DtoHashRequest {
	this := DtoHashRequest{}
	return &this
}

// GetInput returns the Input field value
func (o *DtoHashRequest) GetInput() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *DtoHashRequest) GetInputOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *DtoHashRequest) SetInput(v string) {
	o.Input = v
}

func (o DtoHashRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoHashRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["input"] = o.Input
	return toSerialize, nil
}

func (o *DtoHashRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"input",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDtoHashRequest := _DtoHashRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDtoHashRequest)

	if err != nil {
		return err
	}

	*o = DtoHashRequest(varDtoHashRequest)

	return err
}

type NullableDtoHashRequest struct {
	value *DtoHashRequest
	isSet bool
}

func (v NullableDtoHashRequest) Get() *DtoHashRequest {
	return v.value
}

func (v *NullableDtoHashRequest) Set(val *DtoHashRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoHashRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoHashRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoHashRequest(val *DtoHashRequest) *NullableDtoHashRequest {
	return &NullableDtoHashRequest{value: val, isSet: true}
}

func (v NullableDtoHashRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoHashRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
