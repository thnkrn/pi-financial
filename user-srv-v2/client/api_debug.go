/*
Pi User Service V2

Contain Generic Information.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// DebugAPIService DebugAPI service
type DebugAPIService service

type ApiInternalV1DebugHashPostRequest struct {
	ctx            context.Context
	ApiService     *DebugAPIService
	dtoHashRequest *DtoHashRequest
}

// String to hash
func (r ApiInternalV1DebugHashPostRequest) DtoHashRequest(dtoHashRequest DtoHashRequest) ApiInternalV1DebugHashPostRequest {
	r.dtoHashRequest = &dtoHashRequest
	return r
}

func (r ApiInternalV1DebugHashPostRequest) Execute() (*InternalV1DebugHashPost200Response, *http.Response, error) {
	return r.ApiService.InternalV1DebugHashPostExecute(r)
}

/*
InternalV1DebugHashPost Get hash of input string

Convert input string to hash value

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalV1DebugHashPostRequest
*/
func (a *DebugAPIService) InternalV1DebugHashPost(ctx context.Context) ApiInternalV1DebugHashPostRequest {
	return ApiInternalV1DebugHashPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return InternalV1DebugHashPost200Response
func (a *DebugAPIService) InternalV1DebugHashPostExecute(r ApiInternalV1DebugHashPostRequest) (*InternalV1DebugHashPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InternalV1DebugHashPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DebugAPIService.InternalV1DebugHashPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/v1/debug/hash"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dtoHashRequest == nil {
		return localVarReturnValue, nil, reportError("dtoHashRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dtoHashRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResultResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ResultResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInternalV1DebugTryFeatureServiceGetRequest struct {
	ctx               context.Context
	ApiService        *DebugAPIService
	featureSwitchName *string
}

// Feature Switch Name
func (r ApiInternalV1DebugTryFeatureServiceGetRequest) FeatureSwitchName(featureSwitchName string) ApiInternalV1DebugTryFeatureServiceGetRequest {
	r.featureSwitchName = &featureSwitchName
	return r
}

func (r ApiInternalV1DebugTryFeatureServiceGetRequest) Execute() (*InternalV1DebugTryFeatureServiceGet200Response, *http.Response, error) {
	return r.ApiService.InternalV1DebugTryFeatureServiceGetExecute(r)
}

/*
InternalV1DebugTryFeatureServiceGet Try feature service

Try feature service

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalV1DebugTryFeatureServiceGetRequest
*/
func (a *DebugAPIService) InternalV1DebugTryFeatureServiceGet(ctx context.Context) ApiInternalV1DebugTryFeatureServiceGetRequest {
	return ApiInternalV1DebugTryFeatureServiceGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return InternalV1DebugTryFeatureServiceGet200Response
func (a *DebugAPIService) InternalV1DebugTryFeatureServiceGetExecute(r ApiInternalV1DebugTryFeatureServiceGetRequest) (*InternalV1DebugTryFeatureServiceGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InternalV1DebugTryFeatureServiceGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DebugAPIService.InternalV1DebugTryFeatureServiceGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/v1/debug/try-feature-service"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.featureSwitchName == nil {
		return localVarReturnValue, nil, reportError("featureSwitchName is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "featureSwitchName", r.featureSwitchName, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResultResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ResultResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInternalV1DebugTryFeatureServiceWithHeadersGetRequest struct {
	ctx               context.Context
	ApiService        *DebugAPIService
	featureSwitchName *string
	userId            *string
	deviceId          *string
	random            *string
}

// Feature Switch Name
func (r ApiInternalV1DebugTryFeatureServiceWithHeadersGetRequest) FeatureSwitchName(featureSwitchName string) ApiInternalV1DebugTryFeatureServiceWithHeadersGetRequest {
	r.featureSwitchName = &featureSwitchName
	return r
}

// User ID
func (r ApiInternalV1DebugTryFeatureServiceWithHeadersGetRequest) UserId(userId string) ApiInternalV1DebugTryFeatureServiceWithHeadersGetRequest {
	r.userId = &userId
	return r
}

// Device ID
func (r ApiInternalV1DebugTryFeatureServiceWithHeadersGetRequest) DeviceId(deviceId string) ApiInternalV1DebugTryFeatureServiceWithHeadersGetRequest {
	r.deviceId = &deviceId
	return r
}

// Random
func (r ApiInternalV1DebugTryFeatureServiceWithHeadersGetRequest) Random(random string) ApiInternalV1DebugTryFeatureServiceWithHeadersGetRequest {
	r.random = &random
	return r
}

func (r ApiInternalV1DebugTryFeatureServiceWithHeadersGetRequest) Execute() (*InternalV1DebugTryFeatureServiceGet200Response, *http.Response, error) {
	return r.ApiService.InternalV1DebugTryFeatureServiceWithHeadersGetExecute(r)
}

/*
InternalV1DebugTryFeatureServiceWithHeadersGet Try feature service with headers

Try feature service with headers

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiInternalV1DebugTryFeatureServiceWithHeadersGetRequest
*/
func (a *DebugAPIService) InternalV1DebugTryFeatureServiceWithHeadersGet(ctx context.Context) ApiInternalV1DebugTryFeatureServiceWithHeadersGetRequest {
	return ApiInternalV1DebugTryFeatureServiceWithHeadersGetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return InternalV1DebugTryFeatureServiceGet200Response
func (a *DebugAPIService) InternalV1DebugTryFeatureServiceWithHeadersGetExecute(r ApiInternalV1DebugTryFeatureServiceWithHeadersGetRequest) (*InternalV1DebugTryFeatureServiceGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InternalV1DebugTryFeatureServiceGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DebugAPIService.InternalV1DebugTryFeatureServiceWithHeadersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/internal/v1/debug/try-feature-service/with-headers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.featureSwitchName == nil {
		return localVarReturnValue, nil, reportError("featureSwitchName is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "featureSwitchName", r.featureSwitchName, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "user-id", r.userId, "")
	}
	if r.deviceId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "deviceId", r.deviceId, "")
	}
	if r.random != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "random", r.random, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ResultResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ResultResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
