/*
Pi User Service V2

Contain Generic Information.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the DtoMigrateUserRequestAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoMigrateUserRequestAddress{}

// DtoMigrateUserRequestAddress struct for DtoMigrateUserRequestAddress
type DtoMigrateUserRequestAddress struct {
	Building     *string `json:"building,omitempty"`
	Country      *string `json:"country,omitempty"`
	CountryCode  *string `json:"countryCode,omitempty"`
	District     *string `json:"district,omitempty"`
	Floor        *string `json:"floor,omitempty"`
	HomeNo       *string `json:"homeNo,omitempty"`
	Place        *string `json:"place,omitempty"`
	Province     *string `json:"province,omitempty"`
	ProvinceCode *string `json:"provinceCode,omitempty"`
	Road         *string `json:"road,omitempty"`
	Soi          *string `json:"soi,omitempty"`
	SubDistrict  *string `json:"subDistrict,omitempty"`
	Town         *string `json:"town,omitempty"`
	Village      *string `json:"village,omitempty"`
	ZipCode      *string `json:"zipCode,omitempty"`
}

// NewDtoMigrateUserRequestAddress instantiates a new DtoMigrateUserRequestAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoMigrateUserRequestAddress() *DtoMigrateUserRequestAddress {
	this := DtoMigrateUserRequestAddress{}
	return &this
}

// NewDtoMigrateUserRequestAddressWithDefaults instantiates a new DtoMigrateUserRequestAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoMigrateUserRequestAddressWithDefaults() *DtoMigrateUserRequestAddress {
	this := DtoMigrateUserRequestAddress{}
	return &this
}

// GetBuilding returns the Building field value if set, zero value otherwise.
func (o *DtoMigrateUserRequestAddress) GetBuilding() string {
	if o == nil || IsNil(o.Building) {
		var ret string
		return ret
	}
	return *o.Building
}

// GetBuildingOk returns a tuple with the Building field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserRequestAddress) GetBuildingOk() (*string, bool) {
	if o == nil || IsNil(o.Building) {
		return nil, false
	}
	return o.Building, true
}

// HasBuilding returns a boolean if a field has been set.
func (o *DtoMigrateUserRequestAddress) HasBuilding() bool {
	if o != nil && !IsNil(o.Building) {
		return true
	}

	return false
}

// SetBuilding gets a reference to the given string and assigns it to the Building field.
func (o *DtoMigrateUserRequestAddress) SetBuilding(v string) {
	o.Building = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *DtoMigrateUserRequestAddress) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserRequestAddress) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *DtoMigrateUserRequestAddress) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *DtoMigrateUserRequestAddress) SetCountry(v string) {
	o.Country = &v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *DtoMigrateUserRequestAddress) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserRequestAddress) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *DtoMigrateUserRequestAddress) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *DtoMigrateUserRequestAddress) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetDistrict returns the District field value if set, zero value otherwise.
func (o *DtoMigrateUserRequestAddress) GetDistrict() string {
	if o == nil || IsNil(o.District) {
		var ret string
		return ret
	}
	return *o.District
}

// GetDistrictOk returns a tuple with the District field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserRequestAddress) GetDistrictOk() (*string, bool) {
	if o == nil || IsNil(o.District) {
		return nil, false
	}
	return o.District, true
}

// HasDistrict returns a boolean if a field has been set.
func (o *DtoMigrateUserRequestAddress) HasDistrict() bool {
	if o != nil && !IsNil(o.District) {
		return true
	}

	return false
}

// SetDistrict gets a reference to the given string and assigns it to the District field.
func (o *DtoMigrateUserRequestAddress) SetDistrict(v string) {
	o.District = &v
}

// GetFloor returns the Floor field value if set, zero value otherwise.
func (o *DtoMigrateUserRequestAddress) GetFloor() string {
	if o == nil || IsNil(o.Floor) {
		var ret string
		return ret
	}
	return *o.Floor
}

// GetFloorOk returns a tuple with the Floor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserRequestAddress) GetFloorOk() (*string, bool) {
	if o == nil || IsNil(o.Floor) {
		return nil, false
	}
	return o.Floor, true
}

// HasFloor returns a boolean if a field has been set.
func (o *DtoMigrateUserRequestAddress) HasFloor() bool {
	if o != nil && !IsNil(o.Floor) {
		return true
	}

	return false
}

// SetFloor gets a reference to the given string and assigns it to the Floor field.
func (o *DtoMigrateUserRequestAddress) SetFloor(v string) {
	o.Floor = &v
}

// GetHomeNo returns the HomeNo field value if set, zero value otherwise.
func (o *DtoMigrateUserRequestAddress) GetHomeNo() string {
	if o == nil || IsNil(o.HomeNo) {
		var ret string
		return ret
	}
	return *o.HomeNo
}

// GetHomeNoOk returns a tuple with the HomeNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserRequestAddress) GetHomeNoOk() (*string, bool) {
	if o == nil || IsNil(o.HomeNo) {
		return nil, false
	}
	return o.HomeNo, true
}

// HasHomeNo returns a boolean if a field has been set.
func (o *DtoMigrateUserRequestAddress) HasHomeNo() bool {
	if o != nil && !IsNil(o.HomeNo) {
		return true
	}

	return false
}

// SetHomeNo gets a reference to the given string and assigns it to the HomeNo field.
func (o *DtoMigrateUserRequestAddress) SetHomeNo(v string) {
	o.HomeNo = &v
}

// GetPlace returns the Place field value if set, zero value otherwise.
func (o *DtoMigrateUserRequestAddress) GetPlace() string {
	if o == nil || IsNil(o.Place) {
		var ret string
		return ret
	}
	return *o.Place
}

// GetPlaceOk returns a tuple with the Place field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserRequestAddress) GetPlaceOk() (*string, bool) {
	if o == nil || IsNil(o.Place) {
		return nil, false
	}
	return o.Place, true
}

// HasPlace returns a boolean if a field has been set.
func (o *DtoMigrateUserRequestAddress) HasPlace() bool {
	if o != nil && !IsNil(o.Place) {
		return true
	}

	return false
}

// SetPlace gets a reference to the given string and assigns it to the Place field.
func (o *DtoMigrateUserRequestAddress) SetPlace(v string) {
	o.Place = &v
}

// GetProvince returns the Province field value if set, zero value otherwise.
func (o *DtoMigrateUserRequestAddress) GetProvince() string {
	if o == nil || IsNil(o.Province) {
		var ret string
		return ret
	}
	return *o.Province
}

// GetProvinceOk returns a tuple with the Province field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserRequestAddress) GetProvinceOk() (*string, bool) {
	if o == nil || IsNil(o.Province) {
		return nil, false
	}
	return o.Province, true
}

// HasProvince returns a boolean if a field has been set.
func (o *DtoMigrateUserRequestAddress) HasProvince() bool {
	if o != nil && !IsNil(o.Province) {
		return true
	}

	return false
}

// SetProvince gets a reference to the given string and assigns it to the Province field.
func (o *DtoMigrateUserRequestAddress) SetProvince(v string) {
	o.Province = &v
}

// GetProvinceCode returns the ProvinceCode field value if set, zero value otherwise.
func (o *DtoMigrateUserRequestAddress) GetProvinceCode() string {
	if o == nil || IsNil(o.ProvinceCode) {
		var ret string
		return ret
	}
	return *o.ProvinceCode
}

// GetProvinceCodeOk returns a tuple with the ProvinceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserRequestAddress) GetProvinceCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ProvinceCode) {
		return nil, false
	}
	return o.ProvinceCode, true
}

// HasProvinceCode returns a boolean if a field has been set.
func (o *DtoMigrateUserRequestAddress) HasProvinceCode() bool {
	if o != nil && !IsNil(o.ProvinceCode) {
		return true
	}

	return false
}

// SetProvinceCode gets a reference to the given string and assigns it to the ProvinceCode field.
func (o *DtoMigrateUserRequestAddress) SetProvinceCode(v string) {
	o.ProvinceCode = &v
}

// GetRoad returns the Road field value if set, zero value otherwise.
func (o *DtoMigrateUserRequestAddress) GetRoad() string {
	if o == nil || IsNil(o.Road) {
		var ret string
		return ret
	}
	return *o.Road
}

// GetRoadOk returns a tuple with the Road field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserRequestAddress) GetRoadOk() (*string, bool) {
	if o == nil || IsNil(o.Road) {
		return nil, false
	}
	return o.Road, true
}

// HasRoad returns a boolean if a field has been set.
func (o *DtoMigrateUserRequestAddress) HasRoad() bool {
	if o != nil && !IsNil(o.Road) {
		return true
	}

	return false
}

// SetRoad gets a reference to the given string and assigns it to the Road field.
func (o *DtoMigrateUserRequestAddress) SetRoad(v string) {
	o.Road = &v
}

// GetSoi returns the Soi field value if set, zero value otherwise.
func (o *DtoMigrateUserRequestAddress) GetSoi() string {
	if o == nil || IsNil(o.Soi) {
		var ret string
		return ret
	}
	return *o.Soi
}

// GetSoiOk returns a tuple with the Soi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserRequestAddress) GetSoiOk() (*string, bool) {
	if o == nil || IsNil(o.Soi) {
		return nil, false
	}
	return o.Soi, true
}

// HasSoi returns a boolean if a field has been set.
func (o *DtoMigrateUserRequestAddress) HasSoi() bool {
	if o != nil && !IsNil(o.Soi) {
		return true
	}

	return false
}

// SetSoi gets a reference to the given string and assigns it to the Soi field.
func (o *DtoMigrateUserRequestAddress) SetSoi(v string) {
	o.Soi = &v
}

// GetSubDistrict returns the SubDistrict field value if set, zero value otherwise.
func (o *DtoMigrateUserRequestAddress) GetSubDistrict() string {
	if o == nil || IsNil(o.SubDistrict) {
		var ret string
		return ret
	}
	return *o.SubDistrict
}

// GetSubDistrictOk returns a tuple with the SubDistrict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserRequestAddress) GetSubDistrictOk() (*string, bool) {
	if o == nil || IsNil(o.SubDistrict) {
		return nil, false
	}
	return o.SubDistrict, true
}

// HasSubDistrict returns a boolean if a field has been set.
func (o *DtoMigrateUserRequestAddress) HasSubDistrict() bool {
	if o != nil && !IsNil(o.SubDistrict) {
		return true
	}

	return false
}

// SetSubDistrict gets a reference to the given string and assigns it to the SubDistrict field.
func (o *DtoMigrateUserRequestAddress) SetSubDistrict(v string) {
	o.SubDistrict = &v
}

// GetTown returns the Town field value if set, zero value otherwise.
func (o *DtoMigrateUserRequestAddress) GetTown() string {
	if o == nil || IsNil(o.Town) {
		var ret string
		return ret
	}
	return *o.Town
}

// GetTownOk returns a tuple with the Town field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserRequestAddress) GetTownOk() (*string, bool) {
	if o == nil || IsNil(o.Town) {
		return nil, false
	}
	return o.Town, true
}

// HasTown returns a boolean if a field has been set.
func (o *DtoMigrateUserRequestAddress) HasTown() bool {
	if o != nil && !IsNil(o.Town) {
		return true
	}

	return false
}

// SetTown gets a reference to the given string and assigns it to the Town field.
func (o *DtoMigrateUserRequestAddress) SetTown(v string) {
	o.Town = &v
}

// GetVillage returns the Village field value if set, zero value otherwise.
func (o *DtoMigrateUserRequestAddress) GetVillage() string {
	if o == nil || IsNil(o.Village) {
		var ret string
		return ret
	}
	return *o.Village
}

// GetVillageOk returns a tuple with the Village field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserRequestAddress) GetVillageOk() (*string, bool) {
	if o == nil || IsNil(o.Village) {
		return nil, false
	}
	return o.Village, true
}

// HasVillage returns a boolean if a field has been set.
func (o *DtoMigrateUserRequestAddress) HasVillage() bool {
	if o != nil && !IsNil(o.Village) {
		return true
	}

	return false
}

// SetVillage gets a reference to the given string and assigns it to the Village field.
func (o *DtoMigrateUserRequestAddress) SetVillage(v string) {
	o.Village = &v
}

// GetZipCode returns the ZipCode field value if set, zero value otherwise.
func (o *DtoMigrateUserRequestAddress) GetZipCode() string {
	if o == nil || IsNil(o.ZipCode) {
		var ret string
		return ret
	}
	return *o.ZipCode
}

// GetZipCodeOk returns a tuple with the ZipCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoMigrateUserRequestAddress) GetZipCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ZipCode) {
		return nil, false
	}
	return o.ZipCode, true
}

// HasZipCode returns a boolean if a field has been set.
func (o *DtoMigrateUserRequestAddress) HasZipCode() bool {
	if o != nil && !IsNil(o.ZipCode) {
		return true
	}

	return false
}

// SetZipCode gets a reference to the given string and assigns it to the ZipCode field.
func (o *DtoMigrateUserRequestAddress) SetZipCode(v string) {
	o.ZipCode = &v
}

func (o DtoMigrateUserRequestAddress) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoMigrateUserRequestAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Building) {
		toSerialize["building"] = o.Building
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.CountryCode) {
		toSerialize["countryCode"] = o.CountryCode
	}
	if !IsNil(o.District) {
		toSerialize["district"] = o.District
	}
	if !IsNil(o.Floor) {
		toSerialize["floor"] = o.Floor
	}
	if !IsNil(o.HomeNo) {
		toSerialize["homeNo"] = o.HomeNo
	}
	if !IsNil(o.Place) {
		toSerialize["place"] = o.Place
	}
	if !IsNil(o.Province) {
		toSerialize["province"] = o.Province
	}
	if !IsNil(o.ProvinceCode) {
		toSerialize["provinceCode"] = o.ProvinceCode
	}
	if !IsNil(o.Road) {
		toSerialize["road"] = o.Road
	}
	if !IsNil(o.Soi) {
		toSerialize["soi"] = o.Soi
	}
	if !IsNil(o.SubDistrict) {
		toSerialize["subDistrict"] = o.SubDistrict
	}
	if !IsNil(o.Town) {
		toSerialize["town"] = o.Town
	}
	if !IsNil(o.Village) {
		toSerialize["village"] = o.Village
	}
	if !IsNil(o.ZipCode) {
		toSerialize["zipCode"] = o.ZipCode
	}
	return toSerialize, nil
}

type NullableDtoMigrateUserRequestAddress struct {
	value *DtoMigrateUserRequestAddress
	isSet bool
}

func (v NullableDtoMigrateUserRequestAddress) Get() *DtoMigrateUserRequestAddress {
	return v.value
}

func (v *NullableDtoMigrateUserRequestAddress) Set(val *DtoMigrateUserRequestAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoMigrateUserRequestAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoMigrateUserRequestAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoMigrateUserRequestAddress(val *DtoMigrateUserRequestAddress) *NullableDtoMigrateUserRequestAddress {
	return &NullableDtoMigrateUserRequestAddress{value: val, isSet: true}
}

func (v NullableDtoMigrateUserRequestAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoMigrateUserRequestAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
