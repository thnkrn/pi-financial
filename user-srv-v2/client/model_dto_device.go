/*
Pi User Service V2

Contain Generic Information.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the DtoDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoDevice{}

// DtoDevice struct for DtoDevice
type DtoDevice struct {
	DeviceId               *string                    `json:"deviceId,omitempty"`
	DeviceIdentifier       *string                    `json:"deviceIdentifier,omitempty"`
	DeviceToken            *string                    `json:"deviceToken,omitempty"`
	Language               *string                    `json:"language,omitempty"`
	NotificationPreference *DtoNotificationPreference `json:"notificationPreference,omitempty"`
	Platform               *string                    `json:"platform,omitempty"`
}

// NewDtoDevice instantiates a new DtoDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoDevice() *DtoDevice {
	this := DtoDevice{}
	return &this
}

// NewDtoDeviceWithDefaults instantiates a new DtoDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoDeviceWithDefaults() *DtoDevice {
	this := DtoDevice{}
	return &this
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *DtoDevice) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoDevice) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *DtoDevice) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *DtoDevice) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetDeviceIdentifier returns the DeviceIdentifier field value if set, zero value otherwise.
func (o *DtoDevice) GetDeviceIdentifier() string {
	if o == nil || IsNil(o.DeviceIdentifier) {
		var ret string
		return ret
	}
	return *o.DeviceIdentifier
}

// GetDeviceIdentifierOk returns a tuple with the DeviceIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoDevice) GetDeviceIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceIdentifier) {
		return nil, false
	}
	return o.DeviceIdentifier, true
}

// HasDeviceIdentifier returns a boolean if a field has been set.
func (o *DtoDevice) HasDeviceIdentifier() bool {
	if o != nil && !IsNil(o.DeviceIdentifier) {
		return true
	}

	return false
}

// SetDeviceIdentifier gets a reference to the given string and assigns it to the DeviceIdentifier field.
func (o *DtoDevice) SetDeviceIdentifier(v string) {
	o.DeviceIdentifier = &v
}

// GetDeviceToken returns the DeviceToken field value if set, zero value otherwise.
func (o *DtoDevice) GetDeviceToken() string {
	if o == nil || IsNil(o.DeviceToken) {
		var ret string
		return ret
	}
	return *o.DeviceToken
}

// GetDeviceTokenOk returns a tuple with the DeviceToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoDevice) GetDeviceTokenOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceToken) {
		return nil, false
	}
	return o.DeviceToken, true
}

// HasDeviceToken returns a boolean if a field has been set.
func (o *DtoDevice) HasDeviceToken() bool {
	if o != nil && !IsNil(o.DeviceToken) {
		return true
	}

	return false
}

// SetDeviceToken gets a reference to the given string and assigns it to the DeviceToken field.
func (o *DtoDevice) SetDeviceToken(v string) {
	o.DeviceToken = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *DtoDevice) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoDevice) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *DtoDevice) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *DtoDevice) SetLanguage(v string) {
	o.Language = &v
}

// GetNotificationPreference returns the NotificationPreference field value if set, zero value otherwise.
func (o *DtoDevice) GetNotificationPreference() DtoNotificationPreference {
	if o == nil || IsNil(o.NotificationPreference) {
		var ret DtoNotificationPreference
		return ret
	}
	return *o.NotificationPreference
}

// GetNotificationPreferenceOk returns a tuple with the NotificationPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoDevice) GetNotificationPreferenceOk() (*DtoNotificationPreference, bool) {
	if o == nil || IsNil(o.NotificationPreference) {
		return nil, false
	}
	return o.NotificationPreference, true
}

// HasNotificationPreference returns a boolean if a field has been set.
func (o *DtoDevice) HasNotificationPreference() bool {
	if o != nil && !IsNil(o.NotificationPreference) {
		return true
	}

	return false
}

// SetNotificationPreference gets a reference to the given DtoNotificationPreference and assigns it to the NotificationPreference field.
func (o *DtoDevice) SetNotificationPreference(v DtoNotificationPreference) {
	o.NotificationPreference = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *DtoDevice) GetPlatform() string {
	if o == nil || IsNil(o.Platform) {
		var ret string
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoDevice) GetPlatformOk() (*string, bool) {
	if o == nil || IsNil(o.Platform) {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *DtoDevice) HasPlatform() bool {
	if o != nil && !IsNil(o.Platform) {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given string and assigns it to the Platform field.
func (o *DtoDevice) SetPlatform(v string) {
	o.Platform = &v
}

func (o DtoDevice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceId) {
		toSerialize["deviceId"] = o.DeviceId
	}
	if !IsNil(o.DeviceIdentifier) {
		toSerialize["deviceIdentifier"] = o.DeviceIdentifier
	}
	if !IsNil(o.DeviceToken) {
		toSerialize["deviceToken"] = o.DeviceToken
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.NotificationPreference) {
		toSerialize["notificationPreference"] = o.NotificationPreference
	}
	if !IsNil(o.Platform) {
		toSerialize["platform"] = o.Platform
	}
	return toSerialize, nil
}

type NullableDtoDevice struct {
	value *DtoDevice
	isSet bool
}

func (v NullableDtoDevice) Get() *DtoDevice {
	return v.value
}

func (v *NullableDtoDevice) Set(val *DtoDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoDevice(val *DtoDevice) *NullableDtoDevice {
	return &NullableDtoDevice{value: val, isSet: true}
}

func (v NullableDtoDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
