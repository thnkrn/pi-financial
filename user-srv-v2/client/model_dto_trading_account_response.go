/*
Pi User Service V2

Contain Generic Information.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the DtoTradingAccountResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoTradingAccountResponse{}

// DtoTradingAccountResponse struct for DtoTradingAccountResponse
type DtoTradingAccountResponse struct {
	AccountStatus      *string                      `json:"accountStatus,omitempty"`
	AccountType        *string                      `json:"accountType,omitempty"`
	AccountTypeCode    *string                      `json:"accountTypeCode,omitempty"`
	BankAccounts       []DtoBankAccountsResponse    `json:"bankAccounts,omitempty"`
	CreditLine         *float32                     `json:"creditLine,omitempty"`
	CreditLineCurrency *string                      `json:"creditLineCurrency,omitempty"`
	EnableBuy          *string                      `json:"enableBuy,omitempty"`
	EnableDeposit      *string                      `json:"enableDeposit,omitempty"`
	EnableSell         *string                      `json:"enableSell,omitempty"`
	EnableWithdraw     *string                      `json:"enableWithdraw,omitempty"`
	ExchangeMarketId   *string                      `json:"exchangeMarketId,omitempty"`
	ExternalAccounts   []DtoExternalAccountResponse `json:"externalAccounts,omitempty"`
	FrontName          *string                      `json:"frontName,omitempty"`
	Id                 *string                      `json:"id,omitempty"`
	ProductName        *string                      `json:"productName,omitempty"`
	TradingAccountNo   *string                      `json:"tradingAccountNo,omitempty"`
}

// NewDtoTradingAccountResponse instantiates a new DtoTradingAccountResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoTradingAccountResponse() *DtoTradingAccountResponse {
	this := DtoTradingAccountResponse{}
	return &this
}

// NewDtoTradingAccountResponseWithDefaults instantiates a new DtoTradingAccountResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoTradingAccountResponseWithDefaults() *DtoTradingAccountResponse {
	this := DtoTradingAccountResponse{}
	return &this
}

// GetAccountStatus returns the AccountStatus field value if set, zero value otherwise.
func (o *DtoTradingAccountResponse) GetAccountStatus() string {
	if o == nil || IsNil(o.AccountStatus) {
		var ret string
		return ret
	}
	return *o.AccountStatus
}

// GetAccountStatusOk returns a tuple with the AccountStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTradingAccountResponse) GetAccountStatusOk() (*string, bool) {
	if o == nil || IsNil(o.AccountStatus) {
		return nil, false
	}
	return o.AccountStatus, true
}

// HasAccountStatus returns a boolean if a field has been set.
func (o *DtoTradingAccountResponse) HasAccountStatus() bool {
	if o != nil && !IsNil(o.AccountStatus) {
		return true
	}

	return false
}

// SetAccountStatus gets a reference to the given string and assigns it to the AccountStatus field.
func (o *DtoTradingAccountResponse) SetAccountStatus(v string) {
	o.AccountStatus = &v
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *DtoTradingAccountResponse) GetAccountType() string {
	if o == nil || IsNil(o.AccountType) {
		var ret string
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTradingAccountResponse) GetAccountTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AccountType) {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *DtoTradingAccountResponse) HasAccountType() bool {
	if o != nil && !IsNil(o.AccountType) {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given string and assigns it to the AccountType field.
func (o *DtoTradingAccountResponse) SetAccountType(v string) {
	o.AccountType = &v
}

// GetAccountTypeCode returns the AccountTypeCode field value if set, zero value otherwise.
func (o *DtoTradingAccountResponse) GetAccountTypeCode() string {
	if o == nil || IsNil(o.AccountTypeCode) {
		var ret string
		return ret
	}
	return *o.AccountTypeCode
}

// GetAccountTypeCodeOk returns a tuple with the AccountTypeCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTradingAccountResponse) GetAccountTypeCodeOk() (*string, bool) {
	if o == nil || IsNil(o.AccountTypeCode) {
		return nil, false
	}
	return o.AccountTypeCode, true
}

// HasAccountTypeCode returns a boolean if a field has been set.
func (o *DtoTradingAccountResponse) HasAccountTypeCode() bool {
	if o != nil && !IsNil(o.AccountTypeCode) {
		return true
	}

	return false
}

// SetAccountTypeCode gets a reference to the given string and assigns it to the AccountTypeCode field.
func (o *DtoTradingAccountResponse) SetAccountTypeCode(v string) {
	o.AccountTypeCode = &v
}

// GetBankAccounts returns the BankAccounts field value if set, zero value otherwise.
func (o *DtoTradingAccountResponse) GetBankAccounts() []DtoBankAccountsResponse {
	if o == nil || IsNil(o.BankAccounts) {
		var ret []DtoBankAccountsResponse
		return ret
	}
	return o.BankAccounts
}

// GetBankAccountsOk returns a tuple with the BankAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTradingAccountResponse) GetBankAccountsOk() ([]DtoBankAccountsResponse, bool) {
	if o == nil || IsNil(o.BankAccounts) {
		return nil, false
	}
	return o.BankAccounts, true
}

// HasBankAccounts returns a boolean if a field has been set.
func (o *DtoTradingAccountResponse) HasBankAccounts() bool {
	if o != nil && !IsNil(o.BankAccounts) {
		return true
	}

	return false
}

// SetBankAccounts gets a reference to the given []DtoBankAccountsResponse and assigns it to the BankAccounts field.
func (o *DtoTradingAccountResponse) SetBankAccounts(v []DtoBankAccountsResponse) {
	o.BankAccounts = v
}

// GetCreditLine returns the CreditLine field value if set, zero value otherwise.
func (o *DtoTradingAccountResponse) GetCreditLine() float32 {
	if o == nil || IsNil(o.CreditLine) {
		var ret float32
		return ret
	}
	return *o.CreditLine
}

// GetCreditLineOk returns a tuple with the CreditLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTradingAccountResponse) GetCreditLineOk() (*float32, bool) {
	if o == nil || IsNil(o.CreditLine) {
		return nil, false
	}
	return o.CreditLine, true
}

// HasCreditLine returns a boolean if a field has been set.
func (o *DtoTradingAccountResponse) HasCreditLine() bool {
	if o != nil && !IsNil(o.CreditLine) {
		return true
	}

	return false
}

// SetCreditLine gets a reference to the given float32 and assigns it to the CreditLine field.
func (o *DtoTradingAccountResponse) SetCreditLine(v float32) {
	o.CreditLine = &v
}

// GetCreditLineCurrency returns the CreditLineCurrency field value if set, zero value otherwise.
func (o *DtoTradingAccountResponse) GetCreditLineCurrency() string {
	if o == nil || IsNil(o.CreditLineCurrency) {
		var ret string
		return ret
	}
	return *o.CreditLineCurrency
}

// GetCreditLineCurrencyOk returns a tuple with the CreditLineCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTradingAccountResponse) GetCreditLineCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.CreditLineCurrency) {
		return nil, false
	}
	return o.CreditLineCurrency, true
}

// HasCreditLineCurrency returns a boolean if a field has been set.
func (o *DtoTradingAccountResponse) HasCreditLineCurrency() bool {
	if o != nil && !IsNil(o.CreditLineCurrency) {
		return true
	}

	return false
}

// SetCreditLineCurrency gets a reference to the given string and assigns it to the CreditLineCurrency field.
func (o *DtoTradingAccountResponse) SetCreditLineCurrency(v string) {
	o.CreditLineCurrency = &v
}

// GetEnableBuy returns the EnableBuy field value if set, zero value otherwise.
func (o *DtoTradingAccountResponse) GetEnableBuy() string {
	if o == nil || IsNil(o.EnableBuy) {
		var ret string
		return ret
	}
	return *o.EnableBuy
}

// GetEnableBuyOk returns a tuple with the EnableBuy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTradingAccountResponse) GetEnableBuyOk() (*string, bool) {
	if o == nil || IsNil(o.EnableBuy) {
		return nil, false
	}
	return o.EnableBuy, true
}

// HasEnableBuy returns a boolean if a field has been set.
func (o *DtoTradingAccountResponse) HasEnableBuy() bool {
	if o != nil && !IsNil(o.EnableBuy) {
		return true
	}

	return false
}

// SetEnableBuy gets a reference to the given string and assigns it to the EnableBuy field.
func (o *DtoTradingAccountResponse) SetEnableBuy(v string) {
	o.EnableBuy = &v
}

// GetEnableDeposit returns the EnableDeposit field value if set, zero value otherwise.
func (o *DtoTradingAccountResponse) GetEnableDeposit() string {
	if o == nil || IsNil(o.EnableDeposit) {
		var ret string
		return ret
	}
	return *o.EnableDeposit
}

// GetEnableDepositOk returns a tuple with the EnableDeposit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTradingAccountResponse) GetEnableDepositOk() (*string, bool) {
	if o == nil || IsNil(o.EnableDeposit) {
		return nil, false
	}
	return o.EnableDeposit, true
}

// HasEnableDeposit returns a boolean if a field has been set.
func (o *DtoTradingAccountResponse) HasEnableDeposit() bool {
	if o != nil && !IsNil(o.EnableDeposit) {
		return true
	}

	return false
}

// SetEnableDeposit gets a reference to the given string and assigns it to the EnableDeposit field.
func (o *DtoTradingAccountResponse) SetEnableDeposit(v string) {
	o.EnableDeposit = &v
}

// GetEnableSell returns the EnableSell field value if set, zero value otherwise.
func (o *DtoTradingAccountResponse) GetEnableSell() string {
	if o == nil || IsNil(o.EnableSell) {
		var ret string
		return ret
	}
	return *o.EnableSell
}

// GetEnableSellOk returns a tuple with the EnableSell field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTradingAccountResponse) GetEnableSellOk() (*string, bool) {
	if o == nil || IsNil(o.EnableSell) {
		return nil, false
	}
	return o.EnableSell, true
}

// HasEnableSell returns a boolean if a field has been set.
func (o *DtoTradingAccountResponse) HasEnableSell() bool {
	if o != nil && !IsNil(o.EnableSell) {
		return true
	}

	return false
}

// SetEnableSell gets a reference to the given string and assigns it to the EnableSell field.
func (o *DtoTradingAccountResponse) SetEnableSell(v string) {
	o.EnableSell = &v
}

// GetEnableWithdraw returns the EnableWithdraw field value if set, zero value otherwise.
func (o *DtoTradingAccountResponse) GetEnableWithdraw() string {
	if o == nil || IsNil(o.EnableWithdraw) {
		var ret string
		return ret
	}
	return *o.EnableWithdraw
}

// GetEnableWithdrawOk returns a tuple with the EnableWithdraw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTradingAccountResponse) GetEnableWithdrawOk() (*string, bool) {
	if o == nil || IsNil(o.EnableWithdraw) {
		return nil, false
	}
	return o.EnableWithdraw, true
}

// HasEnableWithdraw returns a boolean if a field has been set.
func (o *DtoTradingAccountResponse) HasEnableWithdraw() bool {
	if o != nil && !IsNil(o.EnableWithdraw) {
		return true
	}

	return false
}

// SetEnableWithdraw gets a reference to the given string and assigns it to the EnableWithdraw field.
func (o *DtoTradingAccountResponse) SetEnableWithdraw(v string) {
	o.EnableWithdraw = &v
}

// GetExchangeMarketId returns the ExchangeMarketId field value if set, zero value otherwise.
func (o *DtoTradingAccountResponse) GetExchangeMarketId() string {
	if o == nil || IsNil(o.ExchangeMarketId) {
		var ret string
		return ret
	}
	return *o.ExchangeMarketId
}

// GetExchangeMarketIdOk returns a tuple with the ExchangeMarketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTradingAccountResponse) GetExchangeMarketIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExchangeMarketId) {
		return nil, false
	}
	return o.ExchangeMarketId, true
}

// HasExchangeMarketId returns a boolean if a field has been set.
func (o *DtoTradingAccountResponse) HasExchangeMarketId() bool {
	if o != nil && !IsNil(o.ExchangeMarketId) {
		return true
	}

	return false
}

// SetExchangeMarketId gets a reference to the given string and assigns it to the ExchangeMarketId field.
func (o *DtoTradingAccountResponse) SetExchangeMarketId(v string) {
	o.ExchangeMarketId = &v
}

// GetExternalAccounts returns the ExternalAccounts field value if set, zero value otherwise.
func (o *DtoTradingAccountResponse) GetExternalAccounts() []DtoExternalAccountResponse {
	if o == nil || IsNil(o.ExternalAccounts) {
		var ret []DtoExternalAccountResponse
		return ret
	}
	return o.ExternalAccounts
}

// GetExternalAccountsOk returns a tuple with the ExternalAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTradingAccountResponse) GetExternalAccountsOk() ([]DtoExternalAccountResponse, bool) {
	if o == nil || IsNil(o.ExternalAccounts) {
		return nil, false
	}
	return o.ExternalAccounts, true
}

// HasExternalAccounts returns a boolean if a field has been set.
func (o *DtoTradingAccountResponse) HasExternalAccounts() bool {
	if o != nil && !IsNil(o.ExternalAccounts) {
		return true
	}

	return false
}

// SetExternalAccounts gets a reference to the given []DtoExternalAccountResponse and assigns it to the ExternalAccounts field.
func (o *DtoTradingAccountResponse) SetExternalAccounts(v []DtoExternalAccountResponse) {
	o.ExternalAccounts = v
}

// GetFrontName returns the FrontName field value if set, zero value otherwise.
func (o *DtoTradingAccountResponse) GetFrontName() string {
	if o == nil || IsNil(o.FrontName) {
		var ret string
		return ret
	}
	return *o.FrontName
}

// GetFrontNameOk returns a tuple with the FrontName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTradingAccountResponse) GetFrontNameOk() (*string, bool) {
	if o == nil || IsNil(o.FrontName) {
		return nil, false
	}
	return o.FrontName, true
}

// HasFrontName returns a boolean if a field has been set.
func (o *DtoTradingAccountResponse) HasFrontName() bool {
	if o != nil && !IsNil(o.FrontName) {
		return true
	}

	return false
}

// SetFrontName gets a reference to the given string and assigns it to the FrontName field.
func (o *DtoTradingAccountResponse) SetFrontName(v string) {
	o.FrontName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DtoTradingAccountResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTradingAccountResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DtoTradingAccountResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DtoTradingAccountResponse) SetId(v string) {
	o.Id = &v
}

// GetProductName returns the ProductName field value if set, zero value otherwise.
func (o *DtoTradingAccountResponse) GetProductName() string {
	if o == nil || IsNil(o.ProductName) {
		var ret string
		return ret
	}
	return *o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTradingAccountResponse) GetProductNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProductName) {
		return nil, false
	}
	return o.ProductName, true
}

// HasProductName returns a boolean if a field has been set.
func (o *DtoTradingAccountResponse) HasProductName() bool {
	if o != nil && !IsNil(o.ProductName) {
		return true
	}

	return false
}

// SetProductName gets a reference to the given string and assigns it to the ProductName field.
func (o *DtoTradingAccountResponse) SetProductName(v string) {
	o.ProductName = &v
}

// GetTradingAccountNo returns the TradingAccountNo field value if set, zero value otherwise.
func (o *DtoTradingAccountResponse) GetTradingAccountNo() string {
	if o == nil || IsNil(o.TradingAccountNo) {
		var ret string
		return ret
	}
	return *o.TradingAccountNo
}

// GetTradingAccountNoOk returns a tuple with the TradingAccountNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoTradingAccountResponse) GetTradingAccountNoOk() (*string, bool) {
	if o == nil || IsNil(o.TradingAccountNo) {
		return nil, false
	}
	return o.TradingAccountNo, true
}

// HasTradingAccountNo returns a boolean if a field has been set.
func (o *DtoTradingAccountResponse) HasTradingAccountNo() bool {
	if o != nil && !IsNil(o.TradingAccountNo) {
		return true
	}

	return false
}

// SetTradingAccountNo gets a reference to the given string and assigns it to the TradingAccountNo field.
func (o *DtoTradingAccountResponse) SetTradingAccountNo(v string) {
	o.TradingAccountNo = &v
}

func (o DtoTradingAccountResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoTradingAccountResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountStatus) {
		toSerialize["accountStatus"] = o.AccountStatus
	}
	if !IsNil(o.AccountType) {
		toSerialize["accountType"] = o.AccountType
	}
	if !IsNil(o.AccountTypeCode) {
		toSerialize["accountTypeCode"] = o.AccountTypeCode
	}
	if !IsNil(o.BankAccounts) {
		toSerialize["bankAccounts"] = o.BankAccounts
	}
	if !IsNil(o.CreditLine) {
		toSerialize["creditLine"] = o.CreditLine
	}
	if !IsNil(o.CreditLineCurrency) {
		toSerialize["creditLineCurrency"] = o.CreditLineCurrency
	}
	if !IsNil(o.EnableBuy) {
		toSerialize["enableBuy"] = o.EnableBuy
	}
	if !IsNil(o.EnableDeposit) {
		toSerialize["enableDeposit"] = o.EnableDeposit
	}
	if !IsNil(o.EnableSell) {
		toSerialize["enableSell"] = o.EnableSell
	}
	if !IsNil(o.EnableWithdraw) {
		toSerialize["enableWithdraw"] = o.EnableWithdraw
	}
	if !IsNil(o.ExchangeMarketId) {
		toSerialize["exchangeMarketId"] = o.ExchangeMarketId
	}
	if !IsNil(o.ExternalAccounts) {
		toSerialize["externalAccounts"] = o.ExternalAccounts
	}
	if !IsNil(o.FrontName) {
		toSerialize["frontName"] = o.FrontName
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ProductName) {
		toSerialize["productName"] = o.ProductName
	}
	if !IsNil(o.TradingAccountNo) {
		toSerialize["tradingAccountNo"] = o.TradingAccountNo
	}
	return toSerialize, nil
}

type NullableDtoTradingAccountResponse struct {
	value *DtoTradingAccountResponse
	isSet bool
}

func (v NullableDtoTradingAccountResponse) Get() *DtoTradingAccountResponse {
	return v.value
}

func (v *NullableDtoTradingAccountResponse) Set(val *DtoTradingAccountResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoTradingAccountResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoTradingAccountResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoTradingAccountResponse(val *DtoTradingAccountResponse) *NullableDtoTradingAccountResponse {
	return &NullableDtoTradingAccountResponse{value: val, isSet: true}
}

func (v NullableDtoTradingAccountResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoTradingAccountResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
