// Code generated by MockGen. DO NOT EDIT.
// Source: ./vendor/github.com/pi-financial/go-common/logger/logger.go
//
// Generated by this command:
//
//	mockgen -source ./vendor/github.com/pi-financial/go-common/logger/logger.go -package mocklogger
//

// Package mocklogger is a generated GoMock package.
package mocklogger

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", msg)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), msg)
}

// Error mocks base method.
func (m *MockLogger) Error(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", msg)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), msg)
}

// ErrorWithContext mocks base method.
func (m *MockLogger) ErrorWithContext(ctx context.Context, msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ErrorWithContext", varargs...)
}

// ErrorWithContext indicates an expected call of ErrorWithContext.
func (mr *MockLoggerMockRecorder) ErrorWithContext(ctx, msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorWithContext", reflect.TypeOf((*MockLogger)(nil).ErrorWithContext), varargs...)
}

// Fatal mocks base method.
func (m *MockLogger) Fatal(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fatal", msg)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerMockRecorder) Fatal(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal), msg)
}

// Info mocks base method.
func (m *MockLogger) Info(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", msg)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), msg)
}

// InfoWithContext mocks base method.
func (m *MockLogger) InfoWithContext(ctx context.Context, msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "InfoWithContext", varargs...)
}

// InfoWithContext indicates an expected call of InfoWithContext.
func (mr *MockLoggerMockRecorder) InfoWithContext(ctx, msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoWithContext", reflect.TypeOf((*MockLogger)(nil).InfoWithContext), varargs...)
}

// Warn mocks base method.
func (m *MockLogger) Warn(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", msg)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), msg)
}

// WarnWithContext mocks base method.
func (m *MockLogger) WarnWithContext(ctx context.Context, msg string, fields ...zap.Field) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "WarnWithContext", varargs...)
}

// WarnWithContext indicates an expected call of WarnWithContext.
func (mr *MockLoggerMockRecorder) WarnWithContext(ctx, msg any, fields ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnWithContext", reflect.TypeOf((*MockLogger)(nil).WarnWithContext), varargs...)
}
