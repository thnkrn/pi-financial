// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/driver/client/interfaces/onboard.go
//
// Generated by this command:
//
//	mockgen -source ./internal/driver/client/interfaces/onboard.go -package mockclient
//

// Package mockclient is a generated GoMock package.
package mockclient

import (
	context "context"
	reflect "reflect"

	go_client "github.com/pi-financial/onboard-srv/go-client"
	gomock "go.uber.org/mock/gomock"
)

// MockOnboardClient is a mock of OnboardClient interface.
type MockOnboardClient struct {
	ctrl     *gomock.Controller
	recorder *MockOnboardClientMockRecorder
	isgomock struct{}
}

// MockOnboardClientMockRecorder is the mock recorder for MockOnboardClient.
type MockOnboardClientMockRecorder struct {
	mock *MockOnboardClient
}

// NewMockOnboardClient creates a new mock instance.
func NewMockOnboardClient(ctrl *gomock.Controller) *MockOnboardClient {
	mock := &MockOnboardClient{ctrl: ctrl}
	mock.recorder = &MockOnboardClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOnboardClient) EXPECT() *MockOnboardClientMockRecorder {
	return m.recorder
}

// GetBankAccountForDepositWithdrawalByProductName mocks base method.
func (m *MockOnboardClient) GetBankAccountForDepositWithdrawalByProductName(ctx context.Context, customerCode, purpose, productName string) (*go_client.PiOnboardServiceApplicationModelsBankAccountDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankAccountForDepositWithdrawalByProductName", ctx, customerCode, purpose, productName)
	ret0, _ := ret[0].(*go_client.PiOnboardServiceApplicationModelsBankAccountDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankAccountForDepositWithdrawalByProductName indicates an expected call of GetBankAccountForDepositWithdrawalByProductName.
func (mr *MockOnboardClientMockRecorder) GetBankAccountForDepositWithdrawalByProductName(ctx, customerCode, purpose, productName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankAccountForDepositWithdrawalByProductName", reflect.TypeOf((*MockOnboardClient)(nil).GetBankAccountForDepositWithdrawalByProductName), ctx, customerCode, purpose, productName)
}

// GetBanksByUserId mocks base method.
func (m *MockOnboardClient) GetBanksByUserId(ctx context.Context, userId string) ([]go_client.PiOnboardServiceAPIModelsBankInfoDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBanksByUserId", ctx, userId)
	ret0, _ := ret[0].([]go_client.PiOnboardServiceAPIModelsBankInfoDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBanksByUserId indicates an expected call of GetBanksByUserId.
func (mr *MockOnboardClientMockRecorder) GetBanksByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBanksByUserId", reflect.TypeOf((*MockOnboardClient)(nil).GetBanksByUserId), ctx, userId)
}

// GetExamQuestions mocks base method.
func (m *MockOnboardClient) GetExamQuestions(ctx context.Context, userId, examName string) ([]go_client.PiOnboardServiceAPIModelsExamQuestionsAnswersDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExamQuestions", ctx, userId, examName)
	ret0, _ := ret[0].([]go_client.PiOnboardServiceAPIModelsExamQuestionsAnswersDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExamQuestions indicates an expected call of GetExamQuestions.
func (mr *MockOnboardClientMockRecorder) GetExamQuestions(ctx, userId, examName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExamQuestions", reflect.TypeOf((*MockOnboardClient)(nil).GetExamQuestions), ctx, userId, examName)
}

// GetTradingAccountByCustomerCode mocks base method.
func (m *MockOnboardClient) GetTradingAccountByCustomerCode(ctx context.Context, customerCode string, withBankAccounts, withExternalAccounts bool) ([]go_client.PiOnboardServiceApplicationQueriesTradingAccountCustomerTradingAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradingAccountByCustomerCode", ctx, customerCode, withBankAccounts, withExternalAccounts)
	ret0, _ := ret[0].([]go_client.PiOnboardServiceApplicationQueriesTradingAccountCustomerTradingAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradingAccountByCustomerCode indicates an expected call of GetTradingAccountByCustomerCode.
func (mr *MockOnboardClientMockRecorder) GetTradingAccountByCustomerCode(ctx, customerCode, withBankAccounts, withExternalAccounts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradingAccountByCustomerCode", reflect.TypeOf((*MockOnboardClient)(nil).GetTradingAccountByCustomerCode), ctx, customerCode, withBankAccounts, withExternalAccounts)
}
