// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/driver/client/interfaces/information.go
//
// Generated by this command:
//
//	mockgen -source ./internal/driver/client/interfaces/information.go -package mockclient
//

// Package mockclient is a generated GoMock package.
package mockclient

import (
	context "context"
	reflect "reflect"

	client "github.com/pi-financial/information-srv/client"
	gomock "go.uber.org/mock/gomock"
)

// MockInformationClient is a mock of InformationClient interface.
type MockInformationClient struct {
	ctrl     *gomock.Controller
	recorder *MockInformationClientMockRecorder
	isgomock struct{}
}

// MockInformationClientMockRecorder is the mock recorder for MockInformationClient.
type MockInformationClientMockRecorder struct {
	mock *MockInformationClient
}

// NewMockInformationClient creates a new mock instance.
func NewMockInformationClient(ctrl *gomock.Controller) *MockInformationClient {
	mock := &MockInformationClient{ctrl: ctrl}
	mock.recorder = &MockInformationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInformationClient) EXPECT() *MockInformationClientMockRecorder {
	return m.recorder
}

// GetBankBranchByBankCodeAndBranchCode mocks base method.
func (m *MockInformationClient) GetBankBranchByBankCodeAndBranchCode(ctx context.Context, bankCode, branchCode string) ([]client.BankBranchBankBranch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankBranchByBankCodeAndBranchCode", ctx, bankCode, branchCode)
	ret0, _ := ret[0].([]client.BankBranchBankBranch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankBranchByBankCodeAndBranchCode indicates an expected call of GetBankBranchByBankCodeAndBranchCode.
func (mr *MockInformationClientMockRecorder) GetBankBranchByBankCodeAndBranchCode(ctx, bankCode, branchCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankBranchByBankCodeAndBranchCode", reflect.TypeOf((*MockInformationClient)(nil).GetBankBranchByBankCodeAndBranchCode), ctx, bankCode, branchCode)
}

// GetBankByBankCode mocks base method.
func (m *MockInformationClient) GetBankByBankCode(ctx context.Context, bankCode string) ([]client.BankBank, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankByBankCode", ctx, bankCode)
	ret0, _ := ret[0].([]client.BankBank)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankByBankCode indicates an expected call of GetBankByBankCode.
func (mr *MockInformationClientMockRecorder) GetBankByBankCode(ctx, bankCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankByBankCode", reflect.TypeOf((*MockInformationClient)(nil).GetBankByBankCode), ctx, bankCode)
}

// GetProductByAccountTypeCode mocks base method.
func (m *MockInformationClient) GetProductByAccountTypeCode(ctx context.Context, accountTypeCode string) ([]client.ProductProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByAccountTypeCode", ctx, accountTypeCode)
	ret0, _ := ret[0].([]client.ProductProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByAccountTypeCode indicates an expected call of GetProductByAccountTypeCode.
func (mr *MockInformationClientMockRecorder) GetProductByAccountTypeCode(ctx, accountTypeCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByAccountTypeCode", reflect.TypeOf((*MockInformationClient)(nil).GetProductByAccountTypeCode), ctx, accountTypeCode)
}

// GetProductByProductName mocks base method.
func (m *MockInformationClient) GetProductByProductName(ctx context.Context, productName string) ([]client.ProductProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByProductName", ctx, productName)
	ret0, _ := ret[0].([]client.ProductProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByProductName indicates an expected call of GetProductByProductName.
func (mr *MockInformationClientMockRecorder) GetProductByProductName(ctx, productName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByProductName", reflect.TypeOf((*MockInformationClient)(nil).GetProductByProductName), ctx, productName)
}
