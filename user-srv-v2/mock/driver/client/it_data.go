// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/driver/client/interfaces/it_data.go
//
// Generated by this command:
//
//	mockgen -source ./internal/driver/client/interfaces/it_data.go -package mockclient
//

// Package mockclient is a generated GoMock package.
package mockclient

import (
	context "context"
	reflect "reflect"

	go_client "github.com/pi-financial/it-data-api-client/go-client"
	gomock "go.uber.org/mock/gomock"
)

// MockItDataClient is a mock of ItDataClient interface.
type MockItDataClient struct {
	ctrl     *gomock.Controller
	recorder *MockItDataClientMockRecorder
	isgomock struct{}
}

// MockItDataClientMockRecorder is the mock recorder for MockItDataClient.
type MockItDataClientMockRecorder struct {
	mock *MockItDataClient
}

// NewMockItDataClient creates a new mock instance.
func NewMockItDataClient(ctrl *gomock.Controller) *MockItDataClient {
	mock := &MockItDataClient{ctrl: ctrl}
	mock.recorder = &MockItDataClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItDataClient) EXPECT() *MockItDataClientMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockItDataClient) GetAccount(ctx context.Context, cardId, customerCode *string) ([]go_client.DatumAccountInfoV2Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, cardId, customerCode)
	ret0, _ := ret[0].([]go_client.DatumAccountInfoV2Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockItDataClientMockRecorder) GetAccount(ctx, cardId, customerCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockItDataClient)(nil).GetAccount), ctx, cardId, customerCode)
}

// GetAddress mocks base method.
func (m *MockItDataClient) GetAddress(ctx context.Context, cardId, customerCode *string) ([]go_client.DatumAddrInfoModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", ctx, cardId, customerCode)
	ret0, _ := ret[0].([]go_client.DatumAddrInfoModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockItDataClientMockRecorder) GetAddress(ctx, cardId, customerCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockItDataClient)(nil).GetAddress), ctx, cardId, customerCode)
}

// GetAtsBankAccounts mocks base method.
func (m *MockItDataClient) GetAtsBankAccounts(ctx context.Context, customerCode string) ([]go_client.AtsInfoDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAtsBankAccounts", ctx, customerCode)
	ret0, _ := ret[0].([]go_client.AtsInfoDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAtsBankAccounts indicates an expected call of GetAtsBankAccounts.
func (mr *MockItDataClientMockRecorder) GetAtsBankAccounts(ctx, customerCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAtsBankAccounts", reflect.TypeOf((*MockItDataClient)(nil).GetAtsBankAccounts), ctx, customerCode)
}

// GetCustomerInfo mocks base method.
func (m *MockItDataClient) GetCustomerInfo(ctx context.Context, cardId, customerCode *string) ([]go_client.DatumCustInfoV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerInfo", ctx, cardId, customerCode)
	ret0, _ := ret[0].([]go_client.DatumCustInfoV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerInfo indicates an expected call of GetCustomerInfo.
func (mr *MockItDataClientMockRecorder) GetCustomerInfo(ctx, cardId, customerCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerInfo", reflect.TypeOf((*MockItDataClient)(nil).GetCustomerInfo), ctx, cardId, customerCode)
}

// GetCustomerInfoOthers mocks base method.
func (m *MockItDataClient) GetCustomerInfoOthers(ctx context.Context, cardId, customerCode *string) ([]go_client.DatasCustInfoOthers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerInfoOthers", ctx, cardId, customerCode)
	ret0, _ := ret[0].([]go_client.DatasCustInfoOthers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerInfoOthers indicates an expected call of GetCustomerInfoOthers.
func (mr *MockItDataClientMockRecorder) GetCustomerInfoOthers(ctx, cardId, customerCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerInfoOthers", reflect.TypeOf((*MockItDataClient)(nil).GetCustomerInfoOthers), ctx, cardId, customerCode)
}

// GetFrontName mocks base method.
func (m *MockItDataClient) GetFrontName(ctx context.Context, cardId, customerCode *string) ([]go_client.FrontNameDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrontName", ctx, cardId, customerCode)
	ret0, _ := ret[0].([]go_client.FrontNameDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFrontName indicates an expected call of GetFrontName.
func (mr *MockItDataClientMockRecorder) GetFrontName(ctx, cardId, customerCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrontName", reflect.TypeOf((*MockItDataClient)(nil).GetFrontName), ctx, cardId, customerCode)
}

// GetKyc mocks base method.
func (m *MockItDataClient) GetKyc(ctx context.Context, cardId, customerCode *string) ([]go_client.KycDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKyc", ctx, cardId, customerCode)
	ret0, _ := ret[0].([]go_client.KycDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKyc indicates an expected call of GetKyc.
func (mr *MockItDataClientMockRecorder) GetKyc(ctx, cardId, customerCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKyc", reflect.TypeOf((*MockItDataClient)(nil).GetKyc), ctx, cardId, customerCode)
}

// GetSuitChoice mocks base method.
func (m *MockItDataClient) GetSuitChoice(ctx context.Context, cardId, customerCode *string) ([]go_client.SuitChoiceDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuitChoice", ctx, cardId, customerCode)
	ret0, _ := ret[0].([]go_client.SuitChoiceDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuitChoice indicates an expected call of GetSuitChoice.
func (mr *MockItDataClientMockRecorder) GetSuitChoice(ctx, cardId, customerCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuitChoice", reflect.TypeOf((*MockItDataClient)(nil).GetSuitChoice), ctx, cardId, customerCode)
}

// GetSuitTest mocks base method.
func (m *MockItDataClient) GetSuitTest(ctx context.Context, customerCode string) ([]go_client.SuitTestDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuitTest", ctx, customerCode)
	ret0, _ := ret[0].([]go_client.SuitTestDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuitTest indicates an expected call of GetSuitTest.
func (mr *MockItDataClientMockRecorder) GetSuitTest(ctx, customerCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuitTest", reflect.TypeOf((*MockItDataClient)(nil).GetSuitTest), ctx, customerCode)
}
