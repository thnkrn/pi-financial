// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/interfaces/user_info.go
//
// Generated by this command:
//
//	mockgen -source ./internal/repository/interfaces/user_info.go -package mockrepository
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	domain "github.com/pi-financial/user-srv-v2/internal/domain"
	dto "github.com/pi-financial/user-srv-v2/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockUserInfoRepository is a mock of UserInfoRepository interface.
type MockUserInfoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserInfoRepositoryMockRecorder
	isgomock struct{}
}

// MockUserInfoRepositoryMockRecorder is the mock recorder for MockUserInfoRepository.
type MockUserInfoRepositoryMockRecorder struct {
	mock *MockUserInfoRepository
}

// NewMockUserInfoRepository creates a new mock instance.
func NewMockUserInfoRepository(ctrl *gomock.Controller) *MockUserInfoRepository {
	mock := &MockUserInfoRepository{ctrl: ctrl}
	mock.recorder = &MockUserInfoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInfoRepository) EXPECT() *MockUserInfoRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserInfoRepository) Create(ctx context.Context, userInfo *domain.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserInfoRepositoryMockRecorder) Create(ctx, userInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserInfoRepository)(nil).Create), ctx, userInfo)
}

// FindByCitizenId mocks base method.
func (m *MockUserInfoRepository) FindByCitizenId(ctx context.Context, citizenId string) (*domain.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCitizenId", ctx, citizenId)
	ret0, _ := ret[0].(*domain.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCitizenId indicates an expected call of FindByCitizenId.
func (mr *MockUserInfoRepositoryMockRecorder) FindByCitizenId(ctx, citizenId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCitizenId", reflect.TypeOf((*MockUserInfoRepository)(nil).FindByCitizenId), ctx, citizenId)
}

// FindByEmail mocks base method.
func (m *MockUserInfoRepository) FindByEmail(ctx context.Context, email string) (*domain.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserInfoRepositoryMockRecorder) FindByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserInfoRepository)(nil).FindByEmail), ctx, email)
}

// FindByFilterScopes mocks base method.
func (m *MockUserInfoRepository) FindByFilterScopes(ctx context.Context, filter dto.UserInfoQueryFilter) ([]domain.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByFilterScopes", ctx, filter)
	ret0, _ := ret[0].([]domain.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByFilterScopes indicates an expected call of FindByFilterScopes.
func (mr *MockUserInfoRepositoryMockRecorder) FindByFilterScopes(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByFilterScopes", reflect.TypeOf((*MockUserInfoRepository)(nil).FindByFilterScopes), ctx, filter)
}

// FindById mocks base method.
func (m *MockUserInfoRepository) FindById(ctx context.Context, Id string) (*domain.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, Id)
	ret0, _ := ret[0].(*domain.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserInfoRepositoryMockRecorder) FindById(ctx, Id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserInfoRepository)(nil).FindById), ctx, Id)
}

// FindByMarketingId mocks base method.
func (m *MockUserInfoRepository) FindByMarketingId(ctx context.Context, marketingId string) ([]domain.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMarketingId", ctx, marketingId)
	ret0, _ := ret[0].([]domain.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMarketingId indicates an expected call of FindByMarketingId.
func (mr *MockUserInfoRepositoryMockRecorder) FindByMarketingId(ctx, marketingId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMarketingId", reflect.TypeOf((*MockUserInfoRepository)(nil).FindByMarketingId), ctx, marketingId)
}

// FindByPhoneNumber mocks base method.
func (m *MockUserInfoRepository) FindByPhoneNumber(ctx context.Context, phoneNumber string) (*domain.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPhoneNumber", ctx, phoneNumber)
	ret0, _ := ret[0].(*domain.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPhoneNumber indicates an expected call of FindByPhoneNumber.
func (mr *MockUserInfoRepositoryMockRecorder) FindByPhoneNumber(ctx, phoneNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPhoneNumber", reflect.TypeOf((*MockUserInfoRepository)(nil).FindByPhoneNumber), ctx, phoneNumber)
}

// Update mocks base method.
func (m *MockUserInfoRepository) Update(ctx context.Context, userInfo *domain.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserInfoRepositoryMockRecorder) Update(ctx, userInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserInfoRepository)(nil).Update), ctx, userInfo)
}
