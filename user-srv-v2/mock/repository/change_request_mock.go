// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/interfaces/change_request.go
//
// Generated by this command:
//
//	mockgen -source ./internal/repository/interfaces/change_request.go -package mockrepository -destination ./mock/repository/change_request_mock.go
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	database "github.com/pi-financial/go-common/database"
	domain "github.com/pi-financial/user-srv-v2/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockChangeRequestRepository is a mock of ChangeRequestRepository interface.
type MockChangeRequestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChangeRequestRepositoryMockRecorder
	isgomock struct{}
}

// MockChangeRequestRepositoryMockRecorder is the mock recorder for MockChangeRequestRepository.
type MockChangeRequestRepositoryMockRecorder struct {
	mock *MockChangeRequestRepository
}

// NewMockChangeRequestRepository creates a new mock instance.
func NewMockChangeRequestRepository(ctrl *gomock.Controller) *MockChangeRequestRepository {
	mock := &MockChangeRequestRepository{ctrl: ctrl}
	mock.recorder = &MockChangeRequestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChangeRequestRepository) EXPECT() *MockChangeRequestRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockChangeRequestRepository) Create(ctx context.Context, changeRequest *domain.ChangeRequest) (*uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, changeRequest)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockChangeRequestRepositoryMockRecorder) Create(ctx, changeRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChangeRequestRepository)(nil).Create), ctx, changeRequest)
}

// FindById mocks base method.
func (m *MockChangeRequestRepository) FindById(ctx context.Context, id uuid.UUID) (*domain.ChangeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(*domain.ChangeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockChangeRequestRepositoryMockRecorder) FindById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockChangeRequestRepository)(nil).FindById), ctx, id)
}

// FindByWithPagination mocks base method.
func (m *MockChangeRequestRepository) FindByWithPagination(ctx context.Context, filters *domain.ChangeRequest, params database.PaginationParams) (*database.PaginationResult[domain.ChangeRequest], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByWithPagination", ctx, filters, params)
	ret0, _ := ret[0].(*database.PaginationResult[domain.ChangeRequest])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByWithPagination indicates an expected call of FindByWithPagination.
func (mr *MockChangeRequestRepositoryMockRecorder) FindByWithPagination(ctx, filters, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByWithPagination", reflect.TypeOf((*MockChangeRequestRepository)(nil).FindByWithPagination), ctx, filters, params)
}

// FindLatestByUserIdAndInfoType mocks base method.
func (m *MockChangeRequestRepository) FindLatestByUserIdAndInfoType(ctx context.Context, userId uuid.UUID, infoType domain.ChangeRequestInfoType) (*domain.ChangeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestByUserIdAndInfoType", ctx, userId, infoType)
	ret0, _ := ret[0].(*domain.ChangeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestByUserIdAndInfoType indicates an expected call of FindLatestByUserIdAndInfoType.
func (mr *MockChangeRequestRepositoryMockRecorder) FindLatestByUserIdAndInfoType(ctx, userId, infoType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestByUserIdAndInfoType", reflect.TypeOf((*MockChangeRequestRepository)(nil).FindLatestByUserIdAndInfoType), ctx, userId, infoType)
}

// Update mocks base method.
func (m *MockChangeRequestRepository) Update(ctx context.Context, changeRequest *domain.ChangeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, changeRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockChangeRequestRepositoryMockRecorder) Update(ctx, changeRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockChangeRequestRepository)(nil).Update), ctx, changeRequest)
}
