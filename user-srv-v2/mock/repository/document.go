// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/interfaces/document.go
//
// Generated by this command:
//
//	mockgen -source ./internal/repository/interfaces/document.go -package mockrepository -destination ./mock/repository/document.go
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	domain "github.com/pi-financial/user-srv-v2/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockDocumentRepository is a mock of DocumentRepository interface.
type MockDocumentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentRepositoryMockRecorder
	isgomock struct{}
}

// MockDocumentRepositoryMockRecorder is the mock recorder for MockDocumentRepository.
type MockDocumentRepositoryMockRecorder struct {
	mock *MockDocumentRepository
}

// NewMockDocumentRepository creates a new mock instance.
func NewMockDocumentRepository(ctrl *gomock.Controller) *MockDocumentRepository {
	mock := &MockDocumentRepository{ctrl: ctrl}
	mock.recorder = &MockDocumentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentRepository) EXPECT() *MockDocumentRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDocumentRepository) Create(ctx context.Context, document *domain.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDocumentRepositoryMockRecorder) Create(ctx, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDocumentRepository)(nil).Create), ctx, document)
}

// FindByUserId mocks base method.
func (m *MockDocumentRepository) FindByUserId(ctx context.Context, userId string, documentType *string) ([]domain.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", ctx, userId, documentType)
	ret0, _ := ret[0].([]domain.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockDocumentRepositoryMockRecorder) FindByUserId(ctx, userId, documentType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockDocumentRepository)(nil).FindByUserId), ctx, userId, documentType)
}
