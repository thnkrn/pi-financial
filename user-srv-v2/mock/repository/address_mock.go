// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/interfaces/address.go
//
// Generated by this command:
//
//	mockgen -source ./internal/repository/interfaces/address.go -package mockrepository -destination=mock/repository/address_mock.go
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	domain "github.com/pi-financial/user-srv-v2/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAddressRepository is a mock of AddressRepository interface.
type MockAddressRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAddressRepositoryMockRecorder
	isgomock struct{}
}

// MockAddressRepositoryMockRecorder is the mock recorder for MockAddressRepository.
type MockAddressRepositoryMockRecorder struct {
	mock *MockAddressRepository
}

// NewMockAddressRepository creates a new mock instance.
func NewMockAddressRepository(ctrl *gomock.Controller) *MockAddressRepository {
	mock := &MockAddressRepository{ctrl: ctrl}
	mock.recorder = &MockAddressRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressRepository) EXPECT() *MockAddressRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAddressRepository) Create(ctx context.Context, address *domain.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAddressRepositoryMockRecorder) Create(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAddressRepository)(nil).Create), ctx, address)
}

// FindByUserId mocks base method.
func (m *MockAddressRepository) FindByUserId(ctx context.Context, userId string) (*domain.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", ctx, userId)
	ret0, _ := ret[0].(*domain.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockAddressRepositoryMockRecorder) FindByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockAddressRepository)(nil).FindByUserId), ctx, userId)
}

// Update mocks base method.
func (m *MockAddressRepository) Update(ctx context.Context, address *domain.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAddressRepositoryMockRecorder) Update(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAddressRepository)(nil).Update), ctx, address)
}

// UpsertByUserId mocks base method.
func (m *MockAddressRepository) UpsertByUserId(ctx context.Context, id uuid.UUID, address *domain.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertByUserId", ctx, id, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertByUserId indicates an expected call of UpsertByUserId.
func (mr *MockAddressRepositoryMockRecorder) UpsertByUserId(ctx, id, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertByUserId", reflect.TypeOf((*MockAddressRepository)(nil).UpsertByUserId), ctx, id, address)
}
