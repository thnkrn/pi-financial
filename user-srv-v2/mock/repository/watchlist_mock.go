// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/interfaces/watchlist.go
//
// Generated by this command:
//
//	mockgen -source ./internal/repository/interfaces/watchlist.go -package mockrepository
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	domain "github.com/pi-financial/user-srv-v2/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockWatchlistRepository is a mock of WatchlistRepository interface.
type MockWatchlistRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWatchlistRepositoryMockRecorder
	isgomock struct{}
}

// MockWatchlistRepositoryMockRecorder is the mock recorder for MockWatchlistRepository.
type MockWatchlistRepositoryMockRecorder struct {
	mock *MockWatchlistRepository
}

// NewMockWatchlistRepository creates a new mock instance.
func NewMockWatchlistRepository(ctrl *gomock.Controller) *MockWatchlistRepository {
	mock := &MockWatchlistRepository{ctrl: ctrl}
	mock.recorder = &MockWatchlistRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatchlistRepository) EXPECT() *MockWatchlistRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWatchlistRepository) Create(ctx context.Context, watchlist *domain.Watchlist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, watchlist)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockWatchlistRepositoryMockRecorder) Create(ctx, watchlist any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWatchlistRepository)(nil).Create), ctx, watchlist)
}

// Delete mocks base method.
func (m *MockWatchlistRepository) Delete(ctx context.Context, watchlist *domain.Watchlist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, watchlist)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWatchlistRepositoryMockRecorder) Delete(ctx, watchlist any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWatchlistRepository)(nil).Delete), ctx, watchlist)
}

// Find mocks base method.
func (m *MockWatchlistRepository) Find(ctx context.Context, id, userId uuid.UUID, venue string) ([]domain.Watchlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id, userId, venue)
	ret0, _ := ret[0].([]domain.Watchlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockWatchlistRepositoryMockRecorder) Find(ctx, id, userId, venue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockWatchlistRepository)(nil).Find), ctx, id, userId, venue)
}

// FindById mocks base method.
func (m *MockWatchlistRepository) FindById(ctx context.Context, id string) (domain.Watchlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(domain.Watchlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockWatchlistRepositoryMockRecorder) FindById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockWatchlistRepository)(nil).FindById), ctx, id)
}

// FindByUserId mocks base method.
func (m *MockWatchlistRepository) FindByUserId(ctx context.Context, userId string) ([]domain.Watchlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", ctx, userId)
	ret0, _ := ret[0].([]domain.Watchlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockWatchlistRepositoryMockRecorder) FindByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockWatchlistRepository)(nil).FindByUserId), ctx, userId)
}

// Update mocks base method.
func (m *MockWatchlistRepository) Update(ctx context.Context, watchlist *domain.Watchlist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, watchlist)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockWatchlistRepositoryMockRecorder) Update(ctx, watchlist any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockWatchlistRepository)(nil).Update), ctx, watchlist)
}
