// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/interfaces/external_account.go
//
// Generated by this command:
//
//	mockgen -source ./internal/repository/interfaces/external_account.go -package mockrepository
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	domain "github.com/pi-financial/user-srv-v2/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockExternalAccountRepository is a mock of ExternalAccountRepository interface.
type MockExternalAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExternalAccountRepositoryMockRecorder
	isgomock struct{}
}

// MockExternalAccountRepositoryMockRecorder is the mock recorder for MockExternalAccountRepository.
type MockExternalAccountRepositoryMockRecorder struct {
	mock *MockExternalAccountRepository
}

// NewMockExternalAccountRepository creates a new mock instance.
func NewMockExternalAccountRepository(ctrl *gomock.Controller) *MockExternalAccountRepository {
	mock := &MockExternalAccountRepository{ctrl: ctrl}
	mock.recorder = &MockExternalAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalAccountRepository) EXPECT() *MockExternalAccountRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExternalAccountRepository) Create(ctx context.Context, externalAccount *domain.ExternalAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, externalAccount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockExternalAccountRepositoryMockRecorder) Create(ctx, externalAccount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExternalAccountRepository)(nil).Create), ctx, externalAccount)
}

// FindByTradeAccountId mocks base method.
func (m *MockExternalAccountRepository) FindByTradeAccountId(ctx context.Context, tradeAccountId uuid.UUID) ([]domain.ExternalAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTradeAccountId", ctx, tradeAccountId)
	ret0, _ := ret[0].([]domain.ExternalAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTradeAccountId indicates an expected call of FindByTradeAccountId.
func (mr *MockExternalAccountRepositoryMockRecorder) FindByTradeAccountId(ctx, tradeAccountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTradeAccountId", reflect.TypeOf((*MockExternalAccountRepository)(nil).FindByTradeAccountId), ctx, tradeAccountId)
}

// UpsertByTradeAccountId mocks base method.
func (m *MockExternalAccountRepository) UpsertByTradeAccountId(ctx context.Context, tradeAccountId uuid.UUID, externalAccount *domain.ExternalAccount) (*domain.ExternalAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertByTradeAccountId", ctx, tradeAccountId, externalAccount)
	ret0, _ := ret[0].(*domain.ExternalAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertByTradeAccountId indicates an expected call of UpsertByTradeAccountId.
func (mr *MockExternalAccountRepositoryMockRecorder) UpsertByTradeAccountId(ctx, tradeAccountId, externalAccount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertByTradeAccountId", reflect.TypeOf((*MockExternalAccountRepository)(nil).UpsertByTradeAccountId), ctx, tradeAccountId, externalAccount)
}
