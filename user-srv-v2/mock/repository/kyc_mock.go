// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/interfaces/kyc.go
//
// Generated by this command:
//
//	mockgen -source ./internal/repository/interfaces/kyc.go -package mockrepository
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	domain "github.com/pi-financial/user-srv-v2/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockKycRepository is a mock of KycRepository interface.
type MockKycRepository struct {
	ctrl     *gomock.Controller
	recorder *MockKycRepositoryMockRecorder
	isgomock struct{}
}

// MockKycRepositoryMockRecorder is the mock recorder for MockKycRepository.
type MockKycRepositoryMockRecorder struct {
	mock *MockKycRepository
}

// NewMockKycRepository creates a new mock instance.
func NewMockKycRepository(ctrl *gomock.Controller) *MockKycRepository {
	mock := &MockKycRepository{ctrl: ctrl}
	mock.recorder = &MockKycRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKycRepository) EXPECT() *MockKycRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockKycRepository) Create(ctx context.Context, kyc *domain.Kyc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, kyc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockKycRepositoryMockRecorder) Create(ctx, kyc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKycRepository)(nil).Create), ctx, kyc)
}

// GetByUserId mocks base method.
func (m *MockKycRepository) GetByUserId(ctx context.Context, userId uuid.UUID) (*domain.Kyc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", ctx, userId)
	ret0, _ := ret[0].(*domain.Kyc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockKycRepositoryMockRecorder) GetByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockKycRepository)(nil).GetByUserId), ctx, userId)
}

// Update mocks base method.
func (m *MockKycRepository) Update(ctx context.Context, kyc *domain.Kyc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, kyc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockKycRepositoryMockRecorder) Update(ctx, kyc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockKycRepository)(nil).Update), ctx, kyc)
}

// UpsertById mocks base method.
func (m *MockKycRepository) UpsertById(ctx context.Context, id uuid.UUID, kyc *domain.Kyc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertById", ctx, id, kyc)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertById indicates an expected call of UpsertById.
func (mr *MockKycRepositoryMockRecorder) UpsertById(ctx, id, kyc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertById", reflect.TypeOf((*MockKycRepository)(nil).UpsertById), ctx, id, kyc)
}

// UpsertByUserId mocks base method.
func (m *MockKycRepository) UpsertByUserId(ctx context.Context, id uuid.UUID, kyc *domain.Kyc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertByUserId", ctx, id, kyc)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertByUserId indicates an expected call of UpsertByUserId.
func (mr *MockKycRepositoryMockRecorder) UpsertByUserId(ctx, id, kyc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertByUserId", reflect.TypeOf((*MockKycRepository)(nil).UpsertByUserId), ctx, id, kyc)
}
