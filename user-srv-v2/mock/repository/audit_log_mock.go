// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/interfaces/audit_log.go
//
// Generated by this command:
//
//	mockgen -source ./internal/repository/interfaces/audit_log.go -package mockrepository -destination ./mock/repository/audit_log_mock.go
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	domain "github.com/pi-financial/user-srv-v2/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockAuditLogRepository is a mock of AuditLogRepository interface.
type MockAuditLogRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuditLogRepositoryMockRecorder
	isgomock struct{}
}

// MockAuditLogRepositoryMockRecorder is the mock recorder for MockAuditLogRepository.
type MockAuditLogRepositoryMockRecorder struct {
	mock *MockAuditLogRepository
}

// NewMockAuditLogRepository creates a new mock instance.
func NewMockAuditLogRepository(ctrl *gomock.Controller) *MockAuditLogRepository {
	mock := &MockAuditLogRepository{ctrl: ctrl}
	mock.recorder = &MockAuditLogRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditLogRepository) EXPECT() *MockAuditLogRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuditLogRepository) Create(ctx context.Context, auditLog *domain.AuditLog) (*uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, auditLog)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAuditLogRepositoryMockRecorder) Create(ctx, auditLog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuditLogRepository)(nil).Create), ctx, auditLog)
}

// FindByChangeRequestId mocks base method.
func (m *MockAuditLogRepository) FindByChangeRequestId(ctx context.Context, changeRequestId uuid.UUID, filter *domain.AuditLog) ([]domain.AuditLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByChangeRequestId", ctx, changeRequestId, filter)
	ret0, _ := ret[0].([]domain.AuditLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByChangeRequestId indicates an expected call of FindByChangeRequestId.
func (mr *MockAuditLogRepositoryMockRecorder) FindByChangeRequestId(ctx, changeRequestId, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByChangeRequestId", reflect.TypeOf((*MockAuditLogRepository)(nil).FindByChangeRequestId), ctx, changeRequestId, filter)
}
