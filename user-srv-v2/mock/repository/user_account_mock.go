// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/interfaces/user_account.go
//
// Generated by this command:
//
//	mockgen -source ./internal/repository/interfaces/user_account.go -package mockrepository
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	domain "github.com/pi-financial/user-srv-v2/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUserAccountRepository is a mock of UserAccountRepository interface.
type MockUserAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserAccountRepositoryMockRecorder
	isgomock struct{}
}

// MockUserAccountRepositoryMockRecorder is the mock recorder for MockUserAccountRepository.
type MockUserAccountRepositoryMockRecorder struct {
	mock *MockUserAccountRepository
}

// NewMockUserAccountRepository creates a new mock instance.
func NewMockUserAccountRepository(ctrl *gomock.Controller) *MockUserAccountRepository {
	mock := &MockUserAccountRepository{ctrl: ctrl}
	mock.recorder = &MockUserAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAccountRepository) EXPECT() *MockUserAccountRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserAccountRepository) Create(ctx context.Context, userAccount *domain.UserAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userAccount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserAccountRepositoryMockRecorder) Create(ctx, userAccount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserAccountRepository)(nil).Create), ctx, userAccount)
}

// FindByCustomerCode mocks base method.
func (m *MockUserAccountRepository) FindByCustomerCode(ctx context.Context, customerCode string) (*domain.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCustomerCode", ctx, customerCode)
	ret0, _ := ret[0].(*domain.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCustomerCode indicates an expected call of FindByCustomerCode.
func (mr *MockUserAccountRepositoryMockRecorder) FindByCustomerCode(ctx, customerCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCustomerCode", reflect.TypeOf((*MockUserAccountRepository)(nil).FindByCustomerCode), ctx, customerCode)
}

// FindById mocks base method.
func (m *MockUserAccountRepository) FindById(ctx context.Context, Id string) (*domain.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, Id)
	ret0, _ := ret[0].(*domain.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserAccountRepositoryMockRecorder) FindById(ctx, Id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserAccountRepository)(nil).FindById), ctx, Id)
}

// FindByUserId mocks base method.
func (m *MockUserAccountRepository) FindByUserId(ctx context.Context, userId string) ([]domain.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", ctx, userId)
	ret0, _ := ret[0].([]domain.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockUserAccountRepositoryMockRecorder) FindByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockUserAccountRepository)(nil).FindByUserId), ctx, userId)
}

// Update mocks base method.
func (m *MockUserAccountRepository) Update(ctx context.Context, userInfo *domain.UserAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserAccountRepositoryMockRecorder) Update(ctx, userInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserAccountRepository)(nil).Update), ctx, userInfo)
}

// UpsertById mocks base method.
func (m *MockUserAccountRepository) UpsertById(ctx context.Context, id string, userAccount *domain.UserAccount) (*domain.UserAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertById", ctx, id, userAccount)
	ret0, _ := ret[0].(*domain.UserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertById indicates an expected call of UpsertById.
func (mr *MockUserAccountRepositoryMockRecorder) UpsertById(ctx, id, userAccount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertById", reflect.TypeOf((*MockUserAccountRepository)(nil).UpsertById), ctx, id, userAccount)
}
