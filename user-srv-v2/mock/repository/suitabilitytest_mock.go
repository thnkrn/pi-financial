// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/interfaces/suitabilitytest.go
//
// Generated by this command:
//
//	mockgen -source ./internal/repository/interfaces/suitabilitytest.go -package mockrepository
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	domain "github.com/pi-financial/user-srv-v2/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockSuitabilityTestRepository is a mock of SuitabilityTestRepository interface.
type MockSuitabilityTestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSuitabilityTestRepositoryMockRecorder
	isgomock struct{}
}

// MockSuitabilityTestRepositoryMockRecorder is the mock recorder for MockSuitabilityTestRepository.
type MockSuitabilityTestRepositoryMockRecorder struct {
	mock *MockSuitabilityTestRepository
}

// NewMockSuitabilityTestRepository creates a new mock instance.
func NewMockSuitabilityTestRepository(ctrl *gomock.Controller) *MockSuitabilityTestRepository {
	mock := &MockSuitabilityTestRepository{ctrl: ctrl}
	mock.recorder = &MockSuitabilityTestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSuitabilityTestRepository) EXPECT() *MockSuitabilityTestRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSuitabilityTestRepository) Create(ctx context.Context, userId uuid.UUID, suitabilityTest domain.SuitabilityTest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userId, suitabilityTest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSuitabilityTestRepositoryMockRecorder) Create(ctx, userId, suitabilityTest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSuitabilityTestRepository)(nil).Create), ctx, userId, suitabilityTest)
}

// CreateBatch mocks base method.
func (m *MockSuitabilityTestRepository) CreateBatch(ctx context.Context, suitabilityTest []domain.SuitabilityTest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatch", ctx, suitabilityTest)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBatch indicates an expected call of CreateBatch.
func (mr *MockSuitabilityTestRepositoryMockRecorder) CreateBatch(ctx, suitabilityTest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatch", reflect.TypeOf((*MockSuitabilityTestRepository)(nil).CreateBatch), ctx, suitabilityTest)
}

// FindAllByUserId mocks base method.
func (m *MockSuitabilityTestRepository) FindAllByUserId(ctx context.Context, userId uuid.UUID) ([]domain.SuitabilityTest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByUserId", ctx, userId)
	ret0, _ := ret[0].([]domain.SuitabilityTest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByUserId indicates an expected call of FindAllByUserId.
func (mr *MockSuitabilityTestRepositoryMockRecorder) FindAllByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByUserId", reflect.TypeOf((*MockSuitabilityTestRepository)(nil).FindAllByUserId), ctx, userId)
}

// FindByUserId mocks base method.
func (m *MockSuitabilityTestRepository) FindByUserId(ctx context.Context, userId uuid.UUID) (*domain.SuitabilityTest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", ctx, userId)
	ret0, _ := ret[0].(*domain.SuitabilityTest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockSuitabilityTestRepositoryMockRecorder) FindByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockSuitabilityTestRepository)(nil).FindByUserId), ctx, userId)
}
