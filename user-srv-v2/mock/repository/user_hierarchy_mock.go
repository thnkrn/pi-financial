// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/interfaces/user_hierarchy.go
//
// Generated by this command:
//
//	mockgen -source ./internal/repository/interfaces/user_hierarchy.go -package mockrepository
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	domain "github.com/pi-financial/user-srv-v2/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUserHierarchyRepository is a mock of UserHierarchyRepository interface.
type MockUserHierarchyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserHierarchyRepositoryMockRecorder
	isgomock struct{}
}

// MockUserHierarchyRepositoryMockRecorder is the mock recorder for MockUserHierarchyRepository.
type MockUserHierarchyRepositoryMockRecorder struct {
	mock *MockUserHierarchyRepository
}

// NewMockUserHierarchyRepository creates a new mock instance.
func NewMockUserHierarchyRepository(ctrl *gomock.Controller) *MockUserHierarchyRepository {
	mock := &MockUserHierarchyRepository{ctrl: ctrl}
	mock.recorder = &MockUserHierarchyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserHierarchyRepository) EXPECT() *MockUserHierarchyRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserHierarchyRepository) Create(ctx context.Context, userHierarchy *domain.UserHierarchy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userHierarchy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserHierarchyRepositoryMockRecorder) Create(ctx, userHierarchy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserHierarchyRepository)(nil).Create), ctx, userHierarchy)
}

// Delete mocks base method.
func (m *MockUserHierarchyRepository) Delete(ctx context.Context, userHierarchy *domain.UserHierarchy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userHierarchy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserHierarchyRepositoryMockRecorder) Delete(ctx, userHierarchy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserHierarchyRepository)(nil).Delete), ctx, userHierarchy)
}

// FindById mocks base method.
func (m *MockUserHierarchyRepository) FindById(ctx context.Context, id string) (domain.UserHierarchy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, id)
	ret0, _ := ret[0].(domain.UserHierarchy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserHierarchyRepositoryMockRecorder) FindById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserHierarchyRepository)(nil).FindById), ctx, id)
}

// FindByUserId mocks base method.
func (m *MockUserHierarchyRepository) FindByUserId(ctx context.Context, userId string) ([]domain.UserHierarchy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", ctx, userId)
	ret0, _ := ret[0].([]domain.UserHierarchy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockUserHierarchyRepositoryMockRecorder) FindByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockUserHierarchyRepository)(nil).FindByUserId), ctx, userId)
}

// Update mocks base method.
func (m *MockUserHierarchyRepository) Update(ctx context.Context, userHierarchy *domain.UserHierarchy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, userHierarchy)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserHierarchyRepositoryMockRecorder) Update(ctx, userHierarchy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserHierarchyRepository)(nil).Update), ctx, userHierarchy)
}
