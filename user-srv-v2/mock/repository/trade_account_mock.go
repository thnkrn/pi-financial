// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/interfaces/trade_account.go
//
// Generated by this command:
//
//	mockgen -source ./internal/repository/interfaces/trade_account.go -package mockrepository
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	domain "github.com/pi-financial/user-srv-v2/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockTradeAccountRepository is a mock of TradeAccountRepository interface.
type MockTradeAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTradeAccountRepositoryMockRecorder
	isgomock struct{}
}

// MockTradeAccountRepositoryMockRecorder is the mock recorder for MockTradeAccountRepository.
type MockTradeAccountRepositoryMockRecorder struct {
	mock *MockTradeAccountRepository
}

// NewMockTradeAccountRepository creates a new mock instance.
func NewMockTradeAccountRepository(ctrl *gomock.Controller) *MockTradeAccountRepository {
	mock := &MockTradeAccountRepository{ctrl: ctrl}
	mock.recorder = &MockTradeAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradeAccountRepository) EXPECT() *MockTradeAccountRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTradeAccountRepository) Create(ctx context.Context, tradeAccount *domain.TradeAccount) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tradeAccount)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTradeAccountRepositoryMockRecorder) Create(ctx, tradeAccount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTradeAccountRepository)(nil).Create), ctx, tradeAccount)
}

// FindByAccountNumber mocks base method.
func (m *MockTradeAccountRepository) FindByAccountNumber(ctx context.Context, accountNumber string) (*domain.TradeAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAccountNumber", ctx, accountNumber)
	ret0, _ := ret[0].(*domain.TradeAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAccountNumber indicates an expected call of FindByAccountNumber.
func (mr *MockTradeAccountRepositoryMockRecorder) FindByAccountNumber(ctx, accountNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAccountNumber", reflect.TypeOf((*MockTradeAccountRepository)(nil).FindByAccountNumber), ctx, accountNumber)
}

// FindByUserAccountId mocks base method.
func (m *MockTradeAccountRepository) FindByUserAccountId(ctx context.Context, userAccountId string) ([]domain.TradeAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserAccountId", ctx, userAccountId)
	ret0, _ := ret[0].([]domain.TradeAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserAccountId indicates an expected call of FindByUserAccountId.
func (mr *MockTradeAccountRepositoryMockRecorder) FindByUserAccountId(ctx, userAccountId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserAccountId", reflect.TypeOf((*MockTradeAccountRepository)(nil).FindByUserAccountId), ctx, userAccountId)
}

// FindByUserIdAndAccountType mocks base method.
func (m *MockTradeAccountRepository) FindByUserIdAndAccountType(ctx context.Context, userId, accountType string) ([]domain.TradeAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIdAndAccountType", ctx, userId, accountType)
	ret0, _ := ret[0].([]domain.TradeAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserIdAndAccountType indicates an expected call of FindByUserIdAndAccountType.
func (mr *MockTradeAccountRepositoryMockRecorder) FindByUserIdAndAccountType(ctx, userId, accountType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIdAndAccountType", reflect.TypeOf((*MockTradeAccountRepository)(nil).FindByUserIdAndAccountType), ctx, userId, accountType)
}

// Upsert mocks base method.
func (m *MockTradeAccountRepository) Upsert(ctx context.Context, data *domain.TradeAccount) (*domain.TradeAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, data)
	ret0, _ := ret[0].(*domain.TradeAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockTradeAccountRepositoryMockRecorder) Upsert(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockTradeAccountRepository)(nil).Upsert), ctx, data)
}

// UpsertByUserAccountIdAndAccountTypeCode mocks base method.
func (m *MockTradeAccountRepository) UpsertByUserAccountIdAndAccountTypeCode(ctx context.Context, tradeAccount *domain.TradeAccount) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertByUserAccountIdAndAccountTypeCode", ctx, tradeAccount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertByUserAccountIdAndAccountTypeCode indicates an expected call of UpsertByUserAccountIdAndAccountTypeCode.
func (mr *MockTradeAccountRepositoryMockRecorder) UpsertByUserAccountIdAndAccountTypeCode(ctx, tradeAccount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertByUserAccountIdAndAccountTypeCode", reflect.TypeOf((*MockTradeAccountRepository)(nil).UpsertByUserAccountIdAndAccountTypeCode), ctx, tradeAccount)
}
