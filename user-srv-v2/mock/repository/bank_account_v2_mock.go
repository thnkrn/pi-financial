// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/interfaces/bank_account_v2.go
//
// Generated by this command:
//
//	mockgen -source ./internal/repository/interfaces/bank_account_v2.go -package mockrepository
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	domain "github.com/pi-financial/user-srv-v2/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockBankAccountV2Repository is a mock of BankAccountV2Repository interface.
type MockBankAccountV2Repository struct {
	ctrl     *gomock.Controller
	recorder *MockBankAccountV2RepositoryMockRecorder
	isgomock struct{}
}

// MockBankAccountV2RepositoryMockRecorder is the mock recorder for MockBankAccountV2Repository.
type MockBankAccountV2RepositoryMockRecorder struct {
	mock *MockBankAccountV2Repository
}

// NewMockBankAccountV2Repository creates a new mock instance.
func NewMockBankAccountV2Repository(ctrl *gomock.Controller) *MockBankAccountV2Repository {
	mock := &MockBankAccountV2Repository{ctrl: ctrl}
	mock.recorder = &MockBankAccountV2RepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankAccountV2Repository) EXPECT() *MockBankAccountV2RepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBankAccountV2Repository) Create(ctx context.Context, bankAccountV2 *domain.BankAccountV2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, bankAccountV2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBankAccountV2RepositoryMockRecorder) Create(ctx, bankAccountV2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBankAccountV2Repository)(nil).Create), ctx, bankAccountV2)
}

// FindAllByAccountId mocks base method.
func (m *MockBankAccountV2Repository) FindAllByAccountId(ctx context.Context, accountId, purpose string) ([]domain.BankAccountV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByAccountId", ctx, accountId, purpose)
	ret0, _ := ret[0].([]domain.BankAccountV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByAccountId indicates an expected call of FindAllByAccountId.
func (mr *MockBankAccountV2RepositoryMockRecorder) FindAllByAccountId(ctx, accountId, purpose any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByAccountId", reflect.TypeOf((*MockBankAccountV2Repository)(nil).FindAllByAccountId), ctx, accountId, purpose)
}

// FindByAccountId mocks base method.
func (m *MockBankAccountV2Repository) FindByAccountId(ctx context.Context, accountId, purpose string) (*domain.BankAccountV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAccountId", ctx, accountId, purpose)
	ret0, _ := ret[0].(*domain.BankAccountV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAccountId indicates an expected call of FindByAccountId.
func (mr *MockBankAccountV2RepositoryMockRecorder) FindByAccountId(ctx, accountId, purpose any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAccountId", reflect.TypeOf((*MockBankAccountV2Repository)(nil).FindByAccountId), ctx, accountId, purpose)
}

// FindByHashedAccountNo mocks base method.
func (m *MockBankAccountV2Repository) FindByHashedAccountNo(ctx context.Context, hashedAccountNo string) (*domain.BankAccountV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHashedAccountNo", ctx, hashedAccountNo)
	ret0, _ := ret[0].(*domain.BankAccountV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHashedAccountNo indicates an expected call of FindByHashedAccountNo.
func (mr *MockBankAccountV2RepositoryMockRecorder) FindByHashedAccountNo(ctx, hashedAccountNo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHashedAccountNo", reflect.TypeOf((*MockBankAccountV2Repository)(nil).FindByHashedAccountNo), ctx, hashedAccountNo)
}

// FindByUserId mocks base method.
func (m *MockBankAccountV2Repository) FindByUserId(ctx context.Context, userId string) ([]domain.BankAccountV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", ctx, userId)
	ret0, _ := ret[0].([]domain.BankAccountV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockBankAccountV2RepositoryMockRecorder) FindByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockBankAccountV2Repository)(nil).FindByUserId), ctx, userId)
}

// MarkOtherStatusInactiveByUserId mocks base method.
func (m *MockBankAccountV2Repository) MarkOtherStatusInactiveByUserId(ctx context.Context, userId, requestHashedBankAccountNo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkOtherStatusInactiveByUserId", ctx, userId, requestHashedBankAccountNo)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkOtherStatusInactiveByUserId indicates an expected call of MarkOtherStatusInactiveByUserId.
func (mr *MockBankAccountV2RepositoryMockRecorder) MarkOtherStatusInactiveByUserId(ctx, userId, requestHashedBankAccountNo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkOtherStatusInactiveByUserId", reflect.TypeOf((*MockBankAccountV2Repository)(nil).MarkOtherStatusInactiveByUserId), ctx, userId, requestHashedBankAccountNo)
}

// MarkStatusActiveByHashedAccountNo mocks base method.
func (m *MockBankAccountV2Repository) MarkStatusActiveByHashedAccountNo(ctx context.Context, hashedAccountNo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkStatusActiveByHashedAccountNo", ctx, hashedAccountNo)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkStatusActiveByHashedAccountNo indicates an expected call of MarkStatusActiveByHashedAccountNo.
func (mr *MockBankAccountV2RepositoryMockRecorder) MarkStatusActiveByHashedAccountNo(ctx, hashedAccountNo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkStatusActiveByHashedAccountNo", reflect.TypeOf((*MockBankAccountV2Repository)(nil).MarkStatusActiveByHashedAccountNo), ctx, hashedAccountNo)
}

// MarkStatusInactiveByHashedAccountNo mocks base method.
func (m *MockBankAccountV2Repository) MarkStatusInactiveByHashedAccountNo(ctx context.Context, hashedAccountNo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkStatusInactiveByHashedAccountNo", ctx, hashedAccountNo)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkStatusInactiveByHashedAccountNo indicates an expected call of MarkStatusInactiveByHashedAccountNo.
func (mr *MockBankAccountV2RepositoryMockRecorder) MarkStatusInactiveByHashedAccountNo(ctx, hashedAccountNo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkStatusInactiveByHashedAccountNo", reflect.TypeOf((*MockBankAccountV2Repository)(nil).MarkStatusInactiveByHashedAccountNo), ctx, hashedAccountNo)
}

// Update mocks base method.
func (m *MockBankAccountV2Repository) Update(ctx context.Context, bankAccountV2 *domain.BankAccountV2) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, bankAccountV2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBankAccountV2RepositoryMockRecorder) Update(ctx, bankAccountV2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBankAccountV2Repository)(nil).Update), ctx, bankAccountV2)
}
