// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/interfaces/feature.go
//
// Generated by this command:
//
//	mockgen -source ./internal/service/interfaces/feature.go -package mockservice
//

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFeatureService is a mock of FeatureService interface.
type MockFeatureService struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureServiceMockRecorder
	isgomock struct{}
}

// MockFeatureServiceMockRecorder is the mock recorder for MockFeatureService.
type MockFeatureServiceMockRecorder struct {
	mock *MockFeatureService
}

// NewMockFeatureService creates a new mock instance.
func NewMockFeatureService(ctrl *gomock.Controller) *MockFeatureService {
	mock := &MockFeatureService{ctrl: ctrl}
	mock.recorder = &MockFeatureServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureService) EXPECT() *MockFeatureServiceMockRecorder {
	return m.recorder
}

// IsOff mocks base method.
func (m *MockFeatureService) IsOff(ctx context.Context, featureName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOff", ctx, featureName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOff indicates an expected call of IsOff.
func (mr *MockFeatureServiceMockRecorder) IsOff(ctx, featureName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOff", reflect.TypeOf((*MockFeatureService)(nil).IsOff), ctx, featureName)
}

// IsOn mocks base method.
func (m *MockFeatureService) IsOn(ctx context.Context, featureName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOn", ctx, featureName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOn indicates an expected call of IsOn.
func (mr *MockFeatureServiceMockRecorder) IsOn(ctx, featureName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOn", reflect.TypeOf((*MockFeatureService)(nil).IsOn), ctx, featureName)
}
