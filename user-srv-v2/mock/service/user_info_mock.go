// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/interfaces/user_info.go
//
// Generated by this command:
//
//	mockgen -source ./internal/service/interfaces/user_info.go -package mockservice
//

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"

	dto "github.com/pi-financial/user-srv-v2/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockUserInfoService is a mock of UserInfoService interface.
type MockUserInfoService struct {
	ctrl     *gomock.Controller
	recorder *MockUserInfoServiceMockRecorder
	isgomock struct{}
}

// MockUserInfoServiceMockRecorder is the mock recorder for MockUserInfoService.
type MockUserInfoServiceMockRecorder struct {
	mock *MockUserInfoService
}

// NewMockUserInfoService creates a new mock instance.
func NewMockUserInfoService(ctrl *gomock.Controller) *MockUserInfoService {
	mock := &MockUserInfoService{ctrl: ctrl}
	mock.recorder = &MockUserInfoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInfoService) EXPECT() *MockUserInfoServiceMockRecorder {
	return m.recorder
}

// AddSubUser mocks base method.
func (m *MockUserInfoService) AddSubUser(ctx context.Context, userId string, req []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubUser", ctx, userId, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSubUser indicates an expected call of AddSubUser.
func (mr *MockUserInfoServiceMockRecorder) AddSubUser(ctx, userId, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubUser", reflect.TypeOf((*MockUserInfoService)(nil).AddSubUser), ctx, userId, req)
}

// GetSubUser mocks base method.
func (m *MockUserInfoService) GetSubUser(ctx context.Context, userId string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubUser", ctx, userId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubUser indicates an expected call of GetSubUser.
func (mr *MockUserInfoServiceMockRecorder) GetSubUser(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubUser", reflect.TypeOf((*MockUserInfoService)(nil).GetSubUser), ctx, userId)
}

// GetUserInfo mocks base method.
func (m *MockUserInfoService) GetUserInfo(ctx context.Context, userId string) (*dto.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, userId)
	ret0, _ := ret[0].(*dto.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockUserInfoServiceMockRecorder) GetUserInfo(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUserInfoService)(nil).GetUserInfo), ctx, userId)
}

// GetUserInfoByFilters mocks base method.
func (m *MockUserInfoService) GetUserInfoByFilters(ctx context.Context, filters dto.GetUserInfoByFiltersRequest) ([]dto.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoByFilters", ctx, filters)
	ret0, _ := ret[0].([]dto.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoByFilters indicates an expected call of GetUserInfoByFilters.
func (mr *MockUserInfoServiceMockRecorder) GetUserInfoByFilters(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoByFilters", reflect.TypeOf((*MockUserInfoService)(nil).GetUserInfoByFilters), ctx, filters)
}

// MigrateUser mocks base method.
func (m *MockUserInfoService) MigrateUser(ctx context.Context, userId string, req *dto.MigrateUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateUser", ctx, userId, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateUser indicates an expected call of MigrateUser.
func (mr *MockUserInfoServiceMockRecorder) MigrateUser(ctx, userId, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateUser", reflect.TypeOf((*MockUserInfoService)(nil).MigrateUser), ctx, userId, req)
}

// SyncUserInfo mocks base method.
func (m *MockUserInfoService) SyncUserInfo(ctx context.Context, customerCode string, syncType dto.SyncUserInfoType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncUserInfo", ctx, customerCode, syncType)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncUserInfo indicates an expected call of SyncUserInfo.
func (mr *MockUserInfoServiceMockRecorder) SyncUserInfo(ctx, customerCode, syncType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncUserInfo", reflect.TypeOf((*MockUserInfoService)(nil).SyncUserInfo), ctx, customerCode, syncType)
}

// UpdateUserInfo mocks base method.
func (m *MockUserInfoService) UpdateUserInfo(ctx context.Context, userId string, req *dto.PatchUserInfoRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInfo", ctx, userId, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserInfo indicates an expected call of UpdateUserInfo.
func (mr *MockUserInfoServiceMockRecorder) UpdateUserInfo(ctx, userId, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInfo", reflect.TypeOf((*MockUserInfoService)(nil).UpdateUserInfo), ctx, userId, req)
}
