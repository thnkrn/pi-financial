// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/interfaces/trade_account.go
//
// Generated by this command:
//
//	mockgen -source ./internal/service/interfaces/trade_account.go -package mockservice
//

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"

	dto "github.com/pi-financial/user-srv-v2/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockTradeAccountService is a mock of TradeAccountService interface.
type MockTradeAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockTradeAccountServiceMockRecorder
	isgomock struct{}
}

// MockTradeAccountServiceMockRecorder is the mock recorder for MockTradeAccountService.
type MockTradeAccountServiceMockRecorder struct {
	mock *MockTradeAccountService
}

// NewMockTradeAccountService creates a new mock instance.
func NewMockTradeAccountService(ctrl *gomock.Controller) *MockTradeAccountService {
	mock := &MockTradeAccountService{ctrl: ctrl}
	mock.recorder = &MockTradeAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradeAccountService) EXPECT() *MockTradeAccountServiceMockRecorder {
	return m.recorder
}

// CreateTradingAccount mocks base method.
func (m *MockTradeAccountService) CreateTradingAccount(ctx context.Context, customerCode string, req []dto.CreateTradingAccountRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTradingAccount", ctx, customerCode, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTradingAccount indicates an expected call of CreateTradingAccount.
func (mr *MockTradeAccountServiceMockRecorder) CreateTradingAccount(ctx, customerCode, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTradingAccount", reflect.TypeOf((*MockTradeAccountService)(nil).CreateTradingAccount), ctx, customerCode, req)
}

// GetDepositWithdrawableTradingAccounts mocks base method.
func (m *MockTradeAccountService) GetDepositWithdrawableTradingAccounts(ctx context.Context, userId string) ([]dto.DepositWithdrawTradingAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDepositWithdrawableTradingAccounts", ctx, userId)
	ret0, _ := ret[0].([]dto.DepositWithdrawTradingAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDepositWithdrawableTradingAccounts indicates an expected call of GetDepositWithdrawableTradingAccounts.
func (mr *MockTradeAccountServiceMockRecorder) GetDepositWithdrawableTradingAccounts(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDepositWithdrawableTradingAccounts", reflect.TypeOf((*MockTradeAccountService)(nil).GetDepositWithdrawableTradingAccounts), ctx, userId)
}

// GetTradingAccountByUserId mocks base method.
func (m *MockTradeAccountService) GetTradingAccountByUserId(ctx context.Context, userId string) ([]dto.TradeAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradingAccountByUserId", ctx, userId)
	ret0, _ := ret[0].([]dto.TradeAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradingAccountByUserId indicates an expected call of GetTradingAccountByUserId.
func (mr *MockTradeAccountServiceMockRecorder) GetTradingAccountByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradingAccountByUserId", reflect.TypeOf((*MockTradeAccountService)(nil).GetTradingAccountByUserId), ctx, userId)
}

// GetTradingAccountWithMarketingInfoByCustomerCodes mocks base method.
func (m *MockTradeAccountService) GetTradingAccountWithMarketingInfoByCustomerCodes(ctx context.Context, customerCodes []string) ([]dto.TradingAccountsMarketingInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradingAccountWithMarketingInfoByCustomerCodes", ctx, customerCodes)
	ret0, _ := ret[0].([]dto.TradingAccountsMarketingInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradingAccountWithMarketingInfoByCustomerCodes indicates an expected call of GetTradingAccountWithMarketingInfoByCustomerCodes.
func (mr *MockTradeAccountServiceMockRecorder) GetTradingAccountWithMarketingInfoByCustomerCodes(ctx, customerCodes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradingAccountWithMarketingInfoByCustomerCodes", reflect.TypeOf((*MockTradeAccountService)(nil).GetTradingAccountWithMarketingInfoByCustomerCodes), ctx, customerCodes)
}
