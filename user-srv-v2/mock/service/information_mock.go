// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/interfaces/information.go
//
// Generated by this command:
//
//	mockgen -source ./internal/service/interfaces/information.go -package mockservice
//

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"

	dto "github.com/pi-financial/user-srv-v2/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockInformationService is a mock of InformationService interface.
type MockInformationService struct {
	ctrl     *gomock.Controller
	recorder *MockInformationServiceMockRecorder
	isgomock struct{}
}

// MockInformationServiceMockRecorder is the mock recorder for MockInformationService.
type MockInformationServiceMockRecorder struct {
	mock *MockInformationService
}

// NewMockInformationService creates a new mock instance.
func NewMockInformationService(ctrl *gomock.Controller) *MockInformationService {
	mock := &MockInformationService{ctrl: ctrl}
	mock.recorder = &MockInformationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInformationService) EXPECT() *MockInformationServiceMockRecorder {
	return m.recorder
}

// GetBankInfoByBankCode mocks base method.
func (m *MockInformationService) GetBankInfoByBankCode(ctx context.Context, bankCode string) (*dto.GetBankByBankCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankInfoByBankCode", ctx, bankCode)
	ret0, _ := ret[0].(*dto.GetBankByBankCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankInfoByBankCode indicates an expected call of GetBankInfoByBankCode.
func (mr *MockInformationServiceMockRecorder) GetBankInfoByBankCode(ctx, bankCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankInfoByBankCode", reflect.TypeOf((*MockInformationService)(nil).GetBankInfoByBankCode), ctx, bankCode)
}

// GetBankInfosByBankCode mocks base method.
func (m *MockInformationService) GetBankInfosByBankCode(ctx context.Context, bankCode string) ([]dto.GetBankByBankCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankInfosByBankCode", ctx, bankCode)
	ret0, _ := ret[0].([]dto.GetBankByBankCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankInfosByBankCode indicates an expected call of GetBankInfosByBankCode.
func (mr *MockInformationServiceMockRecorder) GetBankInfosByBankCode(ctx, bankCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankInfosByBankCode", reflect.TypeOf((*MockInformationService)(nil).GetBankInfosByBankCode), ctx, bankCode)
}

// GetProductByProductName mocks base method.
func (m *MockInformationService) GetProductByProductName(ctx context.Context, productName string) (*dto.GetProductByProductNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByProductName", ctx, productName)
	ret0, _ := ret[0].(*dto.GetProductByProductNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByProductName indicates an expected call of GetProductByProductName.
func (mr *MockInformationServiceMockRecorder) GetProductByProductName(ctx, productName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByProductName", reflect.TypeOf((*MockInformationService)(nil).GetProductByProductName), ctx, productName)
}

// GetProductCode mocks base method.
func (m *MockInformationService) GetProductCode(ctx context.Context, productName string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductCode", ctx, productName)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductCode indicates an expected call of GetProductCode.
func (mr *MockInformationServiceMockRecorder) GetProductCode(ctx, productName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductCode", reflect.TypeOf((*MockInformationService)(nil).GetProductCode), ctx, productName)
}
