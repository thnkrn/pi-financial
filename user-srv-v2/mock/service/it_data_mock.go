// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/interfaces/it_data.go
//
// Generated by this command:
//
//	mockgen -source ./internal/service/interfaces/it_data.go -package mockservice
//

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"

	dto "github.com/pi-financial/user-srv-v2/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockItDataService is a mock of ItDataService interface.
type MockItDataService struct {
	ctrl     *gomock.Controller
	recorder *MockItDataServiceMockRecorder
	isgomock struct{}
}

// MockItDataServiceMockRecorder is the mock recorder for MockItDataService.
type MockItDataServiceMockRecorder struct {
	mock *MockItDataService
}

// NewMockItDataService creates a new mock instance.
func NewMockItDataService(ctrl *gomock.Controller) *MockItDataService {
	mock := &MockItDataService{ctrl: ctrl}
	mock.recorder = &MockItDataServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItDataService) EXPECT() *MockItDataServiceMockRecorder {
	return m.recorder
}

// FilterAllAtsBankAccountsForAccountCodeRPTypeAndTransactionTypes mocks base method.
func (m *MockItDataService) FilterAllAtsBankAccountsForAccountCodeRPTypeAndTransactionTypes(atsBankAccounts []dto.GetAtsBankAccountsResponse, accountCode string, rpType dto.BankAccountRPType, transactionTypes []dto.BankAccountTrasactionType) []dto.GetAtsBankAccountsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterAllAtsBankAccountsForAccountCodeRPTypeAndTransactionTypes", atsBankAccounts, accountCode, rpType, transactionTypes)
	ret0, _ := ret[0].([]dto.GetAtsBankAccountsResponse)
	return ret0
}

// FilterAllAtsBankAccountsForAccountCodeRPTypeAndTransactionTypes indicates an expected call of FilterAllAtsBankAccountsForAccountCodeRPTypeAndTransactionTypes.
func (mr *MockItDataServiceMockRecorder) FilterAllAtsBankAccountsForAccountCodeRPTypeAndTransactionTypes(atsBankAccounts, accountCode, rpType, transactionTypes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAllAtsBankAccountsForAccountCodeRPTypeAndTransactionTypes", reflect.TypeOf((*MockItDataService)(nil).FilterAllAtsBankAccountsForAccountCodeRPTypeAndTransactionTypes), atsBankAccounts, accountCode, rpType, transactionTypes)
}

// FilterAtsBankAccountsForAccountCodeRPTypeAndTransactionTypes mocks base method.
func (m *MockItDataService) FilterAtsBankAccountsForAccountCodeRPTypeAndTransactionTypes(atsBankAccounts []dto.GetAtsBankAccountsResponse, accountCode string, rpType dto.BankAccountRPType, transactionTypes []dto.BankAccountTrasactionType) *dto.GetAtsBankAccountsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterAtsBankAccountsForAccountCodeRPTypeAndTransactionTypes", atsBankAccounts, accountCode, rpType, transactionTypes)
	ret0, _ := ret[0].(*dto.GetAtsBankAccountsResponse)
	return ret0
}

// FilterAtsBankAccountsForAccountCodeRPTypeAndTransactionTypes indicates an expected call of FilterAtsBankAccountsForAccountCodeRPTypeAndTransactionTypes.
func (mr *MockItDataServiceMockRecorder) FilterAtsBankAccountsForAccountCodeRPTypeAndTransactionTypes(atsBankAccounts, accountCode, rpType, transactionTypes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAtsBankAccountsForAccountCodeRPTypeAndTransactionTypes", reflect.TypeOf((*MockItDataService)(nil).FilterAtsBankAccountsForAccountCodeRPTypeAndTransactionTypes), atsBankAccounts, accountCode, rpType, transactionTypes)
}

// GetAtsBankAccountsFromCustomerCode mocks base method.
func (m *MockItDataService) GetAtsBankAccountsFromCustomerCode(ctx context.Context, customerCode string) ([]dto.GetAtsBankAccountsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAtsBankAccountsFromCustomerCode", ctx, customerCode)
	ret0, _ := ret[0].([]dto.GetAtsBankAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAtsBankAccountsFromCustomerCode indicates an expected call of GetAtsBankAccountsFromCustomerCode.
func (mr *MockItDataServiceMockRecorder) GetAtsBankAccountsFromCustomerCode(ctx, customerCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAtsBankAccountsFromCustomerCode", reflect.TypeOf((*MockItDataService)(nil).GetAtsBankAccountsFromCustomerCode), ctx, customerCode)
}
