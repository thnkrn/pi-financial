// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/interfaces/watchlist.go
//
// Generated by this command:
//
//	mockgen -source ./internal/service/interfaces/watchlist.go -package mockservice
//

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	dto "github.com/pi-financial/user-srv-v2/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockWatchlistService is a mock of WatchlistService interface.
type MockWatchlistService struct {
	ctrl     *gomock.Controller
	recorder *MockWatchlistServiceMockRecorder
	isgomock struct{}
}

// MockWatchlistServiceMockRecorder is the mock recorder for MockWatchlistService.
type MockWatchlistServiceMockRecorder struct {
	mock *MockWatchlistService
}

// NewMockWatchlistService creates a new mock instance.
func NewMockWatchlistService(ctrl *gomock.Controller) *MockWatchlistService {
	mock := &MockWatchlistService{ctrl: ctrl}
	mock.recorder = &MockWatchlistServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatchlistService) EXPECT() *MockWatchlistServiceMockRecorder {
	return m.recorder
}

// CreateWatchlist mocks base method.
func (m *MockWatchlistService) CreateWatchlist(ctx context.Context, userID string, req *dto.OptWatchlistRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWatchlist", ctx, userID, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWatchlist indicates an expected call of CreateWatchlist.
func (mr *MockWatchlistServiceMockRecorder) CreateWatchlist(ctx, userID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWatchlist", reflect.TypeOf((*MockWatchlistService)(nil).CreateWatchlist), ctx, userID, req)
}

// GetWatchlistByUserId mocks base method.
func (m *MockWatchlistService) GetWatchlistByUserId(ctx context.Context, userID uuid.UUID, venue string) ([]dto.Watchlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWatchlistByUserId", ctx, userID, venue)
	ret0, _ := ret[0].([]dto.Watchlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWatchlistByUserId indicates an expected call of GetWatchlistByUserId.
func (mr *MockWatchlistServiceMockRecorder) GetWatchlistByUserId(ctx, userID, venue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWatchlistByUserId", reflect.TypeOf((*MockWatchlistService)(nil).GetWatchlistByUserId), ctx, userID, venue)
}
