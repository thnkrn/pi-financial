// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/interfaces/bank_account.go
//
// Generated by this command:
//
//	mockgen -source ./internal/service/interfaces/bank_account.go -package mockservice
//

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	dto "github.com/pi-financial/user-srv-v2/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockBankAccountService is a mock of BankAccountService interface.
type MockBankAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockBankAccountServiceMockRecorder
	isgomock struct{}
}

// MockBankAccountServiceMockRecorder is the mock recorder for MockBankAccountService.
type MockBankAccountServiceMockRecorder struct {
	mock *MockBankAccountService
}

// NewMockBankAccountService creates a new mock instance.
func NewMockBankAccountService(ctrl *gomock.Controller) *MockBankAccountService {
	mock := &MockBankAccountService{ctrl: ctrl}
	mock.recorder = &MockBankAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankAccountService) EXPECT() *MockBankAccountServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBankAccountService) Create(ctx context.Context, userId uuid.UUID, dto *dto.BankAccountRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userId, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBankAccountServiceMockRecorder) Create(ctx, userId, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBankAccountService)(nil).Create), ctx, userId, dto)
}

// GetBankAccountByAccountId mocks base method.
func (m *MockBankAccountService) GetBankAccountByAccountId(ctx context.Context, accountId, purpose string) (*dto.DepositWithdrawBankAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankAccountByAccountId", ctx, accountId, purpose)
	ret0, _ := ret[0].(*dto.DepositWithdrawBankAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankAccountByAccountId indicates an expected call of GetBankAccountByAccountId.
func (mr *MockBankAccountServiceMockRecorder) GetBankAccountByAccountId(ctx, accountId, purpose any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankAccountByAccountId", reflect.TypeOf((*MockBankAccountService)(nil).GetBankAccountByAccountId), ctx, accountId, purpose)
}

// GetBankAccountByCustomerCode mocks base method.
func (m *MockBankAccountService) GetBankAccountByCustomerCode(ctx context.Context, customerCode string, purpose dto.BankAccountPurpose, productName string) (*dto.DepositWithdrawBankAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankAccountByCustomerCode", ctx, customerCode, purpose, productName)
	ret0, _ := ret[0].(*dto.DepositWithdrawBankAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankAccountByCustomerCode indicates an expected call of GetBankAccountByCustomerCode.
func (mr *MockBankAccountServiceMockRecorder) GetBankAccountByCustomerCode(ctx, customerCode, purpose, productName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankAccountByCustomerCode", reflect.TypeOf((*MockBankAccountService)(nil).GetBankAccountByCustomerCode), ctx, customerCode, purpose, productName)
}

// GetBankAccountByUserId mocks base method.
func (m *MockBankAccountService) GetBankAccountByUserId(ctx context.Context, userId string) ([]dto.BankAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankAccountByUserId", ctx, userId)
	ret0, _ := ret[0].([]dto.BankAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankAccountByUserId indicates an expected call of GetBankAccountByUserId.
func (mr *MockBankAccountServiceMockRecorder) GetBankAccountByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankAccountByUserId", reflect.TypeOf((*MockBankAccountService)(nil).GetBankAccountByUserId), ctx, userId)
}

// GetBankAccountsByAccountId mocks base method.
func (m *MockBankAccountService) GetBankAccountsByAccountId(ctx context.Context, accountId, purpose string) ([]dto.DepositWithdrawBankAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankAccountsByAccountId", ctx, accountId, purpose)
	ret0, _ := ret[0].([]dto.DepositWithdrawBankAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankAccountsByAccountId indicates an expected call of GetBankAccountsByAccountId.
func (mr *MockBankAccountServiceMockRecorder) GetBankAccountsByAccountId(ctx, accountId, purpose any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankAccountsByAccountId", reflect.TypeOf((*MockBankAccountService)(nil).GetBankAccountsByAccountId), ctx, accountId, purpose)
}

// GetBankAccountsByCustomerCode mocks base method.
func (m *MockBankAccountService) GetBankAccountsByCustomerCode(ctx context.Context, customerCode string, purpose dto.BankAccountPurpose, productName string) ([]dto.DepositWithdrawBankAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankAccountsByCustomerCode", ctx, customerCode, purpose, productName)
	ret0, _ := ret[0].([]dto.DepositWithdrawBankAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankAccountsByCustomerCode indicates an expected call of GetBankAccountsByCustomerCode.
func (mr *MockBankAccountServiceMockRecorder) GetBankAccountsByCustomerCode(ctx, customerCode, purpose, productName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankAccountsByCustomerCode", reflect.TypeOf((*MockBankAccountService)(nil).GetBankAccountsByCustomerCode), ctx, customerCode, purpose, productName)
}

// MapPurposeToRPType mocks base method.
func (m *MockBankAccountService) MapPurposeToRPType(purpose dto.BankAccountPurpose) (*dto.BankAccountRPType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MapPurposeToRPType", purpose)
	ret0, _ := ret[0].(*dto.BankAccountRPType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MapPurposeToRPType indicates an expected call of MapPurposeToRPType.
func (mr *MockBankAccountServiceMockRecorder) MapPurposeToRPType(purpose any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MapPurposeToRPType", reflect.TypeOf((*MockBankAccountService)(nil).MapPurposeToRPType), purpose)
}

// ResolveSupportedTransactionTypesForAccount mocks base method.
func (m *MockBankAccountService) ResolveSupportedTransactionTypesForAccount(ctx context.Context, accountCode, accountType string) []dto.BankAccountTrasactionType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveSupportedTransactionTypesForAccount", ctx, accountCode, accountType)
	ret0, _ := ret[0].([]dto.BankAccountTrasactionType)
	return ret0
}

// ResolveSupportedTransactionTypesForAccount indicates an expected call of ResolveSupportedTransactionTypesForAccount.
func (mr *MockBankAccountServiceMockRecorder) ResolveSupportedTransactionTypesForAccount(ctx, accountCode, accountType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveSupportedTransactionTypesForAccount", reflect.TypeOf((*MockBankAccountService)(nil).ResolveSupportedTransactionTypesForAccount), ctx, accountCode, accountType)
}
