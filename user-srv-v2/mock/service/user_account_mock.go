// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/interfaces/user_account.go
//
// Generated by this command:
//
//	mockgen -source ./internal/service/interfaces/user_account.go -package mockservice
//

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	dto "github.com/pi-financial/user-srv-v2/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockUserAccountService is a mock of UserAccountService interface.
type MockUserAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockUserAccountServiceMockRecorder
	isgomock struct{}
}

// MockUserAccountServiceMockRecorder is the mock recorder for MockUserAccountService.
type MockUserAccountServiceMockRecorder struct {
	mock *MockUserAccountService
}

// NewMockUserAccountService creates a new mock instance.
func NewMockUserAccountService(ctrl *gomock.Controller) *MockUserAccountService {
	mock := &MockUserAccountService{ctrl: ctrl}
	mock.recorder = &MockUserAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAccountService) EXPECT() *MockUserAccountServiceMockRecorder {
	return m.recorder
}

// GetUserAccountByIdCard mocks base method.
func (m *MockUserAccountService) GetUserAccountByIdCard(ctx context.Context, citizenId string) ([]dto.UserAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountByIdCard", ctx, citizenId)
	ret0, _ := ret[0].([]dto.UserAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountByIdCard indicates an expected call of GetUserAccountByIdCard.
func (mr *MockUserAccountServiceMockRecorder) GetUserAccountByIdCard(ctx, citizenId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountByIdCard", reflect.TypeOf((*MockUserAccountService)(nil).GetUserAccountByIdCard), ctx, citizenId)
}

// GetUserAccountByUserId mocks base method.
func (m *MockUserAccountService) GetUserAccountByUserId(ctx context.Context, userId uuid.UUID) ([]dto.UserAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountByUserId", ctx, userId)
	ret0, _ := ret[0].([]dto.UserAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountByUserId indicates an expected call of GetUserAccountByUserId.
func (mr *MockUserAccountServiceMockRecorder) GetUserAccountByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountByUserId", reflect.TypeOf((*MockUserAccountService)(nil).GetUserAccountByUserId), ctx, userId)
}

// GetUserAccountByUserIdAndCitizenId mocks base method.
func (m *MockUserAccountService) GetUserAccountByUserIdAndCitizenId(ctx context.Context, userId uuid.UUID, citizenId string) ([]dto.UserAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccountByUserIdAndCitizenId", ctx, userId, citizenId)
	ret0, _ := ret[0].([]dto.UserAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccountByUserIdAndCitizenId indicates an expected call of GetUserAccountByUserIdAndCitizenId.
func (mr *MockUserAccountServiceMockRecorder) GetUserAccountByUserIdAndCitizenId(ctx, userId, citizenId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccountByUserIdAndCitizenId", reflect.TypeOf((*MockUserAccountService)(nil).GetUserAccountByUserIdAndCitizenId), ctx, userId, citizenId)
}

// LinkUserAccount mocks base method.
func (m *MockUserAccountService) LinkUserAccount(ctx context.Context, userId uuid.UUID, userAccountReq dto.LinkUserAccountRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkUserAccount", ctx, userId, userAccountReq)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkUserAccount indicates an expected call of LinkUserAccount.
func (mr *MockUserAccountServiceMockRecorder) LinkUserAccount(ctx, userId, userAccountReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkUserAccount", reflect.TypeOf((*MockUserAccountService)(nil).LinkUserAccount), ctx, userId, userAccountReq)
}
