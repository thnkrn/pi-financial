// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/interfaces/external_account.go
//
// Generated by this command:
//
//	mockgen -source ./internal/service/interfaces/external_account.go -package mockservice
//

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	dto "github.com/pi-financial/user-srv-v2/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockExternalAccountService is a mock of ExternalAccountService interface.
type MockExternalAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockExternalAccountServiceMockRecorder
	isgomock struct{}
}

// MockExternalAccountServiceMockRecorder is the mock recorder for MockExternalAccountService.
type MockExternalAccountServiceMockRecorder struct {
	mock *MockExternalAccountService
}

// NewMockExternalAccountService creates a new mock instance.
func NewMockExternalAccountService(ctrl *gomock.Controller) *MockExternalAccountService {
	mock := &MockExternalAccountService{ctrl: ctrl}
	mock.recorder = &MockExternalAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalAccountService) EXPECT() *MockExternalAccountServiceMockRecorder {
	return m.recorder
}

// CreateExternalAccount mocks base method.
func (m *MockExternalAccountService) CreateExternalAccount(ctx context.Context, userId uuid.UUID, req dto.CreateExternalAccountRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExternalAccount", ctx, userId, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExternalAccount indicates an expected call of CreateExternalAccount.
func (mr *MockExternalAccountServiceMockRecorder) CreateExternalAccount(ctx, userId, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExternalAccount", reflect.TypeOf((*MockExternalAccountService)(nil).CreateExternalAccount), ctx, userId, req)
}
