// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/pi-financial/go-common/logger"
	"github.com/pi-financial/go-common/middleware"
	"github.com/pi-financial/user-srv-v2/config"
	"github.com/pi-financial/user-srv-v2/internal/driver/client"
	"github.com/pi-financial/user-srv-v2/internal/driver/growthbook"
	"github.com/pi-financial/user-srv-v2/internal/driver/mysql"
	"github.com/pi-financial/user-srv-v2/internal/handler"
	"github.com/pi-financial/user-srv-v2/internal/repository"
	"github.com/pi-financial/user-srv-v2/internal/service"
)

// Injectors from wire.go:

func InitializeAPI(cfg config.Config) (*handler.ServerHTTP, error) {
	zapLogger, err := logger.ProvidZapLogger()
	if err != nil {
		return nil, err
	}
	zapImplement := logger.ProvideLogger(zapLogger)
	middlewareLogger := middleware.NewLogger()
	middlewares := &handler.Middlewares{
		Logger: middlewareLogger,
	}
	db, err := mysql.ConnectDatabase(cfg)
	if err != nil {
		return nil, err
	}
	addressRepository := repository.NewAddressRepository(db)
	bankAccountV2Repository := repository.NewBankAccountV2Repository(db)
	externalAccountRepository := repository.NewExternalAccountRepository(db, zapImplement)
	userInfoRepository := repository.NewUserInfoRepository(db)
	userAccountRepository := repository.NewUserAccountRepository(db, zapImplement)
	tradeAccountRepository := repository.NewTradeAccountRepository(db, zapImplement)
	suitabilityTestRepository := repository.NewSuitabilityTestRepository(db, zapImplement)
	kycRepository := repository.NewKycRepository(db)
	userHierarchyRepository := repository.NewUserHierarchyRepository(db)
	documentRepository := repository.NewDocumentRepository(db, zapImplement)
	changeRequestRepository := repository.NewChangeRequestRepository(db)
	auditLogRepository := repository.NewAuditLogRepository(db)
	itDataClient := client.NewItDataClient(zapImplement, cfg)
	onboardClient := client.NewOnboardClient(cfg)
	s3Client, err := client.NewS3Client(zapImplement)
	if err != nil {
		return nil, err
	}
	informationClient := client.NewInformationClient(zapImplement, cfg)
	userInfoService := service.NewUserInfoService(addressRepository, bankAccountV2Repository, externalAccountRepository, userInfoRepository, userAccountRepository, tradeAccountRepository, suitabilityTestRepository, kycRepository, userHierarchyRepository, documentRepository, changeRequestRepository, auditLogRepository, zapImplement, itDataClient, onboardClient, s3Client, informationClient)
	userInfoHandler := handler.NewUserInfoHandler(userInfoService, zapImplement)
	watchlistRepository := repository.NewWatchlistRepository(db)
	watchlistService := service.NewWatchlistService(watchlistRepository)
	watchlistHandler := handler.NewWatchlistHandler(watchlistService, zapImplement)
	userAccountService := service.NewUserAccountService(userAccountRepository, userInfoRepository, itDataClient, zapImplement)
	userAccountHandler := handler.NewUserAccountHandler(userAccountService, zapImplement)
	informationService := service.NewInformationService(zapImplement, informationClient)
	itDataService := service.NewItDataService(zapImplement, itDataClient)
	growthbookClient, err := growthbook.ConnectGrowthbook(cfg)
	if err != nil {
		return nil, err
	}
	featureService := service.NewFeatureService(growthbookClient)
	bankAccountService := service.NewBankAccountService(zapImplement, bankAccountV2Repository, informationService, itDataService, onboardClient, informationClient, featureService)
	bankAccountHandler := handler.NewBankAccountHandler(bankAccountService, zapImplement)
	tradeAccountService := service.NewTradeAccountService(tradeAccountRepository, externalAccountRepository, userAccountRepository, itDataClient, informationClient, zapImplement)
	tradingAccountHandler := handler.NewTradingAccountHandler(tradeAccountService, zapImplement)
	addressService := service.NewAddressService(addressRepository, itDataClient, userInfoRepository, zapImplement)
	addressHandler := handler.NewAddressHandler(addressService)
	kycService := service.NewKycService(kycRepository, itDataClient, userInfoRepository, zapImplement)
	kycHandler := handler.NewKycHandler(kycService)
	externalAccountService := service.NewExternalAccountService(userAccountRepository, informationClient, tradeAccountRepository, externalAccountRepository, zapImplement)
	externalAccountHandler := handler.NewExternalAccountHandler(externalAccountService)
	suitabilityTestService := service.NewSuitabilityTestService(suitabilityTestRepository, itDataClient, userAccountRepository, zapImplement)
	suitabilityTestHandler := handler.NewSuitabilityTestHandler(suitabilityTestService)
	debugHandler := handler.NewDebugHandler(featureService)
	changeRequestInfoRepository := repository.NewChangeRequestInfoRepository(db)
	dopaClient := client.NewDopaClient(zapImplement, cfg)
	changeRequestService := service.NewChangeRequestService(changeRequestRepository, auditLogRepository, changeRequestInfoRepository, userInfoRepository, itDataClient, dopaClient, documentRepository, s3Client)
	changeRequestHandler := handler.NewChangeRequestHandler(changeRequestService, zapImplement)
	handlers := handler.Handlers{
		UserInfoHandler:        userInfoHandler,
		WatchlistHandler:       watchlistHandler,
		UserAccountHandler:     userAccountHandler,
		BankAccountHandler:     bankAccountHandler,
		TradingAccountHandler:  tradingAccountHandler,
		AddressHandler:         addressHandler,
		KycHandler:             kycHandler,
		ExternalAccountHandler: externalAccountHandler,
		SuitabilityTestHandler: suitabilityTestHandler,
		DebugHandler:           debugHandler,
		ChangeRequestHandler:   changeRequestHandler,
	}
	serverHTTP := handler.NewServerHTTP(zapImplement, middlewares, handlers, cfg)
	return serverHTTP, nil
}
